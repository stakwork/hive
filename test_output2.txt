
 RUN  v3.2.4 /workspaces/hive

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."chat_messages" WHERE EXISTS(SELECT "t0"."id" FROM "public"."tasks" AS "t0" WHERE ("t0"."title"::text LIKE $1 AND ("public"."chat_messages"."task_id") = ("t0"."id") AND "t0"."id" IS NOT NULL))

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."tasks" WHERE "public"."tasks"."title"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."swarms" WHERE "public"."swarms"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."workspace_members" WHERE EXISTS(SELECT "t0"."id" FROM "public"."workspaces" AS "t0" WHERE ("t0"."name"::text LIKE $1 AND ("public"."workspace_members"."workspace_id") = ("t0"."id") AND "t0"."id" IS NOT NULL))

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."workspaces" WHERE "public"."workspaces"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."chat_messages" WHERE EXISTS(SELECT "t0"."id" FROM "public"."tasks" AS "t0" WHERE ("t0"."title"::text LIKE $1 AND ("public"."chat_messages"."task_id") = ("t0"."id") AND "t0"."id" IS NOT NULL))

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."tasks" WHERE "public"."tasks"."title"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."swarms" WHERE "public"."swarms"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."workspace_members" WHERE EXISTS(SELECT "t0"."id" FROM "public"."workspaces" AS "t0" WHERE ("t0"."name"::text LIKE $1 AND ("public"."workspace_members"."workspace_id") = ("t0"."id") AND "t0"."id" IS NOT NULL))

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."workspaces" WHERE "public"."workspaces"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query BEGIN

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query INSERT INTO "public"."workspaces" ("id","name","description","slug","deleted","created_at","updated_at","owner_id","stakwork_api_key") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query INSERT INTO "public"."swarms" ("id","name","swarm_id","swarm_url","status","instance_type","created_at","updated_at","pool_name","repository_name","default_branch","repository_url","swarm_secret_alias","environment_variables","services","wizard_step","step_status","wizard_data","workspace_id") VALUES ($1,$2,$3,$4,CAST($5::text AS "public"."SwarmStatus"),$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,CAST($16::text AS "public"."SwarmWizardStep"),CAST($17::text AS "public"."StepStatus"),$18,$19) RETURNING "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_id", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."instance_type", "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."pool_name", "public"."swarms"."pool_api_key", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."repository_name", "public"."swarms"."default_branch", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_secret_alias", "public"."swarms"."environment_variables", "public"."swarms"."services", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."ingest_ref_id", "public"."swarms"."container_files", "public"."swarms"."swarm_password", "public"."swarms"."workspace_id"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query INSERT INTO "public"."tasks" ("id","title","description","workspace_id","status","priority","workflow_status","source_type","created_by_id","updated_by_id","deleted","created_at","updated_at") VALUES ($1,$2,$3,$4,CAST($5::text AS "public"."TaskStatus"),CAST($6::text AS "public"."Priority"),CAST($7::text AS "public"."WorkflowStatus"),CAST($8::text AS "public"."TaskSourceType"),$9,$10,$11,$12,$13) RETURNING "public"."tasks"."id", "public"."tasks"."title", "public"."tasks"."description", "public"."tasks"."workspace_id", "public"."tasks"."assignee_id", "public"."tasks"."repository_id", "public"."tasks"."status"::text, "public"."tasks"."priority"::text, "public"."tasks"."estimated_hours", "public"."tasks"."actual_hours", "public"."tasks"."workflow_status"::text, "public"."tasks"."workflow_started_at", "public"."tasks"."workflow_completed_at", "public"."tasks"."stakwork_project_id", "public"."tasks"."source_type"::text, "public"."tasks"."created_by_id", "public"."tasks"."updated_by_id", "public"."tasks"."deleted", "public"."tasks"."deleted_at", "public"."tasks"."created_at", "public"."tasks"."updated_at"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query COMMIT

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query SELECT "public"."tasks"."id", "public"."tasks"."workspace_id" FROM "public"."tasks" WHERE ("public"."tasks"."id" = $1 AND "public"."tasks"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."owner_id" FROM "public"."workspaces" WHERE "public"."workspaces"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."swarm_url", "public"."swarms"."swarm_secret_alias", "public"."swarms"."pool_name", "public"."swarms"."name", "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."role"::text, "public"."workspace_members"."workspace_id" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."user_id" = $1 AND "public"."workspace_members"."workspace_id" IN ($2)) OFFSET $3

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query SELECT "public"."users"."id", "public"."users"."name" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."chat_messages" WHERE EXISTS(SELECT "t0"."id" FROM "public"."tasks" AS "t0" WHERE ("t0"."title"::text LIKE $1 AND ("public"."chat_messages"."task_id") = ("t0"."id") AND "t0"."id" IS NOT NULL))

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."tasks" WHERE "public"."tasks"."title"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."swarms" WHERE "public"."swarms"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."workspace_members" WHERE EXISTS(SELECT "t0"."id" FROM "public"."workspaces" AS "t0" WHERE ("t0"."name"::text LIKE $1 AND ("public"."workspace_members"."workspace_id") = ("t0"."id") AND "t0"."id" IS NOT NULL))

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."workspaces" WHERE "public"."workspaces"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query BEGIN

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query INSERT INTO "public"."workspaces" ("id","name","description","slug","deleted","created_at","updated_at","owner_id","stakwork_api_key") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query INSERT INTO "public"."swarms" ("id","name","swarm_id","swarm_url","status","instance_type","created_at","updated_at","pool_name","repository_name","default_branch","repository_url","swarm_secret_alias","environment_variables","services","wizard_step","step_status","wizard_data","workspace_id") VALUES ($1,$2,$3,$4,CAST($5::text AS "public"."SwarmStatus"),$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,CAST($16::text AS "public"."SwarmWizardStep"),CAST($17::text AS "public"."StepStatus"),$18,$19) RETURNING "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_id", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."instance_type", "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."pool_name", "public"."swarms"."pool_api_key", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."repository_name", "public"."swarms"."default_branch", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_secret_alias", "public"."swarms"."environment_variables", "public"."swarms"."services", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."ingest_ref_id", "public"."swarms"."container_files", "public"."swarms"."swarm_password", "public"."swarms"."workspace_id"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query INSERT INTO "public"."tasks" ("id","title","description","workspace_id","status","priority","workflow_status","source_type","created_by_id","updated_by_id","deleted","created_at","updated_at") VALUES ($1,$2,$3,$4,CAST($5::text AS "public"."TaskStatus"),CAST($6::text AS "public"."Priority"),CAST($7::text AS "public"."WorkflowStatus"),CAST($8::text AS "public"."TaskSourceType"),$9,$10,$11,$12,$13) RETURNING "public"."tasks"."id", "public"."tasks"."title", "public"."tasks"."description", "public"."tasks"."workspace_id", "public"."tasks"."assignee_id", "public"."tasks"."repository_id", "public"."tasks"."status"::text, "public"."tasks"."priority"::text, "public"."tasks"."estimated_hours", "public"."tasks"."actual_hours", "public"."tasks"."workflow_status"::text, "public"."tasks"."workflow_started_at", "public"."tasks"."workflow_completed_at", "public"."tasks"."stakwork_project_id", "public"."tasks"."source_type"::text, "public"."tasks"."created_by_id", "public"."tasks"."updated_by_id", "public"."tasks"."deleted", "public"."tasks"."deleted_at", "public"."tasks"."created_at", "public"."tasks"."updated_at"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query COMMIT

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query SELECT "public"."tasks"."id", "public"."tasks"."workspace_id" FROM "public"."tasks" WHERE ("public"."tasks"."id" = $1 AND "public"."tasks"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."owner_id" FROM "public"."workspaces" WHERE "public"."workspaces"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."swarm_url", "public"."swarms"."swarm_secret_alias", "public"."swarms"."pool_name", "public"."swarms"."name", "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."role"::text, "public"."workspace_members"."workspace_id" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."user_id" = $1 AND "public"."workspace_members"."workspace_id" IN ($2)) OFFSET $3

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query SELECT "public"."users"."id", "public"."users"."name" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query BEGIN

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query INSERT INTO "public"."chat_messages" ("id","task_id","message","role","timestamp","context_tags","status","created_at","updated_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."ChatRole"),$5,$6,CAST($7::text AS "public"."ChatStatus"),$8,$9) RETURNING "public"."chat_messages"."id"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query SELECT "public"."chat_messages"."id", "public"."chat_messages"."task_id", "public"."chat_messages"."message", "public"."chat_messages"."workflow_url", "public"."chat_messages"."role"::text, "public"."chat_messages"."timestamp", "public"."chat_messages"."context_tags", "public"."chat_messages"."status"::text, "public"."chat_messages"."source_websocket_id", "public"."chat_messages"."reply_id", "public"."chat_messages"."created_at", "public"."chat_messages"."updated_at" FROM "public"."chat_messages" WHERE "public"."chat_messages"."id" = $1 LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query SELECT "public"."artifacts"."id", "public"."artifacts"."message_id", "public"."artifacts"."type"::text, "public"."artifacts"."content", "public"."artifacts"."icon", "public"."artifacts"."created_at", "public"."artifacts"."updated_at" FROM "public"."artifacts" WHERE "public"."artifacts"."message_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query SELECT "public"."attachments"."id", "public"."attachments"."message_id", "public"."attachments"."path", "public"."attachments"."filename", "public"."attachments"."mime_type", "public"."attachments"."size", "public"."attachments"."created_at", "public"."attachments"."updated_at" FROM "public"."attachments" WHERE "public"."attachments"."message_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query SELECT "public"."tasks"."id", "public"."tasks"."title" FROM "public"."tasks" WHERE "public"."tasks"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query COMMIT

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
clientMessage {
  id: [32m'cmf5n87ez0001v4c6y0tgln5k'[39m,
  taskId: [32m'test-task-1757004690051-0.7481303959065349'[39m,
  message: [32m'Test message from owner'[39m,
  workflowUrl: [1mnull[22m,
  role: [32m'USER'[39m,
  timestamp: [35m2025-09-04T16:51:30.059Z[39m,
  contextTags: [],
  status: [32m'SENT'[39m,
  sourceWebsocketID: [1mnull[22m,
  replyId: [1mnull[22m,
  createdAt: [35m2025-09-04T16:51:30.059Z[39m,
  updatedAt: [35m2025-09-04T16:51:30.059Z[39m,
  artifacts: [],
  attachments: [],
  task: {
    id: [32m'test-task-1757004690051-0.7481303959065349'[39m,
    title: [32m'Test Task'[39m
  }
}

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query UPDATE "public"."tasks" SET "workflow_status" = CAST($1::text AS "public"."WorkflowStatus"), "workflow_started_at" = $2, "stakwork_project_id" = $3, "updated_at" = $4 WHERE ("public"."tasks"."id" = $5 AND 1=1) RETURNING "public"."tasks"."id", "public"."tasks"."title", "public"."tasks"."description", "public"."tasks"."workspace_id", "public"."tasks"."assignee_id", "public"."tasks"."repository_id", "public"."tasks"."status"::text, "public"."tasks"."priority"::text, "public"."tasks"."estimated_hours", "public"."tasks"."actual_hours", "public"."tasks"."workflow_status"::text, "public"."tasks"."workflow_started_at", "public"."tasks"."workflow_completed_at", "public"."tasks"."stakwork_project_id", "public"."tasks"."source_type"::text, "public"."tasks"."created_by_id", "public"."tasks"."updated_by_id", "public"."tasks"."deleted", "public"."tasks"."deleted_at", "public"."tasks"."created_at", "public"."tasks"."updated_at"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."chat_messages" WHERE EXISTS(SELECT "t0"."id" FROM "public"."tasks" AS "t0" WHERE ("t0"."title"::text LIKE $1 AND ("public"."chat_messages"."task_id") = ("t0"."id") AND "t0"."id" IS NOT NULL))

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."tasks" WHERE "public"."tasks"."title"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."swarms" WHERE "public"."swarms"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."workspace_members" WHERE EXISTS(SELECT "t0"."id" FROM "public"."workspaces" AS "t0" WHERE ("t0"."name"::text LIKE $1 AND ("public"."workspace_members"."workspace_id") = ("t0"."id") AND "t0"."id" IS NOT NULL))

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."workspaces" WHERE "public"."workspaces"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query BEGIN

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query INSERT INTO "public"."workspaces" ("id","name","description","slug","deleted","created_at","updated_at","owner_id","stakwork_api_key") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query INSERT INTO "public"."swarms" ("id","name","swarm_id","swarm_url","status","instance_type","created_at","updated_at","pool_name","repository_name","default_branch","repository_url","swarm_secret_alias","environment_variables","services","wizard_step","step_status","wizard_data","workspace_id") VALUES ($1,$2,$3,$4,CAST($5::text AS "public"."SwarmStatus"),$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,CAST($16::text AS "public"."SwarmWizardStep"),CAST($17::text AS "public"."StepStatus"),$18,$19) RETURNING "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_id", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."instance_type", "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."pool_name", "public"."swarms"."pool_api_key", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."repository_name", "public"."swarms"."default_branch", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_secret_alias", "public"."swarms"."environment_variables", "public"."swarms"."services", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."ingest_ref_id", "public"."swarms"."container_files", "public"."swarms"."swarm_password", "public"."swarms"."workspace_id"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query INSERT INTO "public"."tasks" ("id","title","description","workspace_id","status","priority","workflow_status","source_type","created_by_id","updated_by_id","deleted","created_at","updated_at") VALUES ($1,$2,$3,$4,CAST($5::text AS "public"."TaskStatus"),CAST($6::text AS "public"."Priority"),CAST($7::text AS "public"."WorkflowStatus"),CAST($8::text AS "public"."TaskSourceType"),$9,$10,$11,$12,$13) RETURNING "public"."tasks"."id", "public"."tasks"."title", "public"."tasks"."description", "public"."tasks"."workspace_id", "public"."tasks"."assignee_id", "public"."tasks"."repository_id", "public"."tasks"."status"::text, "public"."tasks"."priority"::text, "public"."tasks"."estimated_hours", "public"."tasks"."actual_hours", "public"."tasks"."workflow_status"::text, "public"."tasks"."workflow_started_at", "public"."tasks"."workflow_completed_at", "public"."tasks"."stakwork_project_id", "public"."tasks"."source_type"::text, "public"."tasks"."created_by_id", "public"."tasks"."updated_by_id", "public"."tasks"."deleted", "public"."tasks"."deleted_at", "public"."tasks"."created_at", "public"."tasks"."updated_at"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query COMMIT

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."chat_messages" WHERE EXISTS(SELECT "t0"."id" FROM "public"."tasks" AS "t0" WHERE ("t0"."title"::text LIKE $1 AND ("public"."chat_messages"."task_id") = ("t0"."id") AND "t0"."id" IS NOT NULL))

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."tasks" WHERE "public"."tasks"."title"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."swarms" WHERE "public"."swarms"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."workspace_members" WHERE EXISTS(SELECT "t0"."id" FROM "public"."workspaces" AS "t0" WHERE ("t0"."name"::text LIKE $1 AND ("public"."workspace_members"."workspace_id") = ("t0"."id") AND "t0"."id" IS NOT NULL))

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."workspaces" WHERE "public"."workspaces"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query BEGIN

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query INSERT INTO "public"."workspaces" ("id","name","description","slug","deleted","created_at","updated_at","owner_id","stakwork_api_key") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query INSERT INTO "public"."swarms" ("id","name","swarm_id","swarm_url","status","instance_type","created_at","updated_at","pool_name","repository_name","default_branch","repository_url","swarm_secret_alias","environment_variables","services","wizard_step","step_status","wizard_data","workspace_id") VALUES ($1,$2,$3,$4,CAST($5::text AS "public"."SwarmStatus"),$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,CAST($16::text AS "public"."SwarmWizardStep"),CAST($17::text AS "public"."StepStatus"),$18,$19) RETURNING "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_id", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."instance_type", "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."pool_name", "public"."swarms"."pool_api_key", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."repository_name", "public"."swarms"."default_branch", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_secret_alias", "public"."swarms"."environment_variables", "public"."swarms"."services", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."ingest_ref_id", "public"."swarms"."container_files", "public"."swarms"."swarm_password", "public"."swarms"."workspace_id"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query INSERT INTO "public"."tasks" ("id","title","description","workspace_id","status","priority","workflow_status","source_type","created_by_id","updated_by_id","deleted","created_at","updated_at") VALUES ($1,$2,$3,$4,CAST($5::text AS "public"."TaskStatus"),CAST($6::text AS "public"."Priority"),CAST($7::text AS "public"."WorkflowStatus"),CAST($8::text AS "public"."TaskSourceType"),$9,$10,$11,$12,$13) RETURNING "public"."tasks"."id", "public"."tasks"."title", "public"."tasks"."description", "public"."tasks"."workspace_id", "public"."tasks"."assignee_id", "public"."tasks"."repository_id", "public"."tasks"."status"::text, "public"."tasks"."priority"::text, "public"."tasks"."estimated_hours", "public"."tasks"."actual_hours", "public"."tasks"."workflow_status"::text, "public"."tasks"."workflow_started_at", "public"."tasks"."workflow_completed_at", "public"."tasks"."stakwork_project_id", "public"."tasks"."source_type"::text, "public"."tasks"."created_by_id", "public"."tasks"."updated_by_id", "public"."tasks"."deleted", "public"."tasks"."deleted_at", "public"."tasks"."created_at", "public"."tasks"."updated_at"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query COMMIT

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query SELECT "public"."tasks"."id", "public"."tasks"."workspace_id" FROM "public"."tasks" WHERE ("public"."tasks"."id" = $1 AND "public"."tasks"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."owner_id" FROM "public"."workspaces" WHERE "public"."workspaces"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."swarm_url", "public"."swarms"."swarm_secret_alias", "public"."swarms"."pool_name", "public"."swarms"."name", "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."role"::text, "public"."workspace_members"."workspace_id" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."user_id" = $1 AND "public"."workspace_members"."workspace_id" IN ($2)) OFFSET $3

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query SELECT "public"."users"."id", "public"."users"."name" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query BEGIN

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query INSERT INTO "public"."chat_messages" ("id","task_id","message","role","timestamp","context_tags","status","created_at","updated_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."ChatRole"),$5,$6,CAST($7::text AS "public"."ChatStatus"),$8,$9) RETURNING "public"."chat_messages"."id"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query INSERT INTO "public"."artifacts" ("id","message_id","type","content","created_at","updated_at") VALUES ($1,$2,CAST($3::text AS "public"."ArtifactType"),$4,$5,$6) RETURNING "public"."artifacts"."id"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query INSERT INTO "public"."attachments" ("id","message_id","path","filename","mime_type","size","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8) RETURNING "public"."attachments"."id"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query SELECT "public"."chat_messages"."id", "public"."chat_messages"."task_id", "public"."chat_messages"."message", "public"."chat_messages"."workflow_url", "public"."chat_messages"."role"::text, "public"."chat_messages"."timestamp", "public"."chat_messages"."context_tags", "public"."chat_messages"."status"::text, "public"."chat_messages"."source_websocket_id", "public"."chat_messages"."reply_id", "public"."chat_messages"."created_at", "public"."chat_messages"."updated_at" FROM "public"."chat_messages" WHERE "public"."chat_messages"."id" = $1 LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query SELECT "public"."artifacts"."id", "public"."artifacts"."message_id", "public"."artifacts"."type"::text, "public"."artifacts"."content", "public"."artifacts"."icon", "public"."artifacts"."created_at", "public"."artifacts"."updated_at" FROM "public"."artifacts" WHERE "public"."artifacts"."message_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query SELECT "public"."attachments"."id", "public"."attachments"."message_id", "public"."attachments"."path", "public"."attachments"."filename", "public"."attachments"."mime_type", "public"."attachments"."size", "public"."attachments"."created_at", "public"."attachments"."updated_at" FROM "public"."attachments" WHERE "public"."attachments"."message_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query SELECT "public"."tasks"."id", "public"."tasks"."title" FROM "public"."tasks" WHERE "public"."tasks"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query COMMIT

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
clientMessage {
  id: [32m'cmf5n87i10005v4c6tmbw0f08'[39m,
  taskId: [32m'test-task-1757004690160-0.22921011366782884'[39m,
  message: [32m'Test message with artifacts'[39m,
  workflowUrl: [1mnull[22m,
  role: [32m'USER'[39m,
  timestamp: [35m2025-09-04T16:51:30.169Z[39m,
  contextTags: [ { tag: [32m'urgent'[39m, value: [32m'high'[39m } ],
  status: [32m'SENT'[39m,
  sourceWebsocketID: [1mnull[22m,
  replyId: [1mnull[22m,
  createdAt: [35m2025-09-04T16:51:30.169Z[39m,
  updatedAt: [35m2025-09-04T16:51:30.169Z[39m,
  artifacts: [
    {
      id: [32m'cmf5n87i10006v4c6hzl5beo4'[39m,
      messageId: [32m'cmf5n87i10005v4c6tmbw0f08'[39m,
      type: [32m'CODE'[39m,
      content: [36m[Object][39m,
      icon: [1mnull[22m,
      createdAt: [35m2025-09-04T16:51:30.169Z[39m,
      updatedAt: [35m2025-09-04T16:51:30.169Z[39m
    }
  ],
  attachments: [
    {
      id: [32m'cmf5n87i10007v4c68edreoum'[39m,
      messageId: [32m'cmf5n87i10005v4c6tmbw0f08'[39m,
      path: [32m'uploads/test/file.jpg'[39m,
      filename: [32m'test-image.jpg'[39m,
      mimeType: [32m'image/jpeg'[39m,
      size: [33m12345[39m,
      createdAt: [35m2025-09-04T16:51:30.169Z[39m,
      updatedAt: [35m2025-09-04T16:51:30.169Z[39m
    }
  ],
  task: {
    id: [32m'test-task-1757004690160-0.22921011366782884'[39m,
    title: [32m'Test Task'[39m
  }
}

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query UPDATE "public"."tasks" SET "workflow_status" = CAST($1::text AS "public"."WorkflowStatus"), "workflow_started_at" = $2, "stakwork_project_id" = $3, "updated_at" = $4 WHERE ("public"."tasks"."id" = $5 AND 1=1) RETURNING "public"."tasks"."id", "public"."tasks"."title", "public"."tasks"."description", "public"."tasks"."workspace_id", "public"."tasks"."assignee_id", "public"."tasks"."repository_id", "public"."tasks"."status"::text, "public"."tasks"."priority"::text, "public"."tasks"."estimated_hours", "public"."tasks"."actual_hours", "public"."tasks"."workflow_status"::text, "public"."tasks"."workflow_started_at", "public"."tasks"."workflow_completed_at", "public"."tasks"."stakwork_project_id", "public"."tasks"."source_type"::text, "public"."tasks"."created_by_id", "public"."tasks"."updated_by_id", "public"."tasks"."deleted", "public"."tasks"."deleted_at", "public"."tasks"."created_at", "public"."tasks"."updated_at"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query SELECT "public"."chat_messages"."id", "public"."chat_messages"."task_id", "public"."chat_messages"."message", "public"."chat_messages"."workflow_url", "public"."chat_messages"."role"::text, "public"."chat_messages"."timestamp", "public"."chat_messages"."context_tags", "public"."chat_messages"."status"::text, "public"."chat_messages"."source_websocket_id", "public"."chat_messages"."reply_id", "public"."chat_messages"."created_at", "public"."chat_messages"."updated_at" FROM "public"."chat_messages" WHERE "public"."chat_messages"."task_id" = $1 LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query SELECT "public"."artifacts"."id", "public"."artifacts"."message_id", "public"."artifacts"."type"::text, "public"."artifacts"."content", "public"."artifacts"."icon", "public"."artifacts"."created_at", "public"."artifacts"."updated_at" FROM "public"."artifacts" WHERE "public"."artifacts"."message_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query SELECT "public"."attachments"."id", "public"."attachments"."message_id", "public"."attachments"."path", "public"."attachments"."filename", "public"."attachments"."mime_type", "public"."attachments"."size", "public"."attachments"."created_at", "public"."attachments"."updated_at" FROM "public"."attachments" WHERE "public"."attachments"."message_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."chat_messages" WHERE EXISTS(SELECT "t0"."id" FROM "public"."tasks" AS "t0" WHERE ("t0"."title"::text LIKE $1 AND ("public"."chat_messages"."task_id") = ("t0"."id") AND "t0"."id" IS NOT NULL))

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."tasks" WHERE "public"."tasks"."title"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."swarms" WHERE "public"."swarms"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."workspace_members" WHERE EXISTS(SELECT "t0"."id" FROM "public"."workspaces" AS "t0" WHERE ("t0"."name"::text LIKE $1 AND ("public"."workspace_members"."workspace_id") = ("t0"."id") AND "t0"."id" IS NOT NULL))

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."workspaces" WHERE "public"."workspaces"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query BEGIN

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query INSERT INTO "public"."workspaces" ("id","name","description","slug","deleted","created_at","updated_at","owner_id","stakwork_api_key") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query INSERT INTO "public"."swarms" ("id","name","swarm_id","swarm_url","status","instance_type","created_at","updated_at","pool_name","repository_name","default_branch","repository_url","swarm_secret_alias","environment_variables","services","wizard_step","step_status","wizard_data","workspace_id") VALUES ($1,$2,$3,$4,CAST($5::text AS "public"."SwarmStatus"),$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,CAST($16::text AS "public"."SwarmWizardStep"),CAST($17::text AS "public"."StepStatus"),$18,$19) RETURNING "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_id", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."instance_type", "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."pool_name", "public"."swarms"."pool_api_key", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."repository_name", "public"."swarms"."default_branch", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_secret_alias", "public"."swarms"."environment_variables", "public"."swarms"."services", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."ingest_ref_id", "public"."swarms"."container_files", "public"."swarms"."swarm_password", "public"."swarms"."workspace_id"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query INSERT INTO "public"."tasks" ("id","title","description","workspace_id","status","priority","workflow_status","source_type","created_by_id","updated_by_id","deleted","created_at","updated_at") VALUES ($1,$2,$3,$4,CAST($5::text AS "public"."TaskStatus"),CAST($6::text AS "public"."Priority"),CAST($7::text AS "public"."WorkflowStatus"),CAST($8::text AS "public"."TaskSourceType"),$9,$10,$11,$12,$13) RETURNING "public"."tasks"."id", "public"."tasks"."title", "public"."tasks"."description", "public"."tasks"."workspace_id", "public"."tasks"."assignee_id", "public"."tasks"."repository_id", "public"."tasks"."status"::text, "public"."tasks"."priority"::text, "public"."tasks"."estimated_hours", "public"."tasks"."actual_hours", "public"."tasks"."workflow_status"::text, "public"."tasks"."workflow_started_at", "public"."tasks"."workflow_completed_at", "public"."tasks"."stakwork_project_id", "public"."tasks"."source_type"::text, "public"."tasks"."created_by_id", "public"."tasks"."updated_by_id", "public"."tasks"."deleted", "public"."tasks"."deleted_at", "public"."tasks"."created_at", "public"."tasks"."updated_at"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query COMMIT

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query SELECT "public"."tasks"."id", "public"."tasks"."workspace_id" FROM "public"."tasks" WHERE ("public"."tasks"."id" = $1 AND "public"."tasks"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."owner_id" FROM "public"."workspaces" WHERE "public"."workspaces"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."swarm_url", "public"."swarms"."swarm_secret_alias", "public"."swarms"."pool_name", "public"."swarms"."name", "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."role"::text, "public"."workspace_members"."workspace_id" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."user_id" = $1 AND "public"."workspace_members"."workspace_id" IN ($2)) OFFSET $3

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query SELECT "public"."users"."id", "public"."users"."name" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query BEGIN

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query INSERT INTO "public"."chat_messages" ("id","task_id","message","role","timestamp","context_tags","status","created_at","updated_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."ChatRole"),$5,$6,CAST($7::text AS "public"."ChatStatus"),$8,$9) RETURNING "public"."chat_messages"."id"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query SELECT "public"."chat_messages"."id", "public"."chat_messages"."task_id", "public"."chat_messages"."message", "public"."chat_messages"."workflow_url", "public"."chat_messages"."role"::text, "public"."chat_messages"."timestamp", "public"."chat_messages"."context_tags", "public"."chat_messages"."status"::text, "public"."chat_messages"."source_websocket_id", "public"."chat_messages"."reply_id", "public"."chat_messages"."created_at", "public"."chat_messages"."updated_at" FROM "public"."chat_messages" WHERE "public"."chat_messages"."id" = $1 LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query SELECT "public"."artifacts"."id", "public"."artifacts"."message_id", "public"."artifacts"."type"::text, "public"."artifacts"."content", "public"."artifacts"."icon", "public"."artifacts"."created_at", "public"."artifacts"."updated_at" FROM "public"."artifacts" WHERE "public"."artifacts"."message_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query SELECT "public"."attachments"."id", "public"."attachments"."message_id", "public"."attachments"."path", "public"."attachments"."filename", "public"."attachments"."mime_type", "public"."attachments"."size", "public"."attachments"."created_at", "public"."attachments"."updated_at" FROM "public"."attachments" WHERE "public"."attachments"."message_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query SELECT "public"."tasks"."id", "public"."tasks"."title" FROM "public"."tasks" WHERE "public"."tasks"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query COMMIT

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
clientMessage {
  id: [32m'cmf5n87k80009v4c632ppsggk'[39m,
  taskId: [32m'test-task-1757004690241-0.7526486109859902'[39m,
  message: [32m'Test workflow update'[39m,
  workflowUrl: [1mnull[22m,
  role: [32m'USER'[39m,
  timestamp: [35m2025-09-04T16:51:30.248Z[39m,
  contextTags: [],
  status: [32m'SENT'[39m,
  sourceWebsocketID: [1mnull[22m,
  replyId: [1mnull[22m,
  createdAt: [35m2025-09-04T16:51:30.248Z[39m,
  updatedAt: [35m2025-09-04T16:51:30.248Z[39m,
  artifacts: [],
  attachments: [],
  task: {
    id: [32m'test-task-1757004690241-0.7526486109859902'[39m,
    title: [32m'Test Task'[39m
  }
}

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query UPDATE "public"."tasks" SET "workflow_status" = CAST($1::text AS "public"."WorkflowStatus"), "workflow_started_at" = $2, "stakwork_project_id" = $3, "updated_at" = $4 WHERE ("public"."tasks"."id" = $5 AND 1=1) RETURNING "public"."tasks"."id", "public"."tasks"."title", "public"."tasks"."description", "public"."tasks"."workspace_id", "public"."tasks"."assignee_id", "public"."tasks"."repository_id", "public"."tasks"."status"::text, "public"."tasks"."priority"::text, "public"."tasks"."estimated_hours", "public"."tasks"."actual_hours", "public"."tasks"."workflow_status"::text, "public"."tasks"."workflow_started_at", "public"."tasks"."workflow_completed_at", "public"."tasks"."stakwork_project_id", "public"."tasks"."source_type"::text, "public"."tasks"."created_by_id", "public"."tasks"."updated_by_id", "public"."tasks"."deleted", "public"."tasks"."deleted_at", "public"."tasks"."created_at", "public"."tasks"."updated_at"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query SELECT "public"."tasks"."id", "public"."tasks"."title", "public"."tasks"."description", "public"."tasks"."workspace_id", "public"."tasks"."assignee_id", "public"."tasks"."repository_id", "public"."tasks"."status"::text, "public"."tasks"."priority"::text, "public"."tasks"."estimated_hours", "public"."tasks"."actual_hours", "public"."tasks"."workflow_status"::text, "public"."tasks"."workflow_started_at", "public"."tasks"."workflow_completed_at", "public"."tasks"."stakwork_project_id", "public"."tasks"."source_type"::text, "public"."tasks"."created_by_id", "public"."tasks"."updated_by_id", "public"."tasks"."deleted", "public"."tasks"."deleted_at", "public"."tasks"."created_at", "public"."tasks"."updated_at" FROM "public"."tasks" WHERE ("public"."tasks"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."chat_messages" WHERE EXISTS(SELECT "t0"."id" FROM "public"."tasks" AS "t0" WHERE ("t0"."title"::text LIKE $1 AND ("public"."chat_messages"."task_id") = ("t0"."id") AND "t0"."id" IS NOT NULL))

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."tasks" WHERE "public"."tasks"."title"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."swarms" WHERE "public"."swarms"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."workspace_members" WHERE EXISTS(SELECT "t0"."id" FROM "public"."workspaces" AS "t0" WHERE ("t0"."name"::text LIKE $1 AND ("public"."workspace_members"."workspace_id") = ("t0"."id") AND "t0"."id" IS NOT NULL))

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."workspaces" WHERE "public"."workspaces"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query BEGIN

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query INSERT INTO "public"."workspaces" ("id","name","description","slug","deleted","created_at","updated_at","owner_id","stakwork_api_key") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query INSERT INTO "public"."swarms" ("id","name","swarm_id","swarm_url","status","instance_type","created_at","updated_at","pool_name","repository_name","default_branch","repository_url","swarm_secret_alias","environment_variables","services","wizard_step","step_status","wizard_data","workspace_id") VALUES ($1,$2,$3,$4,CAST($5::text AS "public"."SwarmStatus"),$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,CAST($16::text AS "public"."SwarmWizardStep"),CAST($17::text AS "public"."StepStatus"),$18,$19) RETURNING "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_id", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."instance_type", "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."pool_name", "public"."swarms"."pool_api_key", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."repository_name", "public"."swarms"."default_branch", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_secret_alias", "public"."swarms"."environment_variables", "public"."swarms"."services", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."ingest_ref_id", "public"."swarms"."container_files", "public"."swarms"."swarm_password", "public"."swarms"."workspace_id"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query INSERT INTO "public"."tasks" ("id","title","description","workspace_id","status","priority","workflow_status","source_type","created_by_id","updated_by_id","deleted","created_at","updated_at") VALUES ($1,$2,$3,$4,CAST($5::text AS "public"."TaskStatus"),CAST($6::text AS "public"."Priority"),CAST($7::text AS "public"."WorkflowStatus"),CAST($8::text AS "public"."TaskSourceType"),$9,$10,$11,$12,$13) RETURNING "public"."tasks"."id", "public"."tasks"."title", "public"."tasks"."description", "public"."tasks"."workspace_id", "public"."tasks"."assignee_id", "public"."tasks"."repository_id", "public"."tasks"."status"::text, "public"."tasks"."priority"::text, "public"."tasks"."estimated_hours", "public"."tasks"."actual_hours", "public"."tasks"."workflow_status"::text, "public"."tasks"."workflow_started_at", "public"."tasks"."workflow_completed_at", "public"."tasks"."stakwork_project_id", "public"."tasks"."source_type"::text, "public"."tasks"."created_by_id", "public"."tasks"."updated_by_id", "public"."tasks"."deleted", "public"."tasks"."deleted_at", "public"."tasks"."created_at", "public"."tasks"."updated_at"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query COMMIT

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query SELECT "public"."tasks"."id", "public"."tasks"."workspace_id" FROM "public"."tasks" WHERE ("public"."tasks"."id" = $1 AND "public"."tasks"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."owner_id" FROM "public"."workspaces" WHERE "public"."workspaces"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."swarm_url", "public"."swarms"."swarm_secret_alias", "public"."swarms"."pool_name", "public"."swarms"."name", "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."role"::text, "public"."workspace_members"."workspace_id" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."user_id" = $1 AND "public"."workspace_members"."workspace_id" IN ($2)) OFFSET $3

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query SELECT "public"."users"."id", "public"."users"."name" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query BEGIN

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query INSERT INTO "public"."chat_messages" ("id","task_id","message","role","timestamp","context_tags","status","created_at","updated_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."ChatRole"),$5,$6,CAST($7::text AS "public"."ChatStatus"),$8,$9) RETURNING "public"."chat_messages"."id"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query SELECT "public"."chat_messages"."id", "public"."chat_messages"."task_id", "public"."chat_messages"."message", "public"."chat_messages"."workflow_url", "public"."chat_messages"."role"::text, "public"."chat_messages"."timestamp", "public"."chat_messages"."context_tags", "public"."chat_messages"."status"::text, "public"."chat_messages"."source_websocket_id", "public"."chat_messages"."reply_id", "public"."chat_messages"."created_at", "public"."chat_messages"."updated_at" FROM "public"."chat_messages" WHERE "public"."chat_messages"."id" = $1 LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query SELECT "public"."artifacts"."id", "public"."artifacts"."message_id", "public"."artifacts"."type"::text, "public"."artifacts"."content", "public"."artifacts"."icon", "public"."artifacts"."created_at", "public"."artifacts"."updated_at" FROM "public"."artifacts" WHERE "public"."artifacts"."message_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query SELECT "public"."attachments"."id", "public"."attachments"."message_id", "public"."attachments"."path", "public"."attachments"."filename", "public"."attachments"."mime_type", "public"."attachments"."size", "public"."attachments"."created_at", "public"."attachments"."updated_at" FROM "public"."attachments" WHERE "public"."attachments"."message_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query SELECT "public"."tasks"."id", "public"."tasks"."title" FROM "public"."tasks" WHERE "public"."tasks"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query COMMIT

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
clientMessage {
  id: [32m'cmf5n87ln000bv4c6f7aonvyn'[39m,
  taskId: [32m'test-task-1757004690293-0.5649175843976739'[39m,
  message: [32m'Test Stakwork integration'[39m,
  workflowUrl: [1mnull[22m,
  role: [32m'USER'[39m,
  timestamp: [35m2025-09-04T16:51:30.299Z[39m,
  contextTags: [],
  status: [32m'SENT'[39m,
  sourceWebsocketID: [1mnull[22m,
  replyId: [1mnull[22m,
  createdAt: [35m2025-09-04T16:51:30.299Z[39m,
  updatedAt: [35m2025-09-04T16:51:30.299Z[39m,
  artifacts: [],
  attachments: [],
  task: {
    id: [32m'test-task-1757004690293-0.5649175843976739'[39m,
    title: [32m'Test Task'[39m
  }
}

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query UPDATE "public"."tasks" SET "workflow_status" = CAST($1::text AS "public"."WorkflowStatus"), "workflow_started_at" = $2, "stakwork_project_id" = $3, "updated_at" = $4 WHERE ("public"."tasks"."id" = $5 AND 1=1) RETURNING "public"."tasks"."id", "public"."tasks"."title", "public"."tasks"."description", "public"."tasks"."workspace_id", "public"."tasks"."assignee_id", "public"."tasks"."repository_id", "public"."tasks"."status"::text, "public"."tasks"."priority"::text, "public"."tasks"."estimated_hours", "public"."tasks"."actual_hours", "public"."tasks"."workflow_status"::text, "public"."tasks"."workflow_started_at", "public"."tasks"."workflow_completed_at", "public"."tasks"."stakwork_project_id", "public"."tasks"."source_type"::text, "public"."tasks"."created_by_id", "public"."tasks"."updated_by_id", "public"."tasks"."deleted", "public"."tasks"."deleted_at", "public"."tasks"."created_at", "public"."tasks"."updated_at"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."chat_messages" WHERE EXISTS(SELECT "t0"."id" FROM "public"."tasks" AS "t0" WHERE ("t0"."title"::text LIKE $1 AND ("public"."chat_messages"."task_id") = ("t0"."id") AND "t0"."id" IS NOT NULL))

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."tasks" WHERE "public"."tasks"."title"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."swarms" WHERE "public"."swarms"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."workspace_members" WHERE EXISTS(SELECT "t0"."id" FROM "public"."workspaces" AS "t0" WHERE ("t0"."name"::text LIKE $1 AND ("public"."workspace_members"."workspace_id") = ("t0"."id") AND "t0"."id" IS NOT NULL))

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."workspaces" WHERE "public"."workspaces"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query BEGIN

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query INSERT INTO "public"."workspaces" ("id","name","description","slug","deleted","created_at","updated_at","owner_id","stakwork_api_key") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query INSERT INTO "public"."swarms" ("id","name","swarm_id","swarm_url","status","instance_type","created_at","updated_at","pool_name","repository_name","default_branch","repository_url","swarm_secret_alias","environment_variables","services","wizard_step","step_status","wizard_data","workspace_id") VALUES ($1,$2,$3,$4,CAST($5::text AS "public"."SwarmStatus"),$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,CAST($16::text AS "public"."SwarmWizardStep"),CAST($17::text AS "public"."StepStatus"),$18,$19) RETURNING "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_id", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."instance_type", "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."pool_name", "public"."swarms"."pool_api_key", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."repository_name", "public"."swarms"."default_branch", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_secret_alias", "public"."swarms"."environment_variables", "public"."swarms"."services", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."ingest_ref_id", "public"."swarms"."container_files", "public"."swarms"."swarm_password", "public"."swarms"."workspace_id"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query INSERT INTO "public"."tasks" ("id","title","description","workspace_id","status","priority","workflow_status","source_type","created_by_id","updated_by_id","deleted","created_at","updated_at") VALUES ($1,$2,$3,$4,CAST($5::text AS "public"."TaskStatus"),CAST($6::text AS "public"."Priority"),CAST($7::text AS "public"."WorkflowStatus"),CAST($8::text AS "public"."TaskSourceType"),$9,$10,$11,$12,$13) RETURNING "public"."tasks"."id", "public"."tasks"."title", "public"."tasks"."description", "public"."tasks"."workspace_id", "public"."tasks"."assignee_id", "public"."tasks"."repository_id", "public"."tasks"."status"::text, "public"."tasks"."priority"::text, "public"."tasks"."estimated_hours", "public"."tasks"."actual_hours", "public"."tasks"."workflow_status"::text, "public"."tasks"."workflow_started_at", "public"."tasks"."workflow_completed_at", "public"."tasks"."stakwork_project_id", "public"."tasks"."source_type"::text, "public"."tasks"."created_by_id", "public"."tasks"."updated_by_id", "public"."tasks"."deleted", "public"."tasks"."deleted_at", "public"."tasks"."created_at", "public"."tasks"."updated_at"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query COMMIT

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query SELECT "public"."tasks"."id", "public"."tasks"."workspace_id" FROM "public"."tasks" WHERE ("public"."tasks"."id" = $1 AND "public"."tasks"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."owner_id" FROM "public"."workspaces" WHERE "public"."workspaces"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."swarm_url", "public"."swarms"."swarm_secret_alias", "public"."swarms"."pool_name", "public"."swarms"."name", "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."role"::text, "public"."workspace_members"."workspace_id" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."user_id" = $1 AND "public"."workspace_members"."workspace_id" IN ($2)) OFFSET $3

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query SELECT "public"."users"."id", "public"."users"."name" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query BEGIN

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query INSERT INTO "public"."chat_messages" ("id","task_id","message","role","timestamp","context_tags","status","created_at","updated_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."ChatRole"),$5,$6,CAST($7::text AS "public"."ChatStatus"),$8,$9) RETURNING "public"."chat_messages"."id"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query SELECT "public"."chat_messages"."id", "public"."chat_messages"."task_id", "public"."chat_messages"."message", "public"."chat_messages"."workflow_url", "public"."chat_messages"."role"::text, "public"."chat_messages"."timestamp", "public"."chat_messages"."context_tags", "public"."chat_messages"."status"::text, "public"."chat_messages"."source_websocket_id", "public"."chat_messages"."reply_id", "public"."chat_messages"."created_at", "public"."chat_messages"."updated_at" FROM "public"."chat_messages" WHERE "public"."chat_messages"."id" = $1 LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query SELECT "public"."artifacts"."id", "public"."artifacts"."message_id", "public"."artifacts"."type"::text, "public"."artifacts"."content", "public"."artifacts"."icon", "public"."artifacts"."created_at", "public"."artifacts"."updated_at" FROM "public"."artifacts" WHERE "public"."artifacts"."message_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query SELECT "public"."attachments"."id", "public"."attachments"."message_id", "public"."attachments"."path", "public"."attachments"."filename", "public"."attachments"."mime_type", "public"."attachments"."size", "public"."attachments"."created_at", "public"."attachments"."updated_at" FROM "public"."attachments" WHERE "public"."attachments"."message_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query SELECT "public"."tasks"."id", "public"."tasks"."title" FROM "public"."tasks" WHERE "public"."tasks"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query COMMIT

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
clientMessage {
  id: [32m'cmf5n87n3000dv4c6kfoe0mz5'[39m,
  taskId: [32m'test-task-1757004690344-0.26427358124416256'[39m,
  message: [32m'Test Stakwork failure'[39m,
  workflowUrl: [1mnull[22m,
  role: [32m'USER'[39m,
  timestamp: [35m2025-09-04T16:51:30.351Z[39m,
  contextTags: [],
  status: [32m'SENT'[39m,
  sourceWebsocketID: [1mnull[22m,
  replyId: [1mnull[22m,
  createdAt: [35m2025-09-04T16:51:30.351Z[39m,
  updatedAt: [35m2025-09-04T16:51:30.351Z[39m,
  artifacts: [],
  attachments: [],
  task: {
    id: [32m'test-task-1757004690344-0.26427358124416256'[39m,
    title: [32m'Test Task'[39m
  }
}

stderr | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
Failed to send message to Stakwork: Internal Server Error

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query UPDATE "public"."tasks" SET "workflow_status" = CAST($1::text AS "public"."WorkflowStatus"), "updated_at" = $2 WHERE ("public"."tasks"."id" = $3 AND 1=1) RETURNING "public"."tasks"."id", "public"."tasks"."title", "public"."tasks"."description", "public"."tasks"."workspace_id", "public"."tasks"."assignee_id", "public"."tasks"."repository_id", "public"."tasks"."status"::text, "public"."tasks"."priority"::text, "public"."tasks"."estimated_hours", "public"."tasks"."actual_hours", "public"."tasks"."workflow_status"::text, "public"."tasks"."workflow_started_at", "public"."tasks"."workflow_completed_at", "public"."tasks"."stakwork_project_id", "public"."tasks"."source_type"::text, "public"."tasks"."created_by_id", "public"."tasks"."updated_by_id", "public"."tasks"."deleted", "public"."tasks"."deleted_at", "public"."tasks"."created_at", "public"."tasks"."updated_at"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query SELECT "public"."tasks"."id", "public"."tasks"."title", "public"."tasks"."description", "public"."tasks"."workspace_id", "public"."tasks"."assignee_id", "public"."tasks"."repository_id", "public"."tasks"."status"::text, "public"."tasks"."priority"::text, "public"."tasks"."estimated_hours", "public"."tasks"."actual_hours", "public"."tasks"."workflow_status"::text, "public"."tasks"."workflow_started_at", "public"."tasks"."workflow_completed_at", "public"."tasks"."stakwork_project_id", "public"."tasks"."source_type"::text, "public"."tasks"."created_by_id", "public"."tasks"."updated_by_id", "public"."tasks"."deleted", "public"."tasks"."deleted_at", "public"."tasks"."created_at", "public"."tasks"."updated_at" FROM "public"."tasks" WHERE ("public"."tasks"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."chat_messages" WHERE EXISTS(SELECT "t0"."id" FROM "public"."tasks" AS "t0" WHERE ("t0"."title"::text LIKE $1 AND ("public"."chat_messages"."task_id") = ("t0"."id") AND "t0"."id" IS NOT NULL))

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."tasks" WHERE "public"."tasks"."title"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."swarms" WHERE "public"."swarms"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."workspace_members" WHERE EXISTS(SELECT "t0"."id" FROM "public"."workspaces" AS "t0" WHERE ("t0"."name"::text LIKE $1 AND ("public"."workspace_members"."workspace_id") = ("t0"."id") AND "t0"."id" IS NOT NULL))

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."workspaces" WHERE "public"."workspaces"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query BEGIN

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query INSERT INTO "public"."workspaces" ("id","name","description","slug","deleted","created_at","updated_at","owner_id","stakwork_api_key") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query INSERT INTO "public"."swarms" ("id","name","swarm_id","swarm_url","status","instance_type","created_at","updated_at","pool_name","repository_name","default_branch","repository_url","swarm_secret_alias","environment_variables","services","wizard_step","step_status","wizard_data","workspace_id") VALUES ($1,$2,$3,$4,CAST($5::text AS "public"."SwarmStatus"),$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,CAST($16::text AS "public"."SwarmWizardStep"),CAST($17::text AS "public"."StepStatus"),$18,$19) RETURNING "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_id", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."instance_type", "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."pool_name", "public"."swarms"."pool_api_key", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."repository_name", "public"."swarms"."default_branch", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_secret_alias", "public"."swarms"."environment_variables", "public"."swarms"."services", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."ingest_ref_id", "public"."swarms"."container_files", "public"."swarms"."swarm_password", "public"."swarms"."workspace_id"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query INSERT INTO "public"."tasks" ("id","title","description","workspace_id","status","priority","workflow_status","source_type","created_by_id","updated_by_id","deleted","created_at","updated_at") VALUES ($1,$2,$3,$4,CAST($5::text AS "public"."TaskStatus"),CAST($6::text AS "public"."Priority"),CAST($7::text AS "public"."WorkflowStatus"),CAST($8::text AS "public"."TaskSourceType"),$9,$10,$11,$12,$13) RETURNING "public"."tasks"."id", "public"."tasks"."title", "public"."tasks"."description", "public"."tasks"."workspace_id", "public"."tasks"."assignee_id", "public"."tasks"."repository_id", "public"."tasks"."status"::text, "public"."tasks"."priority"::text, "public"."tasks"."estimated_hours", "public"."tasks"."actual_hours", "public"."tasks"."workflow_status"::text, "public"."tasks"."workflow_started_at", "public"."tasks"."workflow_completed_at", "public"."tasks"."stakwork_project_id", "public"."tasks"."source_type"::text, "public"."tasks"."created_by_id", "public"."tasks"."updated_by_id", "public"."tasks"."deleted", "public"."tasks"."deleted_at", "public"."tasks"."created_at", "public"."tasks"."updated_at"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query COMMIT

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query SELECT "public"."tasks"."id", "public"."tasks"."workspace_id" FROM "public"."tasks" WHERE ("public"."tasks"."id" = $1 AND "public"."tasks"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."owner_id" FROM "public"."workspaces" WHERE "public"."workspaces"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."swarm_url", "public"."swarms"."swarm_secret_alias", "public"."swarms"."pool_name", "public"."swarms"."name", "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."role"::text, "public"."workspace_members"."workspace_id" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."user_id" = $1 AND "public"."workspace_members"."workspace_id" IN ($2)) OFFSET $3

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query SELECT "public"."users"."id", "public"."users"."name" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query BEGIN

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query INSERT INTO "public"."chat_messages" ("id","task_id","message","role","timestamp","context_tags","status","created_at","updated_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."ChatRole"),$5,$6,CAST($7::text AS "public"."ChatStatus"),$8,$9) RETURNING "public"."chat_messages"."id"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query SELECT "public"."chat_messages"."id", "public"."chat_messages"."task_id", "public"."chat_messages"."message", "public"."chat_messages"."workflow_url", "public"."chat_messages"."role"::text, "public"."chat_messages"."timestamp", "public"."chat_messages"."context_tags", "public"."chat_messages"."status"::text, "public"."chat_messages"."source_websocket_id", "public"."chat_messages"."reply_id", "public"."chat_messages"."created_at", "public"."chat_messages"."updated_at" FROM "public"."chat_messages" WHERE "public"."chat_messages"."id" = $1 LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query SELECT "public"."artifacts"."id", "public"."artifacts"."message_id", "public"."artifacts"."type"::text, "public"."artifacts"."content", "public"."artifacts"."icon", "public"."artifacts"."created_at", "public"."artifacts"."updated_at" FROM "public"."artifacts" WHERE "public"."artifacts"."message_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query SELECT "public"."attachments"."id", "public"."attachments"."message_id", "public"."attachments"."path", "public"."attachments"."filename", "public"."attachments"."mime_type", "public"."attachments"."size", "public"."attachments"."created_at", "public"."attachments"."updated_at" FROM "public"."attachments" WHERE "public"."attachments"."message_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query SELECT "public"."tasks"."id", "public"."tasks"."title" FROM "public"."tasks" WHERE "public"."tasks"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query COMMIT

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
clientMessage {
  id: [32m'cmf5n87ok000fv4c6i0k3wtcm'[39m,
  taskId: [32m'test-task-1757004690398-0.5686291359428088'[39m,
  message: [32m'Test unit mode'[39m,
  workflowUrl: [1mnull[22m,
  role: [32m'USER'[39m,
  timestamp: [35m2025-09-04T16:51:30.404Z[39m,
  contextTags: [],
  status: [32m'SENT'[39m,
  sourceWebsocketID: [1mnull[22m,
  replyId: [1mnull[22m,
  createdAt: [35m2025-09-04T16:51:30.404Z[39m,
  updatedAt: [35m2025-09-04T16:51:30.404Z[39m,
  artifacts: [],
  attachments: [],
  task: {
    id: [32m'test-task-1757004690398-0.5686291359428088'[39m,
    title: [32m'Test Task'[39m
  }
}

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query UPDATE "public"."tasks" SET "workflow_status" = CAST($1::text AS "public"."WorkflowStatus"), "workflow_started_at" = $2, "stakwork_project_id" = $3, "updated_at" = $4 WHERE ("public"."tasks"."id" = $5 AND 1=1) RETURNING "public"."tasks"."id", "public"."tasks"."title", "public"."tasks"."description", "public"."tasks"."workspace_id", "public"."tasks"."assignee_id", "public"."tasks"."repository_id", "public"."tasks"."status"::text, "public"."tasks"."priority"::text, "public"."tasks"."estimated_hours", "public"."tasks"."actual_hours", "public"."tasks"."workflow_status"::text, "public"."tasks"."workflow_started_at", "public"."tasks"."workflow_completed_at", "public"."tasks"."stakwork_project_id", "public"."tasks"."source_type"::text, "public"."tasks"."created_by_id", "public"."tasks"."updated_by_id", "public"."tasks"."deleted", "public"."tasks"."deleted_at", "public"."tasks"."created_at", "public"."tasks"."updated_at"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query SELECT "public"."tasks"."id", "public"."tasks"."workspace_id" FROM "public"."tasks" WHERE ("public"."tasks"."id" = $1 AND "public"."tasks"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."owner_id" FROM "public"."workspaces" WHERE "public"."workspaces"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."swarm_url", "public"."swarms"."swarm_secret_alias", "public"."swarms"."pool_name", "public"."swarms"."name", "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."role"::text, "public"."workspace_members"."workspace_id" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."user_id" = $1 AND "public"."workspace_members"."workspace_id" IN ($2)) OFFSET $3

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query SELECT "public"."users"."id", "public"."users"."name" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query BEGIN

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query INSERT INTO "public"."chat_messages" ("id","task_id","message","role","timestamp","context_tags","status","created_at","updated_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."ChatRole"),$5,$6,CAST($7::text AS "public"."ChatStatus"),$8,$9) RETURNING "public"."chat_messages"."id"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query SELECT "public"."chat_messages"."id", "public"."chat_messages"."task_id", "public"."chat_messages"."message", "public"."chat_messages"."workflow_url", "public"."chat_messages"."role"::text, "public"."chat_messages"."timestamp", "public"."chat_messages"."context_tags", "public"."chat_messages"."status"::text, "public"."chat_messages"."source_websocket_id", "public"."chat_messages"."reply_id", "public"."chat_messages"."created_at", "public"."chat_messages"."updated_at" FROM "public"."chat_messages" WHERE "public"."chat_messages"."id" = $1 LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query SELECT "public"."artifacts"."id", "public"."artifacts"."message_id", "public"."artifacts"."type"::text, "public"."artifacts"."content", "public"."artifacts"."icon", "public"."artifacts"."created_at", "public"."artifacts"."updated_at" FROM "public"."artifacts" WHERE "public"."artifacts"."message_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query SELECT "public"."attachments"."id", "public"."attachments"."message_id", "public"."attachments"."path", "public"."attachments"."filename", "public"."attachments"."mime_type", "public"."attachments"."size", "public"."attachments"."created_at", "public"."attachments"."updated_at" FROM "public"."attachments" WHERE "public"."attachments"."message_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query SELECT "public"."tasks"."id", "public"."tasks"."title" FROM "public"."tasks" WHERE "public"."tasks"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query COMMIT

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
clientMessage {
  id: [32m'cmf5n87ot000hv4c66uxl6nr3'[39m,
  taskId: [32m'test-task-1757004690398-0.5686291359428088'[39m,
  message: [32m'Test integration mode'[39m,
  workflowUrl: [1mnull[22m,
  role: [32m'USER'[39m,
  timestamp: [35m2025-09-04T16:51:30.414Z[39m,
  contextTags: [],
  status: [32m'SENT'[39m,
  sourceWebsocketID: [1mnull[22m,
  replyId: [1mnull[22m,
  createdAt: [35m2025-09-04T16:51:30.414Z[39m,
  updatedAt: [35m2025-09-04T16:51:30.414Z[39m,
  artifacts: [],
  attachments: [],
  task: {
    id: [32m'test-task-1757004690398-0.5686291359428088'[39m,
    title: [32m'Test Task'[39m
  }
}

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query UPDATE "public"."tasks" SET "workflow_status" = CAST($1::text AS "public"."WorkflowStatus"), "workflow_started_at" = $2, "stakwork_project_id" = $3, "updated_at" = $4 WHERE ("public"."tasks"."id" = $5 AND 1=1) RETURNING "public"."tasks"."id", "public"."tasks"."title", "public"."tasks"."description", "public"."tasks"."workspace_id", "public"."tasks"."assignee_id", "public"."tasks"."repository_id", "public"."tasks"."status"::text, "public"."tasks"."priority"::text, "public"."tasks"."estimated_hours", "public"."tasks"."actual_hours", "public"."tasks"."workflow_status"::text, "public"."tasks"."workflow_started_at", "public"."tasks"."workflow_completed_at", "public"."tasks"."stakwork_project_id", "public"."tasks"."source_type"::text, "public"."tasks"."created_by_id", "public"."tasks"."updated_by_id", "public"."tasks"."deleted", "public"."tasks"."deleted_at", "public"."tasks"."created_at", "public"."tasks"."updated_at"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."chat_messages" WHERE EXISTS(SELECT "t0"."id" FROM "public"."tasks" AS "t0" WHERE ("t0"."title"::text LIKE $1 AND ("public"."chat_messages"."task_id") = ("t0"."id") AND "t0"."id" IS NOT NULL))

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."tasks" WHERE "public"."tasks"."title"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."swarms" WHERE "public"."swarms"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."workspace_members" WHERE EXISTS(SELECT "t0"."id" FROM "public"."workspaces" AS "t0" WHERE ("t0"."name"::text LIKE $1 AND ("public"."workspace_members"."workspace_id") = ("t0"."id") AND "t0"."id" IS NOT NULL))

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."workspaces" WHERE "public"."workspaces"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query BEGIN

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query INSERT INTO "public"."workspaces" ("id","name","description","slug","deleted","created_at","updated_at","owner_id","stakwork_api_key") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query INSERT INTO "public"."swarms" ("id","name","swarm_id","swarm_url","status","instance_type","created_at","updated_at","pool_name","repository_name","default_branch","repository_url","swarm_secret_alias","environment_variables","services","wizard_step","step_status","wizard_data","workspace_id") VALUES ($1,$2,$3,$4,CAST($5::text AS "public"."SwarmStatus"),$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,CAST($16::text AS "public"."SwarmWizardStep"),CAST($17::text AS "public"."StepStatus"),$18,$19) RETURNING "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_id", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."instance_type", "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."pool_name", "public"."swarms"."pool_api_key", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."repository_name", "public"."swarms"."default_branch", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_secret_alias", "public"."swarms"."environment_variables", "public"."swarms"."services", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."ingest_ref_id", "public"."swarms"."container_files", "public"."swarms"."swarm_password", "public"."swarms"."workspace_id"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query INSERT INTO "public"."tasks" ("id","title","description","workspace_id","status","priority","workflow_status","source_type","created_by_id","updated_by_id","deleted","created_at","updated_at") VALUES ($1,$2,$3,$4,CAST($5::text AS "public"."TaskStatus"),CAST($6::text AS "public"."Priority"),CAST($7::text AS "public"."WorkflowStatus"),CAST($8::text AS "public"."TaskSourceType"),$9,$10,$11,$12,$13) RETURNING "public"."tasks"."id", "public"."tasks"."title", "public"."tasks"."description", "public"."tasks"."workspace_id", "public"."tasks"."assignee_id", "public"."tasks"."repository_id", "public"."tasks"."status"::text, "public"."tasks"."priority"::text, "public"."tasks"."estimated_hours", "public"."tasks"."actual_hours", "public"."tasks"."workflow_status"::text, "public"."tasks"."workflow_started_at", "public"."tasks"."workflow_completed_at", "public"."tasks"."stakwork_project_id", "public"."tasks"."source_type"::text, "public"."tasks"."created_by_id", "public"."tasks"."updated_by_id", "public"."tasks"."deleted", "public"."tasks"."deleted_at", "public"."tasks"."created_at", "public"."tasks"."updated_at"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query COMMIT

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query SELECT "public"."tasks"."id", "public"."tasks"."workspace_id" FROM "public"."tasks" WHERE ("public"."tasks"."id" = $1 AND "public"."tasks"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."owner_id" FROM "public"."workspaces" WHERE "public"."workspaces"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."swarm_url", "public"."swarms"."swarm_secret_alias", "public"."swarms"."pool_name", "public"."swarms"."name", "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."role"::text, "public"."workspace_members"."workspace_id" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."user_id" = $1 AND "public"."workspace_members"."workspace_id" IN ($2)) OFFSET $3

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query SELECT "public"."users"."id", "public"."users"."name" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query BEGIN

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query INSERT INTO "public"."chat_messages" ("id","task_id","message","role","timestamp","context_tags","status","created_at","updated_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."ChatRole"),$5,$6,CAST($7::text AS "public"."ChatStatus"),$8,$9) RETURNING "public"."chat_messages"."id"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query SELECT "public"."chat_messages"."id", "public"."chat_messages"."task_id", "public"."chat_messages"."message", "public"."chat_messages"."workflow_url", "public"."chat_messages"."role"::text, "public"."chat_messages"."timestamp", "public"."chat_messages"."context_tags", "public"."chat_messages"."status"::text, "public"."chat_messages"."source_websocket_id", "public"."chat_messages"."reply_id", "public"."chat_messages"."created_at", "public"."chat_messages"."updated_at" FROM "public"."chat_messages" WHERE "public"."chat_messages"."id" = $1 LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query SELECT "public"."artifacts"."id", "public"."artifacts"."message_id", "public"."artifacts"."type"::text, "public"."artifacts"."content", "public"."artifacts"."icon", "public"."artifacts"."created_at", "public"."artifacts"."updated_at" FROM "public"."artifacts" WHERE "public"."artifacts"."message_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query SELECT "public"."attachments"."id", "public"."attachments"."message_id", "public"."attachments"."path", "public"."attachments"."filename", "public"."attachments"."mime_type", "public"."attachments"."size", "public"."attachments"."created_at", "public"."attachments"."updated_at" FROM "public"."attachments" WHERE "public"."attachments"."message_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query SELECT "public"."tasks"."id", "public"."tasks"."title" FROM "public"."tasks" WHERE "public"."tasks"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query COMMIT

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
clientMessage {
  id: [32m'cmf5n87q3000jv4c6mvunm60q'[39m,
  taskId: [32m'test-task-1757004690453-0.03869839026003885'[39m,
  message: [32m'Test mock service'[39m,
  workflowUrl: [1mnull[22m,
  role: [32m'USER'[39m,
  timestamp: [35m2025-09-04T16:51:30.460Z[39m,
  contextTags: [],
  status: [32m'SENT'[39m,
  sourceWebsocketID: [1mnull[22m,
  replyId: [1mnull[22m,
  createdAt: [35m2025-09-04T16:51:30.460Z[39m,
  updatedAt: [35m2025-09-04T16:51:30.460Z[39m,
  artifacts: [],
  attachments: [],
  task: {
    id: [32m'test-task-1757004690453-0.03869839026003885'[39m,
    title: [32m'Test Task'[39m
  }
}

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."chat_messages" WHERE EXISTS(SELECT "t0"."id" FROM "public"."tasks" AS "t0" WHERE ("t0"."title"::text LIKE $1 AND ("public"."chat_messages"."task_id") = ("t0"."id") AND "t0"."id" IS NOT NULL))

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."tasks" WHERE "public"."tasks"."title"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."swarms" WHERE "public"."swarms"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."workspace_members" WHERE EXISTS(SELECT "t0"."id" FROM "public"."workspaces" AS "t0" WHERE ("t0"."name"::text LIKE $1 AND ("public"."workspace_members"."workspace_id") = ("t0"."id") AND "t0"."id" IS NOT NULL))

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."workspaces" WHERE "public"."workspaces"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query BEGIN

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query INSERT INTO "public"."workspaces" ("id","name","description","slug","deleted","created_at","updated_at","owner_id","stakwork_api_key") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query INSERT INTO "public"."swarms" ("id","name","swarm_id","swarm_url","status","instance_type","created_at","updated_at","pool_name","repository_name","default_branch","repository_url","swarm_secret_alias","environment_variables","services","wizard_step","step_status","wizard_data","workspace_id") VALUES ($1,$2,$3,$4,CAST($5::text AS "public"."SwarmStatus"),$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,CAST($16::text AS "public"."SwarmWizardStep"),CAST($17::text AS "public"."StepStatus"),$18,$19) RETURNING "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_id", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."instance_type", "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."pool_name", "public"."swarms"."pool_api_key", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."repository_name", "public"."swarms"."default_branch", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_secret_alias", "public"."swarms"."environment_variables", "public"."swarms"."services", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."ingest_ref_id", "public"."swarms"."container_files", "public"."swarms"."swarm_password", "public"."swarms"."workspace_id"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query INSERT INTO "public"."tasks" ("id","title","description","workspace_id","status","priority","workflow_status","source_type","created_by_id","updated_by_id","deleted","created_at","updated_at") VALUES ($1,$2,$3,$4,CAST($5::text AS "public"."TaskStatus"),CAST($6::text AS "public"."Priority"),CAST($7::text AS "public"."WorkflowStatus"),CAST($8::text AS "public"."TaskSourceType"),$9,$10,$11,$12,$13) RETURNING "public"."tasks"."id", "public"."tasks"."title", "public"."tasks"."description", "public"."tasks"."workspace_id", "public"."tasks"."assignee_id", "public"."tasks"."repository_id", "public"."tasks"."status"::text, "public"."tasks"."priority"::text, "public"."tasks"."estimated_hours", "public"."tasks"."actual_hours", "public"."tasks"."workflow_status"::text, "public"."tasks"."workflow_started_at", "public"."tasks"."workflow_completed_at", "public"."tasks"."stakwork_project_id", "public"."tasks"."source_type"::text, "public"."tasks"."created_by_id", "public"."tasks"."updated_by_id", "public"."tasks"."deleted", "public"."tasks"."deleted_at", "public"."tasks"."created_at", "public"."tasks"."updated_at"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query COMMIT

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query SELECT "public"."tasks"."id", "public"."tasks"."workspace_id" FROM "public"."tasks" WHERE ("public"."tasks"."id" = $1 AND "public"."tasks"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."owner_id" FROM "public"."workspaces" WHERE "public"."workspaces"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."swarm_url", "public"."swarms"."swarm_secret_alias", "public"."swarms"."pool_name", "public"."swarms"."name", "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."role"::text, "public"."workspace_members"."workspace_id" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."user_id" = $1 AND "public"."workspace_members"."workspace_id" IN ($2)) OFFSET $3

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query SELECT "public"."users"."id", "public"."users"."name" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query BEGIN

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query INSERT INTO "public"."chat_messages" ("id","task_id","message","role","timestamp","context_tags","status","created_at","updated_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."ChatRole"),$5,$6,CAST($7::text AS "public"."ChatStatus"),$8,$9) RETURNING "public"."chat_messages"."id"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query SELECT "public"."chat_messages"."id", "public"."chat_messages"."task_id", "public"."chat_messages"."message", "public"."chat_messages"."workflow_url", "public"."chat_messages"."role"::text, "public"."chat_messages"."timestamp", "public"."chat_messages"."context_tags", "public"."chat_messages"."status"::text, "public"."chat_messages"."source_websocket_id", "public"."chat_messages"."reply_id", "public"."chat_messages"."created_at", "public"."chat_messages"."updated_at" FROM "public"."chat_messages" WHERE "public"."chat_messages"."id" = $1 LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query SELECT "public"."artifacts"."id", "public"."artifacts"."message_id", "public"."artifacts"."type"::text, "public"."artifacts"."content", "public"."artifacts"."icon", "public"."artifacts"."created_at", "public"."artifacts"."updated_at" FROM "public"."artifacts" WHERE "public"."artifacts"."message_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query SELECT "public"."attachments"."id", "public"."attachments"."message_id", "public"."attachments"."path", "public"."attachments"."filename", "public"."attachments"."mime_type", "public"."attachments"."size", "public"."attachments"."created_at", "public"."attachments"."updated_at" FROM "public"."attachments" WHERE "public"."attachments"."message_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query SELECT "public"."tasks"."id", "public"."tasks"."title" FROM "public"."tasks" WHERE "public"."tasks"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query COMMIT

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
clientMessage {
  id: [32m'cmf5n87rh000lv4c6p11afx09'[39m,
  taskId: [32m'test-task-1757004690503-0.3504949071125123'[39m,
  message: [32m'Test mock failure'[39m,
  workflowUrl: [1mnull[22m,
  role: [32m'USER'[39m,
  timestamp: [35m2025-09-04T16:51:30.509Z[39m,
  contextTags: [],
  status: [32m'SENT'[39m,
  sourceWebsocketID: [1mnull[22m,
  replyId: [1mnull[22m,
  createdAt: [35m2025-09-04T16:51:30.509Z[39m,
  updatedAt: [35m2025-09-04T16:51:30.509Z[39m,
  artifacts: [],
  attachments: [],
  task: {
    id: [32m'test-task-1757004690503-0.3504949071125123'[39m,
    title: [32m'Test Task'[39m
  }
}

stderr | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
Failed to send message to mock server: Mock Service Error

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."chat_messages" WHERE EXISTS(SELECT "t0"."id" FROM "public"."tasks" AS "t0" WHERE ("t0"."title"::text LIKE $1 AND ("public"."chat_messages"."task_id") = ("t0"."id") AND "t0"."id" IS NOT NULL))

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."tasks" WHERE "public"."tasks"."title"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."swarms" WHERE "public"."swarms"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."workspace_members" WHERE EXISTS(SELECT "t0"."id" FROM "public"."workspaces" AS "t0" WHERE ("t0"."name"::text LIKE $1 AND ("public"."workspace_members"."workspace_id") = ("t0"."id") AND "t0"."id" IS NOT NULL))

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."workspaces" WHERE "public"."workspaces"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query BEGIN

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query INSERT INTO "public"."workspaces" ("id","name","description","slug","deleted","created_at","updated_at","owner_id","stakwork_api_key") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query INSERT INTO "public"."swarms" ("id","name","swarm_id","swarm_url","status","instance_type","created_at","updated_at","pool_name","repository_name","default_branch","repository_url","swarm_secret_alias","environment_variables","services","wizard_step","step_status","wizard_data","workspace_id") VALUES ($1,$2,$3,$4,CAST($5::text AS "public"."SwarmStatus"),$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,CAST($16::text AS "public"."SwarmWizardStep"),CAST($17::text AS "public"."StepStatus"),$18,$19) RETURNING "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_id", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."instance_type", "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."pool_name", "public"."swarms"."pool_api_key", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."repository_name", "public"."swarms"."default_branch", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_secret_alias", "public"."swarms"."environment_variables", "public"."swarms"."services", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."ingest_ref_id", "public"."swarms"."container_files", "public"."swarms"."swarm_password", "public"."swarms"."workspace_id"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query INSERT INTO "public"."tasks" ("id","title","description","workspace_id","status","priority","workflow_status","source_type","created_by_id","updated_by_id","deleted","created_at","updated_at") VALUES ($1,$2,$3,$4,CAST($5::text AS "public"."TaskStatus"),CAST($6::text AS "public"."Priority"),CAST($7::text AS "public"."WorkflowStatus"),CAST($8::text AS "public"."TaskSourceType"),$9,$10,$11,$12,$13) RETURNING "public"."tasks"."id", "public"."tasks"."title", "public"."tasks"."description", "public"."tasks"."workspace_id", "public"."tasks"."assignee_id", "public"."tasks"."repository_id", "public"."tasks"."status"::text, "public"."tasks"."priority"::text, "public"."tasks"."estimated_hours", "public"."tasks"."actual_hours", "public"."tasks"."workflow_status"::text, "public"."tasks"."workflow_started_at", "public"."tasks"."workflow_completed_at", "public"."tasks"."stakwork_project_id", "public"."tasks"."source_type"::text, "public"."tasks"."created_by_id", "public"."tasks"."updated_by_id", "public"."tasks"."deleted", "public"."tasks"."deleted_at", "public"."tasks"."created_at", "public"."tasks"."updated_at"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query COMMIT

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."chat_messages" WHERE EXISTS(SELECT "t0"."id" FROM "public"."tasks" AS "t0" WHERE ("t0"."title"::text LIKE $1 AND ("public"."chat_messages"."task_id") = ("t0"."id") AND "t0"."id" IS NOT NULL))

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."tasks" WHERE "public"."tasks"."title"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."swarms" WHERE "public"."swarms"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."workspace_members" WHERE EXISTS(SELECT "t0"."id" FROM "public"."workspaces" AS "t0" WHERE ("t0"."name"::text LIKE $1 AND ("public"."workspace_members"."workspace_id") = ("t0"."id") AND "t0"."id" IS NOT NULL))

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."workspaces" WHERE "public"."workspaces"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query BEGIN

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query INSERT INTO "public"."workspaces" ("id","name","description","slug","deleted","created_at","updated_at","owner_id","stakwork_api_key") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query INSERT INTO "public"."swarms" ("id","name","swarm_id","swarm_url","status","instance_type","created_at","updated_at","pool_name","repository_name","default_branch","repository_url","swarm_secret_alias","environment_variables","services","wizard_step","step_status","wizard_data","workspace_id") VALUES ($1,$2,$3,$4,CAST($5::text AS "public"."SwarmStatus"),$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,CAST($16::text AS "public"."SwarmWizardStep"),CAST($17::text AS "public"."StepStatus"),$18,$19) RETURNING "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_id", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."instance_type", "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."pool_name", "public"."swarms"."pool_api_key", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."repository_name", "public"."swarms"."default_branch", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_secret_alias", "public"."swarms"."environment_variables", "public"."swarms"."services", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."ingest_ref_id", "public"."swarms"."container_files", "public"."swarms"."swarm_password", "public"."swarms"."workspace_id"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query INSERT INTO "public"."tasks" ("id","title","description","workspace_id","status","priority","workflow_status","source_type","created_by_id","updated_by_id","deleted","created_at","updated_at") VALUES ($1,$2,$3,$4,CAST($5::text AS "public"."TaskStatus"),CAST($6::text AS "public"."Priority"),CAST($7::text AS "public"."WorkflowStatus"),CAST($8::text AS "public"."TaskSourceType"),$9,$10,$11,$12,$13) RETURNING "public"."tasks"."id", "public"."tasks"."title", "public"."tasks"."description", "public"."tasks"."workspace_id", "public"."tasks"."assignee_id", "public"."tasks"."repository_id", "public"."tasks"."status"::text, "public"."tasks"."priority"::text, "public"."tasks"."estimated_hours", "public"."tasks"."actual_hours", "public"."tasks"."workflow_status"::text, "public"."tasks"."workflow_started_at", "public"."tasks"."workflow_completed_at", "public"."tasks"."stakwork_project_id", "public"."tasks"."source_type"::text, "public"."tasks"."created_by_id", "public"."tasks"."updated_by_id", "public"."tasks"."deleted", "public"."tasks"."deleted_at", "public"."tasks"."created_at", "public"."tasks"."updated_at"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query COMMIT

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."chat_messages" WHERE EXISTS(SELECT "t0"."id" FROM "public"."tasks" AS "t0" WHERE ("t0"."title"::text LIKE $1 AND ("public"."chat_messages"."task_id") = ("t0"."id") AND "t0"."id" IS NOT NULL))

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."tasks" WHERE "public"."tasks"."title"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."swarms" WHERE "public"."swarms"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."workspace_members" WHERE EXISTS(SELECT "t0"."id" FROM "public"."workspaces" AS "t0" WHERE ("t0"."name"::text LIKE $1 AND ("public"."workspace_members"."workspace_id") = ("t0"."id") AND "t0"."id" IS NOT NULL))

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."workspaces" WHERE "public"."workspaces"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query BEGIN

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query INSERT INTO "public"."workspaces" ("id","name","description","slug","deleted","created_at","updated_at","owner_id","stakwork_api_key") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query INSERT INTO "public"."swarms" ("id","name","swarm_id","swarm_url","status","instance_type","created_at","updated_at","pool_name","repository_name","default_branch","repository_url","swarm_secret_alias","environment_variables","services","wizard_step","step_status","wizard_data","workspace_id") VALUES ($1,$2,$3,$4,CAST($5::text AS "public"."SwarmStatus"),$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,CAST($16::text AS "public"."SwarmWizardStep"),CAST($17::text AS "public"."StepStatus"),$18,$19) RETURNING "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_id", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."instance_type", "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."pool_name", "public"."swarms"."pool_api_key", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."repository_name", "public"."swarms"."default_branch", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_secret_alias", "public"."swarms"."environment_variables", "public"."swarms"."services", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."ingest_ref_id", "public"."swarms"."container_files", "public"."swarms"."swarm_password", "public"."swarms"."workspace_id"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query INSERT INTO "public"."tasks" ("id","title","description","workspace_id","status","priority","workflow_status","source_type","created_by_id","updated_by_id","deleted","created_at","updated_at") VALUES ($1,$2,$3,$4,CAST($5::text AS "public"."TaskStatus"),CAST($6::text AS "public"."Priority"),CAST($7::text AS "public"."WorkflowStatus"),CAST($8::text AS "public"."TaskSourceType"),$9,$10,$11,$12,$13) RETURNING "public"."tasks"."id", "public"."tasks"."title", "public"."tasks"."description", "public"."tasks"."workspace_id", "public"."tasks"."assignee_id", "public"."tasks"."repository_id", "public"."tasks"."status"::text, "public"."tasks"."priority"::text, "public"."tasks"."estimated_hours", "public"."tasks"."actual_hours", "public"."tasks"."workflow_status"::text, "public"."tasks"."workflow_started_at", "public"."tasks"."workflow_completed_at", "public"."tasks"."stakwork_project_id", "public"."tasks"."source_type"::text, "public"."tasks"."created_by_id", "public"."tasks"."updated_by_id", "public"."tasks"."deleted", "public"."tasks"."deleted_at", "public"."tasks"."created_at", "public"."tasks"."updated_at"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query COMMIT

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query SELECT "public"."tasks"."id", "public"."tasks"."workspace_id" FROM "public"."tasks" WHERE ("public"."tasks"."id" = $1 AND "public"."tasks"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query SELECT "public"."users"."id", "public"."users"."name" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."chat_messages" WHERE EXISTS(SELECT "t0"."id" FROM "public"."tasks" AS "t0" WHERE ("t0"."title"::text LIKE $1 AND ("public"."chat_messages"."task_id") = ("t0"."id") AND "t0"."id" IS NOT NULL))

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."tasks" WHERE "public"."tasks"."title"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."swarms" WHERE "public"."swarms"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."workspace_members" WHERE EXISTS(SELECT "t0"."id" FROM "public"."workspaces" AS "t0" WHERE ("t0"."name"::text LIKE $1 AND ("public"."workspace_members"."workspace_id") = ("t0"."id") AND "t0"."id" IS NOT NULL))

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."workspaces" WHERE "public"."workspaces"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query BEGIN

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query INSERT INTO "public"."workspaces" ("id","name","description","slug","deleted","created_at","updated_at","owner_id","stakwork_api_key") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query INSERT INTO "public"."swarms" ("id","name","swarm_id","swarm_url","status","instance_type","created_at","updated_at","pool_name","repository_name","default_branch","repository_url","swarm_secret_alias","environment_variables","services","wizard_step","step_status","wizard_data","workspace_id") VALUES ($1,$2,$3,$4,CAST($5::text AS "public"."SwarmStatus"),$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,CAST($16::text AS "public"."SwarmWizardStep"),CAST($17::text AS "public"."StepStatus"),$18,$19) RETURNING "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_id", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."instance_type", "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."pool_name", "public"."swarms"."pool_api_key", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."repository_name", "public"."swarms"."default_branch", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_secret_alias", "public"."swarms"."environment_variables", "public"."swarms"."services", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."ingest_ref_id", "public"."swarms"."container_files", "public"."swarms"."swarm_password", "public"."swarms"."workspace_id"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query INSERT INTO "public"."tasks" ("id","title","description","workspace_id","status","priority","workflow_status","source_type","created_by_id","updated_by_id","deleted","created_at","updated_at") VALUES ($1,$2,$3,$4,CAST($5::text AS "public"."TaskStatus"),CAST($6::text AS "public"."Priority"),CAST($7::text AS "public"."WorkflowStatus"),CAST($8::text AS "public"."TaskSourceType"),$9,$10,$11,$12,$13) RETURNING "public"."tasks"."id", "public"."tasks"."title", "public"."tasks"."description", "public"."tasks"."workspace_id", "public"."tasks"."assignee_id", "public"."tasks"."repository_id", "public"."tasks"."status"::text, "public"."tasks"."priority"::text, "public"."tasks"."estimated_hours", "public"."tasks"."actual_hours", "public"."tasks"."workflow_status"::text, "public"."tasks"."workflow_started_at", "public"."tasks"."workflow_completed_at", "public"."tasks"."stakwork_project_id", "public"."tasks"."source_type"::text, "public"."tasks"."created_by_id", "public"."tasks"."updated_by_id", "public"."tasks"."deleted", "public"."tasks"."deleted_at", "public"."tasks"."created_at", "public"."tasks"."updated_at"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query COMMIT

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query SELECT "public"."tasks"."id", "public"."tasks"."workspace_id" FROM "public"."tasks" WHERE ("public"."tasks"."id" = $1 AND "public"."tasks"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."owner_id" FROM "public"."workspaces" WHERE "public"."workspaces"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."swarm_url", "public"."swarms"."swarm_secret_alias", "public"."swarms"."pool_name", "public"."swarms"."name", "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."role"::text, "public"."workspace_members"."workspace_id" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."user_id" = $1 AND "public"."workspace_members"."workspace_id" IN ($2)) OFFSET $3

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query SELECT "public"."users"."id", "public"."users"."name" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stderr | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
Error creating chat message: PrismaClientValidationError: 
Invalid `db.chatMessage.create()` invocation in
/workspaces/hive/src/app/api/chat/message/route.ts:302:46

  299 }
  300 
  301 // Create the chat message
→ 302 const chatMessage = await db.chatMessage.create({
        data: {
          taskId: "test-task-1757004690666-0.17680658758295253",
          message: "Test message",
          role: "USER",
          contextTags: "[]",
          status: "SENT",
          sourceWebsocketID: undefined,
          replyId: undefined,
          artifacts: {
            create: [
              {
                type: "INVALID_TYPE",
                content: {
                  invalid: "data"
                }
              }
            ]
          },
          attachments: {
            create: []
          }
        },
        include: {
          artifacts: true,
          attachments: true,
          task: {
            select: {
              id: true,
              title: true
            }
          }
        }
      })

Invalid value for argument `type`. Expected ArtifactType.
    at kn [90m(/workspaces/hive/[39mnode_modules/[4m@prisma[24m/client/runtime/library.js:29:1363[90m)[39m
    at Xn.handleRequestError [90m(/workspaces/hive/[39mnode_modules/[4m@prisma[24m/client/runtime/library.js:121:7102[90m)[39m
    at Xn.handleAndLogRequestError [90m(/workspaces/hive/[39mnode_modules/[4m@prisma[24m/client/runtime/library.js:121:6784[90m)[39m
    at Xn.request [90m(/workspaces/hive/[39mnode_modules/[4m@prisma[24m/client/runtime/library.js:121:6491[90m)[39m
    at l [90m(/workspaces/hive/[39mnode_modules/[4m@prisma[24m/client/runtime/library.js:130:9812[90m)[39m
    at Module.POST [90m(/workspaces/hive/[39msrc/app/api/chat/message/route.ts:302:25[90m)[39m
    at [90m/workspaces/hive/[39msrc/__tests__/integration/api/chat-message.test.ts:715:24
    at [90mfile:///workspaces/hive/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20 {
  clientVersion: [32m'6.12.0'[39m
}

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."chat_messages" WHERE EXISTS(SELECT "t0"."id" FROM "public"."tasks" AS "t0" WHERE ("t0"."title"::text LIKE $1 AND ("public"."chat_messages"."task_id") = ("t0"."id") AND "t0"."id" IS NOT NULL))

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."tasks" WHERE "public"."tasks"."title"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."swarms" WHERE "public"."swarms"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."workspace_members" WHERE EXISTS(SELECT "t0"."id" FROM "public"."workspaces" AS "t0" WHERE ("t0"."name"::text LIKE $1 AND ("public"."workspace_members"."workspace_id") = ("t0"."id") AND "t0"."id" IS NOT NULL))

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."workspaces" WHERE "public"."workspaces"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query BEGIN

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query INSERT INTO "public"."workspaces" ("id","name","description","slug","deleted","created_at","updated_at","owner_id","stakwork_api_key") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query INSERT INTO "public"."swarms" ("id","name","swarm_id","swarm_url","status","instance_type","created_at","updated_at","pool_name","repository_name","default_branch","repository_url","swarm_secret_alias","environment_variables","services","wizard_step","step_status","wizard_data","workspace_id") VALUES ($1,$2,$3,$4,CAST($5::text AS "public"."SwarmStatus"),$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,CAST($16::text AS "public"."SwarmWizardStep"),CAST($17::text AS "public"."StepStatus"),$18,$19) RETURNING "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_id", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."instance_type", "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."pool_name", "public"."swarms"."pool_api_key", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."repository_name", "public"."swarms"."default_branch", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_secret_alias", "public"."swarms"."environment_variables", "public"."swarms"."services", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."ingest_ref_id", "public"."swarms"."container_files", "public"."swarms"."swarm_password", "public"."swarms"."workspace_id"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query INSERT INTO "public"."tasks" ("id","title","description","workspace_id","status","priority","workflow_status","source_type","created_by_id","updated_by_id","deleted","created_at","updated_at") VALUES ($1,$2,$3,$4,CAST($5::text AS "public"."TaskStatus"),CAST($6::text AS "public"."Priority"),CAST($7::text AS "public"."WorkflowStatus"),CAST($8::text AS "public"."TaskSourceType"),$9,$10,$11,$12,$13) RETURNING "public"."tasks"."id", "public"."tasks"."title", "public"."tasks"."description", "public"."tasks"."workspace_id", "public"."tasks"."assignee_id", "public"."tasks"."repository_id", "public"."tasks"."status"::text, "public"."tasks"."priority"::text, "public"."tasks"."estimated_hours", "public"."tasks"."actual_hours", "public"."tasks"."workflow_status"::text, "public"."tasks"."workflow_started_at", "public"."tasks"."workflow_completed_at", "public"."tasks"."stakwork_project_id", "public"."tasks"."source_type"::text, "public"."tasks"."created_by_id", "public"."tasks"."updated_by_id", "public"."tasks"."deleted", "public"."tasks"."deleted_at", "public"."tasks"."created_at", "public"."tasks"."updated_at"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query COMMIT

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query SELECT "public"."tasks"."id", "public"."tasks"."workspace_id" FROM "public"."tasks" WHERE ("public"."tasks"."id" = $1 AND "public"."tasks"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."owner_id" FROM "public"."workspaces" WHERE "public"."workspaces"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."swarm_url", "public"."swarms"."swarm_secret_alias", "public"."swarms"."pool_name", "public"."swarms"."name", "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."role"::text, "public"."workspace_members"."workspace_id" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."user_id" = $1 AND "public"."workspace_members"."workspace_id" IN ($2)) OFFSET $3

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query SELECT "public"."users"."id", "public"."users"."name" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query BEGIN

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query INSERT INTO "public"."chat_messages" ("id","task_id","message","role","timestamp","context_tags","status","created_at","updated_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."ChatRole"),$5,$6,CAST($7::text AS "public"."ChatStatus"),$8,$9) RETURNING "public"."chat_messages"."id"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query INSERT INTO "public"."attachments" ("id","message_id","path","filename","mime_type","size","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8), ($9,$10,$11,$12,$13,$14,$15,$16)

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query SELECT "public"."chat_messages"."id", "public"."chat_messages"."task_id", "public"."chat_messages"."message", "public"."chat_messages"."workflow_url", "public"."chat_messages"."role"::text, "public"."chat_messages"."timestamp", "public"."chat_messages"."context_tags", "public"."chat_messages"."status"::text, "public"."chat_messages"."source_websocket_id", "public"."chat_messages"."reply_id", "public"."chat_messages"."created_at", "public"."chat_messages"."updated_at" FROM "public"."chat_messages" WHERE "public"."chat_messages"."id" = $1 LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query SELECT "public"."artifacts"."id", "public"."artifacts"."message_id", "public"."artifacts"."type"::text, "public"."artifacts"."content", "public"."artifacts"."icon", "public"."artifacts"."created_at", "public"."artifacts"."updated_at" FROM "public"."artifacts" WHERE "public"."artifacts"."message_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query SELECT "public"."attachments"."id", "public"."attachments"."message_id", "public"."attachments"."path", "public"."attachments"."filename", "public"."attachments"."mime_type", "public"."attachments"."size", "public"."attachments"."created_at", "public"."attachments"."updated_at" FROM "public"."attachments" WHERE "public"."attachments"."message_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query SELECT "public"."tasks"."id", "public"."tasks"."title" FROM "public"."tasks" WHERE "public"."tasks"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query COMMIT

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
clientMessage {
  id: [32m'cmf5n87xb000rv4c69akqemno'[39m,
  taskId: [32m'test-task-1757004690714-0.11535501373691193'[39m,
  message: [32m'Test with attachments'[39m,
  workflowUrl: [1mnull[22m,
  role: [32m'USER'[39m,
  timestamp: [35m2025-09-04T16:51:30.720Z[39m,
  contextTags: [],
  status: [32m'SENT'[39m,
  sourceWebsocketID: [1mnull[22m,
  replyId: [1mnull[22m,
  createdAt: [35m2025-09-04T16:51:30.720Z[39m,
  updatedAt: [35m2025-09-04T16:51:30.720Z[39m,
  artifacts: [],
  attachments: [
    {
      id: [32m'cmf5n87xc000sv4c6lnesrwtr'[39m,
      messageId: [32m'cmf5n87xb000rv4c69akqemno'[39m,
      path: [32m'uploads/workspace/task/image1.jpg'[39m,
      filename: [32m'screenshot.jpg'[39m,
      mimeType: [32m'image/jpeg'[39m,
      size: [33m256000[39m,
      createdAt: [35m2025-09-04T16:51:30.720Z[39m,
      updatedAt: [35m2025-09-04T16:51:30.720Z[39m
    },
    {
      id: [32m'cmf5n87xc000tv4c6ka1xjr8i'[39m,
      messageId: [32m'cmf5n87xb000rv4c69akqemno'[39m,
      path: [32m'uploads/workspace/task/document.pdf'[39m,
      filename: [32m'requirements.pdf'[39m,
      mimeType: [32m'application/pdf'[39m,
      size: [33m1024000[39m,
      createdAt: [35m2025-09-04T16:51:30.720Z[39m,
      updatedAt: [35m2025-09-04T16:51:30.720Z[39m
    }
  ],
  task: {
    id: [32m'test-task-1757004690714-0.11535501373691193'[39m,
    title: [32m'Test Task'[39m
  }
}

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query UPDATE "public"."tasks" SET "workflow_status" = CAST($1::text AS "public"."WorkflowStatus"), "workflow_started_at" = $2, "stakwork_project_id" = $3, "updated_at" = $4 WHERE ("public"."tasks"."id" = $5 AND 1=1) RETURNING "public"."tasks"."id", "public"."tasks"."title", "public"."tasks"."description", "public"."tasks"."workspace_id", "public"."tasks"."assignee_id", "public"."tasks"."repository_id", "public"."tasks"."status"::text, "public"."tasks"."priority"::text, "public"."tasks"."estimated_hours", "public"."tasks"."actual_hours", "public"."tasks"."workflow_status"::text, "public"."tasks"."workflow_started_at", "public"."tasks"."workflow_completed_at", "public"."tasks"."stakwork_project_id", "public"."tasks"."source_type"::text, "public"."tasks"."created_by_id", "public"."tasks"."updated_by_id", "public"."tasks"."deleted", "public"."tasks"."deleted_at", "public"."tasks"."created_at", "public"."tasks"."updated_at"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query SELECT "public"."chat_messages"."id", "public"."chat_messages"."task_id", "public"."chat_messages"."message", "public"."chat_messages"."workflow_url", "public"."chat_messages"."role"::text, "public"."chat_messages"."timestamp", "public"."chat_messages"."context_tags", "public"."chat_messages"."status"::text, "public"."chat_messages"."source_websocket_id", "public"."chat_messages"."reply_id", "public"."chat_messages"."created_at", "public"."chat_messages"."updated_at" FROM "public"."chat_messages" WHERE "public"."chat_messages"."task_id" = $1 LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query SELECT "public"."attachments"."id", "public"."attachments"."message_id", "public"."attachments"."path", "public"."attachments"."filename", "public"."attachments"."mime_type", "public"."attachments"."size", "public"."attachments"."created_at", "public"."attachments"."updated_at" FROM "public"."attachments" WHERE "public"."attachments"."message_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."chat_messages" WHERE EXISTS(SELECT "t0"."id" FROM "public"."tasks" AS "t0" WHERE ("t0"."title"::text LIKE $1 AND ("public"."chat_messages"."task_id") = ("t0"."id") AND "t0"."id" IS NOT NULL))

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."tasks" WHERE "public"."tasks"."title"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."swarms" WHERE "public"."swarms"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."workspace_members" WHERE EXISTS(SELECT "t0"."id" FROM "public"."workspaces" AS "t0" WHERE ("t0"."name"::text LIKE $1 AND ("public"."workspace_members"."workspace_id") = ("t0"."id") AND "t0"."id" IS NOT NULL))

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."workspaces" WHERE "public"."workspaces"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query BEGIN

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query INSERT INTO "public"."workspaces" ("id","name","description","slug","deleted","created_at","updated_at","owner_id","stakwork_api_key") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query INSERT INTO "public"."swarms" ("id","name","swarm_id","swarm_url","status","instance_type","created_at","updated_at","pool_name","repository_name","default_branch","repository_url","swarm_secret_alias","environment_variables","services","wizard_step","step_status","wizard_data","workspace_id") VALUES ($1,$2,$3,$4,CAST($5::text AS "public"."SwarmStatus"),$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,CAST($16::text AS "public"."SwarmWizardStep"),CAST($17::text AS "public"."StepStatus"),$18,$19) RETURNING "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_id", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."instance_type", "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."pool_name", "public"."swarms"."pool_api_key", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."repository_name", "public"."swarms"."default_branch", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_secret_alias", "public"."swarms"."environment_variables", "public"."swarms"."services", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."ingest_ref_id", "public"."swarms"."container_files", "public"."swarms"."swarm_password", "public"."swarms"."workspace_id"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query INSERT INTO "public"."tasks" ("id","title","description","workspace_id","status","priority","workflow_status","source_type","created_by_id","updated_by_id","deleted","created_at","updated_at") VALUES ($1,$2,$3,$4,CAST($5::text AS "public"."TaskStatus"),CAST($6::text AS "public"."Priority"),CAST($7::text AS "public"."WorkflowStatus"),CAST($8::text AS "public"."TaskSourceType"),$9,$10,$11,$12,$13) RETURNING "public"."tasks"."id", "public"."tasks"."title", "public"."tasks"."description", "public"."tasks"."workspace_id", "public"."tasks"."assignee_id", "public"."tasks"."repository_id", "public"."tasks"."status"::text, "public"."tasks"."priority"::text, "public"."tasks"."estimated_hours", "public"."tasks"."actual_hours", "public"."tasks"."workflow_status"::text, "public"."tasks"."workflow_started_at", "public"."tasks"."workflow_completed_at", "public"."tasks"."stakwork_project_id", "public"."tasks"."source_type"::text, "public"."tasks"."created_by_id", "public"."tasks"."updated_by_id", "public"."tasks"."deleted", "public"."tasks"."deleted_at", "public"."tasks"."created_at", "public"."tasks"."updated_at"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query COMMIT

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query SELECT "public"."tasks"."id", "public"."tasks"."workspace_id" FROM "public"."tasks" WHERE ("public"."tasks"."id" = $1 AND "public"."tasks"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."owner_id" FROM "public"."workspaces" WHERE "public"."workspaces"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."swarm_url", "public"."swarms"."swarm_secret_alias", "public"."swarms"."pool_name", "public"."swarms"."name", "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."role"::text, "public"."workspace_members"."workspace_id" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."user_id" = $1 AND "public"."workspace_members"."workspace_id" IN ($2)) OFFSET $3

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query SELECT "public"."users"."id", "public"."users"."name" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query BEGIN

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query INSERT INTO "public"."chat_messages" ("id","task_id","message","role","timestamp","context_tags","status","created_at","updated_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."ChatRole"),$5,$6,CAST($7::text AS "public"."ChatStatus"),$8,$9) RETURNING "public"."chat_messages"."id"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query SELECT "public"."chat_messages"."id", "public"."chat_messages"."task_id", "public"."chat_messages"."message", "public"."chat_messages"."workflow_url", "public"."chat_messages"."role"::text, "public"."chat_messages"."timestamp", "public"."chat_messages"."context_tags", "public"."chat_messages"."status"::text, "public"."chat_messages"."source_websocket_id", "public"."chat_messages"."reply_id", "public"."chat_messages"."created_at", "public"."chat_messages"."updated_at" FROM "public"."chat_messages" WHERE "public"."chat_messages"."id" = $1 LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query SELECT "public"."artifacts"."id", "public"."artifacts"."message_id", "public"."artifacts"."type"::text, "public"."artifacts"."content", "public"."artifacts"."icon", "public"."artifacts"."created_at", "public"."artifacts"."updated_at" FROM "public"."artifacts" WHERE "public"."artifacts"."message_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query SELECT "public"."attachments"."id", "public"."attachments"."message_id", "public"."attachments"."path", "public"."attachments"."filename", "public"."attachments"."mime_type", "public"."attachments"."size", "public"."attachments"."created_at", "public"."attachments"."updated_at" FROM "public"."attachments" WHERE "public"."attachments"."message_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query SELECT "public"."tasks"."id", "public"."tasks"."title" FROM "public"."tasks" WHERE "public"."tasks"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query COMMIT

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
clientMessage {
  id: [32m'cmf5n87ym000vv4c6vgcl24dw'[39m,
  taskId: [32m'test-task-1757004690760-0.1323232135040493'[39m,
  message: [32m'Test mode parameter'[39m,
  workflowUrl: [1mnull[22m,
  role: [32m'USER'[39m,
  timestamp: [35m2025-09-04T16:51:30.766Z[39m,
  contextTags: [],
  status: [32m'SENT'[39m,
  sourceWebsocketID: [1mnull[22m,
  replyId: [1mnull[22m,
  createdAt: [35m2025-09-04T16:51:30.766Z[39m,
  updatedAt: [35m2025-09-04T16:51:30.766Z[39m,
  artifacts: [],
  attachments: [],
  task: {
    id: [32m'test-task-1757004690760-0.1323232135040493'[39m,
    title: [32m'Test Task'[39m
  }
}

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query UPDATE "public"."tasks" SET "workflow_status" = CAST($1::text AS "public"."WorkflowStatus"), "workflow_started_at" = $2, "stakwork_project_id" = $3, "updated_at" = $4 WHERE ("public"."tasks"."id" = $5 AND 1=1) RETURNING "public"."tasks"."id", "public"."tasks"."title", "public"."tasks"."description", "public"."tasks"."workspace_id", "public"."tasks"."assignee_id", "public"."tasks"."repository_id", "public"."tasks"."status"::text, "public"."tasks"."priority"::text, "public"."tasks"."estimated_hours", "public"."tasks"."actual_hours", "public"."tasks"."workflow_status"::text, "public"."tasks"."workflow_started_at", "public"."tasks"."workflow_completed_at", "public"."tasks"."stakwork_project_id", "public"."tasks"."source_type"::text, "public"."tasks"."created_by_id", "public"."tasks"."updated_by_id", "public"."tasks"."deleted", "public"."tasks"."deleted_at", "public"."tasks"."created_at", "public"."tasks"."updated_at"

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."chat_messages" WHERE EXISTS(SELECT "t0"."id" FROM "public"."tasks" AS "t0" WHERE ("t0"."title"::text LIKE $1 AND ("public"."chat_messages"."task_id") = ("t0"."id") AND "t0"."id" IS NOT NULL))

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."tasks" WHERE "public"."tasks"."title"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."swarms" WHERE "public"."swarms"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."workspace_members" WHERE EXISTS(SELECT "t0"."id" FROM "public"."workspaces" AS "t0" WHERE ("t0"."name"::text LIKE $1 AND ("public"."workspace_members"."workspace_id") = ("t0"."id") AND "t0"."id" IS NOT NULL))

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."workspaces" WHERE "public"."workspaces"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."users" WHERE "public"."users"."name"::text LIKE $1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services
prisma:query DELETE FROM "public"."users" WHERE 1=1

 ❯ src/__tests__/integration/api/chat-message.test.ts (18 tests | 2 failed) 3468ms
   ✓ POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for unauthenticated requests 135ms
   ✓ POST /api/chat/message Integration Tests > Authentication and Authorization > should return 401 for invalid user session 27ms
   ✓ POST /api/chat/message Integration Tests > Authentication and Authorization > should return 403 for user without workspace access 60ms
   ✓ POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace owner to create chat messages 55ms
   × POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages 54ms
     → 
Invalid `db.workspaceMember.create()` invocation in
/workspaces/hive/src/__tests__/integration/api/chat-message.test.ts:122:30

  119   },
  120 });
  121 
→ 122 await db.workspaceMember.create({
        data: {
          userId: "member-user-1757004690107-0.40067053581347256",
          workspaceId: "test-workspace-1757004690102-0.39067693455847063",
          role: "MEMBER"
                ~~~~~~~~
        }
      })

Invalid value for argument `role`. Expected WorkspaceRole.
   ✓ POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should create chat message with artifacts and attachments 62ms
   ✓ POST /api/chat/message Integration Tests > Chat Message Creation and Data Persistence > should update task workflow status on successful Stakwork integration 70ms
   ✓ POST /api/chat/message Integration Tests > Stakwork Integration > should successfully integrate with Stakwork API 53ms
   ✓ POST /api/chat/message Integration Tests > Stakwork Integration > should handle Stakwork API failures gracefully 54ms
   ✓ POST /api/chat/message Integration Tests > Stakwork Integration > should select correct workflow ID based on mode 55ms
   × POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured 51ms
     → expected "spy" to be called with arguments: [ …(2) ][90m

Received: 

[1m  1st spy call:

[22m[33m@@ -1,9 +1,9 @@[90m
[2m  [[22m
[32m-   "https://42ropx48.workspaces.sphinx.chat/api/mock",[90m
[32m-   ObjectContaining {[90m
[32m-     "body": StringContaining "test-task-1757004690453-0.03869839026003885",[90m
[31m+   "$POD_URL/api/mock",[90m
[31m+   {[90m
[31m+     "body": "{\"taskId\":\"test-task-1757004690453-0.03869839026003885\",\"message\":\"Test mock service\",\"userId\":\"test-user-1757004690449-0.7231266511933232\",\"artifacts\":[]}",[90m
[2m      "headers": {[22m
[2m        "Content-Type": "application/json",[22m
[2m      },[22m
[2m      "method": "POST",[22m
[2m    },[22m
[39m[90m

Number of calls: [1m1[22m
[39m
   ✓ POST /api/chat/message Integration Tests > Mock Service Integration > should handle mock service failures 44ms
   ✓ POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing message 43ms
   ✓ POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 400 for missing taskId 37ms
   ✓ POST /api/chat/message Integration Tests > Input Validation and Error Handling > should return 404 for non-existent task 38ms
   ✓ POST /api/chat/message Integration Tests > Input Validation and Error Handling > should handle database errors gracefully 44ms
   ✓ POST /api/chat/message Integration Tests > Attachments and S3 Integration > should handle attachments with S3 presigned URLs 50ms
   ✓ POST /api/chat/message Integration Tests > Workflow Mode Selection > should pass through mode parameter to services 51ms

⎯⎯⎯⎯⎯⎯⎯ Failed Tests 2 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Workspace Membership Enforcement > should allow workspace member to create chat messages
PrismaClientValidationError: 
Invalid `db.workspaceMember.create()` invocation in
/workspaces/hive/src/__tests__/integration/api/chat-message.test.ts:122:30

  119   },
  120 });
  121 
→ 122 await db.workspaceMember.create({
        data: {
          userId: "member-user-1757004690107-0.40067053581347256",
          workspaceId: "test-workspace-1757004690102-0.39067693455847063",
          role: "MEMBER"
                ~~~~~~~~
        }
      })

Invalid value for argument `role`. Expected WorkspaceRole.
 ❯ kn node_modules/@prisma/client/runtime/library.js:29:1363
 ❯ Xn.handleRequestError node_modules/@prisma/client/runtime/library.js:121:7102
 ❯ Xn.handleAndLogRequestError node_modules/@prisma/client/runtime/library.js:121:6784
 ❯ Xn.request node_modules/@prisma/client/runtime/library.js:121:6491
 ❯ l node_modules/@prisma/client/runtime/library.js:130:9812
 ❯ createWorkspaceMember src/__tests__/integration/api/chat-message.test.ts:122:5
    120|     });
    121| 
    122|     await db.workspaceMember.create({
       |     ^
    123|       data: {
    124|         userId: memberUser.id,
 ❯ src/__tests__/integration/api/chat-message.test.ts:248:26

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/2]⎯

 FAIL  src/__tests__/integration/api/chat-message.test.ts > POST /api/chat/message Integration Tests > Mock Service Integration > should fallback to mock service when Stakwork is not configured
AssertionError: expected "spy" to be called with arguments: [ …(2) ][90m

Received: 

[1m  1st spy call:

[22m[33m@@ -1,9 +1,9 @@[90m
[2m  [[22m
[32m-   "https://42ropx48.workspaces.sphinx.chat/api/mock",[90m
[32m-   ObjectContaining {[90m
[32m-     "body": StringContaining "test-task-1757004690453-0.03869839026003885",[90m
[31m+   "$POD_URL/api/mock",[90m
[31m+   {[90m
[31m+     "body": "{\"taskId\":\"test-task-1757004690453-0.03869839026003885\",\"message\":\"Test mock service\",\"userId\":\"test-user-1757004690449-0.7231266511933232\",\"artifacts\":[]}",[90m
[2m      "headers": {[22m
[2m        "Content-Type": "application/json",[22m
[2m      },[22m
[2m      "method": "POST",[22m
[2m    },[22m
[39m[90m

Number of calls: [1m1[22m
[39m
 ❯ src/__tests__/integration/api/chat-message.test.ts:577:25
    575|       // Verify mock service was called  
    576|       const expectedMockUrl = process.env.POD_URL ? `${process.env.POD…
    577|       expect(mockFetch).toHaveBeenCalledWith(
       |                         ^
    578|         expectedMockUrl,
    579|         expect.objectContaining({

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/2]⎯


 Test Files  1 failed (1)
      Tests  2 failed | 16 passed (18)
   Start at  16:51:26
   Duration  4.45s (transform 202ms, setup 166ms, collect 240ms, tests 3.47s, environment 0ms, prepare 405ms)

