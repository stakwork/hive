name: Security Audit

on:
  schedule:
    # Run security audit daily at 2 AM UTC
    - cron: '0 2 * * *'
  pull_request:
    branches:
      - "master"
  workflow_dispatch:

jobs:
  security-audit:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          npm audit --audit-level high --production
          npm audit --json --production > audit-results.json || true

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: npm-audit-results
          path: audit-results.json
          retention-days: 30

      - name: Check for high/critical vulnerabilities
        run: |
          HIGH_VULNS=$(npm audit --audit-level high --production --parseable 2>/dev/null | wc -l)
          if [ $HIGH_VULNS -gt 0 ]; then
            echo "::error::Found $HIGH_VULNS high/critical vulnerabilities"
            echo "Run 'npm audit fix' to address them"
            exit 1
          fi
          echo "No high/critical vulnerabilities found"

      - name: Comment on PR with audit results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const auditData = JSON.parse(fs.readFileSync('audit-results.json', 'utf8'));
              const vulnCount = auditData.metadata?.vulnerabilities || {};
              const total = Object.values(vulnCount).reduce((a, b) => a + b, 0);
              
              if (total > 0) {
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: `ðŸ”’ **Security Audit Results**\n\n` +
                        `Found ${total} total vulnerabilities:\n` +
                        `- Info: ${vulnCount.info || 0}\n` +
                        `- Low: ${vulnCount.low || 0}\n` +
                        `- Moderate: ${vulnCount.moderate || 0}\n` +
                        `- High: ${vulnCount.high || 0}\n` +
                        `- Critical: ${vulnCount.critical || 0}\n\n` +
                        `Run \`npm audit fix\` to address these issues.`
                });
              } else {
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: `âœ… **Security Audit Passed** - No vulnerabilities found in dependencies.`
                });
              }
            } catch (error) {
              console.log('Could not read audit results:', error);
            }