
> hive@0.1.0 test
> npm run test:unit && npm run test:integration


> hive@0.1.0 test:unit
> vitest run src/__tests__/unit


 RUN  v3.2.4 /workspaces/hive

 âœ“ src/__tests__/unit/helpers/workspace-member-queries.test.ts (17 tests) 14ms
 âœ“ src/__tests__/unit/utils.test.ts (8 tests) 93ms
 âœ“ src/__tests__/unit/lib/encryption/crypto.test.ts (4 tests) 80ms
 âœ“ src/__tests__/unit/lib/auth/workspace-resolver.test.ts (16 tests) 91ms
stdout | src/__tests__/unit/services/swarm-db.test.ts > saveOrUpdateSwarm - Password Encryption > encrypts password when creating new swarm
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/unit/services/swarm-db.test.ts > saveOrUpdateSwarm - Password Encryption > encrypts password when creating new swarm
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/unit/services/swarm-db.test.ts > saveOrUpdateSwarm - Password Encryption > encrypts password when creating new swarm
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_id", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."instance_type", "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."pool_name", "public"."swarms"."pool_api_key", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."repository_name", "public"."swarms"."default_branch", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_secret_alias", "public"."swarms"."environment_variables", "public"."swarms"."services", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."ingest_ref_id", "public"."swarms"."container_files", "public"."swarms"."swarm_password", "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE ("public"."swarms"."workspace_id" = $1 AND 1=1) LIMIT $2 OFFSET $3

 âœ“ src/__tests__/unit/lib/schemas/workspace.test.ts (15 tests) 26ms
stdout | src/__tests__/unit/services/swarm-db.test.ts > saveOrUpdateSwarm - Password Encryption > encrypts password when creating new swarm
[saveOrUpdateSwarm] Create data: {
  workspaceId: [32m'cmf5qv7nw0002uug6tu3yxnf5'[39m,
  name: [32m'test-swarm'[39m,
  instanceType: [32m'XL'[39m,
  environmentVariables: [],
  status: [32m'PENDING'[39m,
  swarmUrl: [1mnull[22m,
  repositoryName: [32m''[39m,
  repositoryDescription: [32m''[39m,
  repositoryUrl: [32m''[39m,
  swarmApiKey: [90mundefined[39m,
  swarmPassword: [32m'{"data":"R7EyvOQ2JsvaUFmpqvFiSzlY","iv":"l5hZDXYvnKUUcEo3Jnegng==","tag":"oIU7WTpnrHhYuwBwY1FgWA==","keyId":"k-test","version":"1","encryptedAt":"2025-09-04T18:33:22.336Z"}'[39m,
  poolName: [32m''[39m,
  poolCpu: [32m'2'[39m,
  poolMemory: [32m'4Gi'[39m,
  services: [],
  swarmSecretAlias: [32m''[39m,
  wizardStep: [90mundefined[39m,
  stepStatus: [90mundefined[39m,
  defaultBranch: [32m''[39m,
  wizardData: [90mundefined[39m
}

stdout | src/__tests__/unit/services/swarm-db.test.ts > saveOrUpdateSwarm - Password Encryption > encrypts password when creating new swarm
prisma:query INSERT INTO "public"."swarms" ("id","name","swarm_url","status","instance_type","created_at","updated_at","pool_name","pool_cpu","pool_memory","repository_name","default_branch","repository_description","repository_url","swarm_secret_alias","environment_variables","services","wizard_step","step_status","wizard_data","swarm_password","workspace_id") VALUES ($1,$2,$3,CAST($4::text AS "public"."SwarmStatus"),$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,CAST($18::text AS "public"."SwarmWizardStep"),CAST($19::text AS "public"."StepStatus"),$20,$21,$22) RETURNING "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."workspace_id", "public"."swarms"."instance_type", "public"."swarms"."repository_name", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_password", "public"."swarms"."pool_api_key", "public"."swarms"."pool_name", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."services", "public"."swarms"."swarm_secret_alias", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."swarm_id", "public"."swarms"."ingest_ref_id", "public"."swarms"."environment_variables", "public"."swarms"."container_files", "public"."swarms"."default_branch"

stdout | src/__tests__/unit/services/swarm-db.test.ts > saveOrUpdateSwarm - Password Encryption > encrypts password when creating new swarm
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/unit/services/swarm-db.test.ts > saveOrUpdateSwarm - Password Encryption > encrypts password when creating new swarm
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/unit/services/swarm-db.test.ts > saveOrUpdateSwarm - Password Encryption > encrypts password when creating new swarm
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/unit/services/swarm-db.test.ts > saveOrUpdateSwarm - Password Encryption > updates password when updating existing swarm
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/unit/services/swarm-db.test.ts > saveOrUpdateSwarm - Password Encryption > updates password when updating existing swarm
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/unit/services/swarm-db.test.ts > saveOrUpdateSwarm - Password Encryption > updates password when updating existing swarm
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_id", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."instance_type", "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."pool_name", "public"."swarms"."pool_api_key", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."repository_name", "public"."swarms"."default_branch", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_secret_alias", "public"."swarms"."environment_variables", "public"."swarms"."services", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."ingest_ref_id", "public"."swarms"."container_files", "public"."swarms"."swarm_password", "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE ("public"."swarms"."workspace_id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/unit/services/swarm-db.test.ts > saveOrUpdateSwarm - Password Encryption > updates password when updating existing swarm
[saveOrUpdateSwarm] Create data: {
  workspaceId: [32m'cmf5qv7tl0007uug6behi62o4'[39m,
  name: [32m'test-swarm'[39m,
  instanceType: [32m'XL'[39m,
  environmentVariables: [],
  status: [32m'PENDING'[39m,
  swarmUrl: [1mnull[22m,
  repositoryName: [32m''[39m,
  repositoryDescription: [32m''[39m,
  repositoryUrl: [32m''[39m,
  swarmApiKey: [90mundefined[39m,
  swarmPassword: [32m'{"data":"fNK0MQXYO+r7M7vB07s+x1C56A==","iv":"8Yl0FSNcPijvV012Tr/ZMw==","tag":"ijJEdXV4+TC4dDmcf3v+pw==","keyId":"k-test","version":"1","encryptedAt":"2025-09-04T18:33:22.526Z"}'[39m,
  poolName: [32m''[39m,
  poolCpu: [32m'2'[39m,
  poolMemory: [32m'4Gi'[39m,
  services: [],
  swarmSecretAlias: [32m''[39m,
  wizardStep: [90mundefined[39m,
  stepStatus: [90mundefined[39m,
  defaultBranch: [32m''[39m,
  wizardData: [90mundefined[39m
}

stdout | src/__tests__/unit/services/swarm-db.test.ts > saveOrUpdateSwarm - Password Encryption > updates password when updating existing swarm
prisma:query INSERT INTO "public"."swarms" ("id","name","swarm_url","status","instance_type","created_at","updated_at","pool_name","pool_cpu","pool_memory","repository_name","default_branch","repository_description","repository_url","swarm_secret_alias","environment_variables","services","wizard_step","step_status","wizard_data","swarm_password","workspace_id") VALUES ($1,$2,$3,CAST($4::text AS "public"."SwarmStatus"),$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,CAST($18::text AS "public"."SwarmWizardStep"),CAST($19::text AS "public"."StepStatus"),$20,$21,$22) RETURNING "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."workspace_id", "public"."swarms"."instance_type", "public"."swarms"."repository_name", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_password", "public"."swarms"."pool_api_key", "public"."swarms"."pool_name", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."services", "public"."swarms"."swarm_secret_alias", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."swarm_id", "public"."swarms"."ingest_ref_id", "public"."swarms"."environment_variables", "public"."swarms"."container_files", "public"."swarms"."default_branch"

 âœ“ src/__tests__/unit/services/workspace.test.ts (46 tests) 196ms
stdout | src/__tests__/unit/services/swarm-db.test.ts > saveOrUpdateSwarm - Password Encryption > updates password when updating existing swarm
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_id", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."instance_type", "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."pool_name", "public"."swarms"."pool_api_key", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."repository_name", "public"."swarms"."default_branch", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_secret_alias", "public"."swarms"."environment_variables", "public"."swarms"."services", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."ingest_ref_id", "public"."swarms"."container_files", "public"."swarms"."swarm_password", "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE ("public"."swarms"."workspace_id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/unit/services/swarm-db.test.ts > saveOrUpdateSwarm - Password Encryption > updates password when updating existing swarm
prisma:query UPDATE "public"."swarms" SET "swarm_password" = $1, "updated_at" = $2 WHERE ("public"."swarms"."workspace_id" = $3 AND 1=1) RETURNING "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."workspace_id", "public"."swarms"."instance_type", "public"."swarms"."repository_name", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_password", "public"."swarms"."pool_api_key", "public"."swarms"."pool_name", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."services", "public"."swarms"."swarm_secret_alias", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."swarm_id", "public"."swarms"."ingest_ref_id", "public"."swarms"."environment_variables", "public"."swarms"."container_files", "public"."swarms"."default_branch"

stdout | src/__tests__/unit/services/swarm-db.test.ts > saveOrUpdateSwarm - Password Encryption > updates password when updating existing swarm
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/unit/services/swarm-db.test.ts > saveOrUpdateSwarm - Password Encryption > updates password when updating existing swarm
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/unit/services/swarm-db.test.ts > saveOrUpdateSwarm - Password Encryption > updates password when updating existing swarm
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/unit/services/swarm-db.test.ts > saveOrUpdateSwarm - Password Encryption > does not modify password if not provided in update
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/unit/services/swarm-db.test.ts > saveOrUpdateSwarm - Password Encryption > does not modify password if not provided in update
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/unit/services/swarm-db.test.ts > saveOrUpdateSwarm - Password Encryption > does not modify password if not provided in update
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_id", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."instance_type", "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."pool_name", "public"."swarms"."pool_api_key", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."repository_name", "public"."swarms"."default_branch", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_secret_alias", "public"."swarms"."environment_variables", "public"."swarms"."services", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."ingest_ref_id", "public"."swarms"."container_files", "public"."swarms"."swarm_password", "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE ("public"."swarms"."workspace_id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/unit/services/swarm-db.test.ts > saveOrUpdateSwarm - Password Encryption > does not modify password if not provided in update
[saveOrUpdateSwarm] Create data: {
  workspaceId: [32m'cmf5qv7wf000cuug6zrwyymxa'[39m,
  name: [32m'test-swarm'[39m,
  instanceType: [32m'XL'[39m,
  environmentVariables: [],
  status: [32m'PENDING'[39m,
  swarmUrl: [1mnull[22m,
  repositoryName: [32m''[39m,
  repositoryDescription: [32m''[39m,
  repositoryUrl: [32m''[39m,
  swarmApiKey: [90mundefined[39m,
  swarmPassword: [32m'{"data":"yM3avJUnYO225dQ4njK9C3edE4I=","iv":"U4ueftfcL/8+62o8PP0jAg==","tag":"B0ZQIE6NBsriYr6EwtOZlA==","keyId":"k-test","version":"1","encryptedAt":"2025-09-04T18:33:22.627Z"}'[39m,
  poolName: [32m''[39m,
  poolCpu: [32m'2'[39m,
  poolMemory: [32m'4Gi'[39m,
  services: [],
  swarmSecretAlias: [32m''[39m,
  wizardStep: [90mundefined[39m,
  stepStatus: [90mundefined[39m,
  defaultBranch: [32m''[39m,
  wizardData: [90mundefined[39m
}

stdout | src/__tests__/unit/services/swarm-db.test.ts > saveOrUpdateSwarm - Password Encryption > does not modify password if not provided in update
prisma:query INSERT INTO "public"."swarms" ("id","name","swarm_url","status","instance_type","created_at","updated_at","pool_name","pool_cpu","pool_memory","repository_name","default_branch","repository_description","repository_url","swarm_secret_alias","environment_variables","services","wizard_step","step_status","wizard_data","swarm_password","workspace_id") VALUES ($1,$2,$3,CAST($4::text AS "public"."SwarmStatus"),$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,CAST($18::text AS "public"."SwarmWizardStep"),CAST($19::text AS "public"."StepStatus"),$20,$21,$22) RETURNING "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."workspace_id", "public"."swarms"."instance_type", "public"."swarms"."repository_name", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_password", "public"."swarms"."pool_api_key", "public"."swarms"."pool_name", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."services", "public"."swarms"."swarm_secret_alias", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."swarm_id", "public"."swarms"."ingest_ref_id", "public"."swarms"."environment_variables", "public"."swarms"."container_files", "public"."swarms"."default_branch"

stdout | src/__tests__/unit/services/swarm-db.test.ts > saveOrUpdateSwarm - Password Encryption > does not modify password if not provided in update
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_id", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."instance_type", "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."pool_name", "public"."swarms"."pool_api_key", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."repository_name", "public"."swarms"."default_branch", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_secret_alias", "public"."swarms"."environment_variables", "public"."swarms"."services", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."ingest_ref_id", "public"."swarms"."container_files", "public"."swarms"."swarm_password", "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE ("public"."swarms"."workspace_id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/unit/services/swarm-db.test.ts > saveOrUpdateSwarm - Password Encryption > does not modify password if not provided in update
prisma:query UPDATE "public"."swarms" SET "status" = CAST($1::text AS "public"."SwarmStatus"), "updated_at" = $2 WHERE ("public"."swarms"."workspace_id" = $3 AND 1=1) RETURNING "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."workspace_id", "public"."swarms"."instance_type", "public"."swarms"."repository_name", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_password", "public"."swarms"."pool_api_key", "public"."swarms"."pool_name", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."services", "public"."swarms"."swarm_secret_alias", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."swarm_id", "public"."swarms"."ingest_ref_id", "public"."swarms"."environment_variables", "public"."swarms"."container_files", "public"."swarms"."default_branch"

stdout | src/__tests__/unit/services/swarm-db.test.ts > saveOrUpdateSwarm - Password Encryption > does not modify password if not provided in update
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/unit/services/swarm-db.test.ts > saveOrUpdateSwarm - Password Encryption > does not modify password if not provided in update
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/unit/services/swarm-db.test.ts > saveOrUpdateSwarm - Password Encryption > does not modify password if not provided in update
prisma:query DELETE FROM "public"."users" WHERE 1=1

 âœ“ src/__tests__/unit/services/swarm-db.test.ts (3 tests) 680ms
   âœ“ saveOrUpdateSwarm - Password Encryption > encrypts password when creating new swarm  402ms
 âœ“ src/__tests__/unit/mappers/workspace-member.test.ts (10 tests) 11ms
 âœ“ src/__tests__/unit/lib/auth/roles.test.ts (19 tests) 96ms
 âœ“ src/__tests__/unit/lib/encryption/env-vars.test.ts (2 tests) 11ms
 âœ“ src/__tests__/unit/lib/utils/password.test.ts (11 tests) 84ms
 âœ“ src/__tests__/unit/randomPassword.test.ts (7 tests) 11ms
 âœ“ src/__tests__/unit/services/workspace-slug-validation.test.ts (36 tests) 92ms
 âœ“ src/__tests__/unit/lib/encryption/encryption-service.test.ts (3 tests) 80ms
 âœ“ src/__tests__/unit/regex-parsing.test.ts (2 tests) 4ms
 âœ“ src/__tests__/unit/services/janitor-cron.test.ts (2 tests) 44ms

 Test Files  16 passed (16)
      Tests  201 passed (201)
   Start at  18:33:19
   Duration  6.11s (transform 1.87s, setup 9.62s, collect 5.75s, tests 1.61s, environment 4ms, prepare 9.74s)


> hive@0.1.0 test:integration
> TEST_SUITE=integration vitest run src/__tests__/integration


 RUN  v3.2.4 /workspaces/hive

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query BEGIN

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query COMMIT

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query SELECT "public"."janitor_configs"."id", "public"."janitor_configs"."workspace_id", "public"."janitor_configs"."unit_tests_enabled", "public"."janitor_configs"."integration_tests_enabled", "public"."janitor_configs"."e2e_tests_enabled", "public"."janitor_configs"."created_at", "public"."janitor_configs"."updated_at" FROM "public"."janitor_configs" WHERE ("public"."janitor_configs"."workspace_id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query INSERT INTO "public"."janitor_configs" ("id","workspace_id","unit_tests_enabled","integration_tests_enabled","e2e_tests_enabled","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."janitor_configs"."id", "public"."janitor_configs"."workspace_id", "public"."janitor_configs"."unit_tests_enabled", "public"."janitor_configs"."integration_tests_enabled", "public"."janitor_configs"."e2e_tests_enabled", "public"."janitor_configs"."created_at", "public"."janitor_configs"."updated_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should get janitor config
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query BEGIN

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query COMMIT

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query SELECT "public"."janitor_configs"."id", "public"."janitor_configs"."workspace_id", "public"."janitor_configs"."unit_tests_enabled", "public"."janitor_configs"."integration_tests_enabled", "public"."janitor_configs"."e2e_tests_enabled", "public"."janitor_configs"."created_at", "public"."janitor_configs"."updated_at" FROM "public"."janitor_configs" WHERE ("public"."janitor_configs"."workspace_id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query INSERT INTO "public"."janitor_configs" ("id","workspace_id","unit_tests_enabled","integration_tests_enabled","e2e_tests_enabled","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."janitor_configs"."id", "public"."janitor_configs"."workspace_id", "public"."janitor_configs"."unit_tests_enabled", "public"."janitor_configs"."integration_tests_enabled", "public"."janitor_configs"."e2e_tests_enabled", "public"."janitor_configs"."created_at", "public"."janitor_configs"."updated_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query UPDATE "public"."janitor_configs" SET "unit_tests_enabled" = $1, "integration_tests_enabled" = $2, "updated_at" = $3 WHERE ("public"."janitor_configs"."id" = $4 AND 1=1) RETURNING "public"."janitor_configs"."id", "public"."janitor_configs"."workspace_id", "public"."janitor_configs"."unit_tests_enabled", "public"."janitor_configs"."integration_tests_enabled", "public"."janitor_configs"."e2e_tests_enabled", "public"."janitor_configs"."created_at", "public"."janitor_configs"."updated_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should update janitor config
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query BEGIN

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query COMMIT

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stderr | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
Error updating janitor config: Error: Insufficient permissions to perform this action
    at updateJanitorConfig [90m(/workspaces/hive/[39msrc/services/janitor.ts:58:11[90m)[39m
    at Module.PUT [90m(/workspaces/hive/[39msrc/app/api/workspaces/[slug]/janitors/config/route.ts:62:20[90m)[39m
    at [90m/workspaces/hive/[39msrc/__tests__/integration/api/janitors.test.ts:195:24
    at [90mfile:///workspaces/hive/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > PUT /api/workspaces/[slug]/janitors/config - should reject unauthorized user
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query BEGIN

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query COMMIT

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Configuration > GET /api/workspaces/[slug]/janitors/config - should reject unauthenticated user
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query BEGIN

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query COMMIT

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query INSERT INTO "public"."janitor_configs" ("id","workspace_id","unit_tests_enabled","integration_tests_enabled","e2e_tests_enabled","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."janitor_configs"."id", "public"."janitor_configs"."workspace_id", "public"."janitor_configs"."unit_tests_enabled", "public"."janitor_configs"."integration_tests_enabled", "public"."janitor_configs"."e2e_tests_enabled", "public"."janitor_configs"."created_at", "public"."janitor_configs"."updated_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query SELECT "public"."janitor_configs"."id", "public"."janitor_configs"."workspace_id", "public"."janitor_configs"."unit_tests_enabled", "public"."janitor_configs"."integration_tests_enabled", "public"."janitor_configs"."e2e_tests_enabled", "public"."janitor_configs"."created_at", "public"."janitor_configs"."updated_at" FROM "public"."janitor_configs" WHERE ("public"."janitor_configs"."workspace_id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query BEGIN

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query INSERT INTO "public"."janitor_runs" ("id","janitor_config_id","janitor_type","status","triggered_by","metadata","created_at","updated_at") VALUES ($1,$2,CAST($3::text AS "public"."JanitorType"),CAST($4::text AS "public"."JanitorStatus"),CAST($5::text AS "public"."JanitorTrigger"),$6,$7,$8) RETURNING "public"."janitor_runs"."id"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query SELECT "public"."janitor_runs"."id", "public"."janitor_runs"."janitor_config_id", "public"."janitor_runs"."janitor_type"::text, "public"."janitor_runs"."status"::text, "public"."janitor_runs"."triggered_by"::text, "public"."janitor_runs"."stakwork_project_id", "public"."janitor_runs"."started_at", "public"."janitor_runs"."completed_at", "public"."janitor_runs"."error", "public"."janitor_runs"."metadata", "public"."janitor_runs"."created_at", "public"."janitor_runs"."updated_at" FROM "public"."janitor_runs" WHERE "public"."janitor_runs"."id" = $1 LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query SELECT "public"."janitor_configs"."id", "public"."janitor_configs"."workspace_id", "public"."janitor_configs"."unit_tests_enabled", "public"."janitor_configs"."integration_tests_enabled", "public"."janitor_configs"."e2e_tests_enabled", "public"."janitor_configs"."created_at", "public"."janitor_configs"."updated_at" FROM "public"."janitor_configs" WHERE "public"."janitor_configs"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE "public"."workspaces"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."swarm_url", "public"."swarms"."swarm_secret_alias", "public"."swarms"."pool_name", "public"."swarms"."name", "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query COMMIT

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query BEGIN

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query UPDATE "public"."janitor_runs" SET "stakwork_project_id" = $1, "status" = CAST($2::text AS "public"."JanitorStatus"), "started_at" = $3, "updated_at" = $4 WHERE ("public"."janitor_runs"."id" = $5 AND 1=1) RETURNING "public"."janitor_runs"."id", "public"."janitor_runs"."janitor_config_id", "public"."janitor_runs"."janitor_type"::text, "public"."janitor_runs"."status"::text, "public"."janitor_runs"."triggered_by"::text, "public"."janitor_runs"."stakwork_project_id", "public"."janitor_runs"."started_at", "public"."janitor_runs"."completed_at", "public"."janitor_runs"."error", "public"."janitor_runs"."metadata", "public"."janitor_runs"."created_at", "public"."janitor_runs"."updated_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query SELECT "public"."janitor_runs"."id", "public"."janitor_runs"."janitor_config_id", "public"."janitor_runs"."janitor_type"::text, "public"."janitor_runs"."status"::text, "public"."janitor_runs"."triggered_by"::text, "public"."janitor_runs"."stakwork_project_id", "public"."janitor_runs"."started_at", "public"."janitor_runs"."completed_at", "public"."janitor_runs"."error", "public"."janitor_runs"."metadata", "public"."janitor_runs"."created_at", "public"."janitor_runs"."updated_at" FROM "public"."janitor_runs" WHERE "public"."janitor_runs"."id" = $1 LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query SELECT "public"."janitor_configs"."id", "public"."janitor_configs"."workspace_id", "public"."janitor_configs"."unit_tests_enabled", "public"."janitor_configs"."integration_tests_enabled", "public"."janitor_configs"."e2e_tests_enabled", "public"."janitor_configs"."created_at", "public"."janitor_configs"."updated_at" FROM "public"."janitor_configs" WHERE "public"."janitor_configs"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE "public"."workspaces"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."swarm_url", "public"."swarms"."swarm_secret_alias", "public"."swarms"."pool_name", "public"."swarms"."name", "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query COMMIT

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query SELECT "public"."janitor_runs"."id", "public"."janitor_runs"."janitor_config_id", "public"."janitor_runs"."janitor_type"::text, "public"."janitor_runs"."status"::text, "public"."janitor_runs"."triggered_by"::text, "public"."janitor_runs"."stakwork_project_id", "public"."janitor_runs"."started_at", "public"."janitor_runs"."completed_at", "public"."janitor_runs"."error", "public"."janitor_runs"."metadata", "public"."janitor_runs"."created_at", "public"."janitor_runs"."updated_at" FROM "public"."janitor_runs" LEFT JOIN "public"."janitor_configs" AS "j0" ON ("j0"."id") = ("public"."janitor_runs"."janitor_config_id") WHERE ("j0"."workspace_id" = $1 AND ("j0"."id" IS NOT NULL)) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should trigger janitor run when enabled
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query BEGIN

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query COMMIT

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query SELECT "public"."janitor_configs"."id", "public"."janitor_configs"."workspace_id", "public"."janitor_configs"."unit_tests_enabled", "public"."janitor_configs"."integration_tests_enabled", "public"."janitor_configs"."e2e_tests_enabled", "public"."janitor_configs"."created_at", "public"."janitor_configs"."updated_at" FROM "public"."janitor_configs" WHERE ("public"."janitor_configs"."workspace_id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query INSERT INTO "public"."janitor_configs" ("id","workspace_id","unit_tests_enabled","integration_tests_enabled","e2e_tests_enabled","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."janitor_configs"."id", "public"."janitor_configs"."workspace_id", "public"."janitor_configs"."unit_tests_enabled", "public"."janitor_configs"."integration_tests_enabled", "public"."janitor_configs"."e2e_tests_enabled", "public"."janitor_configs"."created_at", "public"."janitor_configs"."updated_at"

stderr | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
Error triggering janitor run: Error: This janitor type is not enabled
    at createJanitorRun [90m(/workspaces/hive/[39msrc/services/janitor.ts:114:11[90m)[39m
    at Module.POST [90m(/workspaces/hive/[39msrc/app/api/workspaces/[slug]/janitors/[type]/run/route.ts:21:17[90m)[39m
    at [90m/workspaces/hive/[39msrc/__tests__/integration/api/janitors.test.ts:279:24
    at [90mfile:///workspaces/hive/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject when janitor disabled
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query BEGIN

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query COMMIT

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stderr | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
Error triggering janitor run: Error: Invalid janitor type: invalid_type
    at createJanitorRun [90m(/workspaces/hive/[39msrc/services/janitor.ts:95:11[90m)[39m
    at Module.POST [90m(/workspaces/hive/[39msrc/app/api/workspaces/[slug]/janitors/[type]/run/route.ts:21:17[90m)[39m
    at [90m/workspaces/hive/[39msrc/__tests__/integration/api/janitors.test.ts:302:24
    at [90mfile:///workspaces/hive/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should reject invalid janitor type
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query BEGIN

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query COMMIT

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query INSERT INTO "public"."janitor_configs" ("id","workspace_id","unit_tests_enabled","integration_tests_enabled","e2e_tests_enabled","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."janitor_configs"."id", "public"."janitor_configs"."workspace_id", "public"."janitor_configs"."unit_tests_enabled", "public"."janitor_configs"."integration_tests_enabled", "public"."janitor_configs"."e2e_tests_enabled", "public"."janitor_configs"."created_at", "public"."janitor_configs"."updated_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query INSERT INTO "public"."janitor_runs" ("id","janitor_config_id","janitor_type","status","triggered_by","metadata","created_at","updated_at") VALUES ($1,$2,CAST($3::text AS "public"."JanitorType"),CAST($4::text AS "public"."JanitorStatus"),CAST($5::text AS "public"."JanitorTrigger"),$6,$7,$8) RETURNING "public"."janitor_runs"."id", "public"."janitor_runs"."janitor_config_id", "public"."janitor_runs"."janitor_type"::text, "public"."janitor_runs"."status"::text, "public"."janitor_runs"."triggered_by"::text, "public"."janitor_runs"."stakwork_project_id", "public"."janitor_runs"."started_at", "public"."janitor_runs"."completed_at", "public"."janitor_runs"."error", "public"."janitor_runs"."metadata", "public"."janitor_runs"."created_at", "public"."janitor_runs"."updated_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query SELECT "public"."janitor_configs"."id", "public"."janitor_configs"."workspace_id", "public"."janitor_configs"."unit_tests_enabled", "public"."janitor_configs"."integration_tests_enabled", "public"."janitor_configs"."e2e_tests_enabled", "public"."janitor_configs"."created_at", "public"."janitor_configs"."updated_at" FROM "public"."janitor_configs" WHERE ("public"."janitor_configs"."workspace_id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query BEGIN

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query INSERT INTO "public"."janitor_runs" ("id","janitor_config_id","janitor_type","status","triggered_by","metadata","created_at","updated_at") VALUES ($1,$2,CAST($3::text AS "public"."JanitorType"),CAST($4::text AS "public"."JanitorStatus"),CAST($5::text AS "public"."JanitorTrigger"),$6,$7,$8) RETURNING "public"."janitor_runs"."id"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query SELECT "public"."janitor_runs"."id", "public"."janitor_runs"."janitor_config_id", "public"."janitor_runs"."janitor_type"::text, "public"."janitor_runs"."status"::text, "public"."janitor_runs"."triggered_by"::text, "public"."janitor_runs"."stakwork_project_id", "public"."janitor_runs"."started_at", "public"."janitor_runs"."completed_at", "public"."janitor_runs"."error", "public"."janitor_runs"."metadata", "public"."janitor_runs"."created_at", "public"."janitor_runs"."updated_at" FROM "public"."janitor_runs" WHERE "public"."janitor_runs"."id" = $1 LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query SELECT "public"."janitor_configs"."id", "public"."janitor_configs"."workspace_id", "public"."janitor_configs"."unit_tests_enabled", "public"."janitor_configs"."integration_tests_enabled", "public"."janitor_configs"."e2e_tests_enabled", "public"."janitor_configs"."created_at", "public"."janitor_configs"."updated_at" FROM "public"."janitor_configs" WHERE "public"."janitor_configs"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE "public"."workspaces"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."swarm_url", "public"."swarms"."swarm_secret_alias", "public"."swarms"."pool_name", "public"."swarms"."name", "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query COMMIT

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query BEGIN

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query UPDATE "public"."janitor_runs" SET "stakwork_project_id" = $1, "status" = CAST($2::text AS "public"."JanitorStatus"), "started_at" = $3, "updated_at" = $4 WHERE ("public"."janitor_runs"."id" = $5 AND 1=1) RETURNING "public"."janitor_runs"."id", "public"."janitor_runs"."janitor_config_id", "public"."janitor_runs"."janitor_type"::text, "public"."janitor_runs"."status"::text, "public"."janitor_runs"."triggered_by"::text, "public"."janitor_runs"."stakwork_project_id", "public"."janitor_runs"."started_at", "public"."janitor_runs"."completed_at", "public"."janitor_runs"."error", "public"."janitor_runs"."metadata", "public"."janitor_runs"."created_at", "public"."janitor_runs"."updated_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query SELECT "public"."janitor_runs"."id", "public"."janitor_runs"."janitor_config_id", "public"."janitor_runs"."janitor_type"::text, "public"."janitor_runs"."status"::text, "public"."janitor_runs"."triggered_by"::text, "public"."janitor_runs"."stakwork_project_id", "public"."janitor_runs"."started_at", "public"."janitor_runs"."completed_at", "public"."janitor_runs"."error", "public"."janitor_runs"."metadata", "public"."janitor_runs"."created_at", "public"."janitor_runs"."updated_at" FROM "public"."janitor_runs" WHERE "public"."janitor_runs"."id" = $1 LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query SELECT "public"."janitor_configs"."id", "public"."janitor_configs"."workspace_id", "public"."janitor_configs"."unit_tests_enabled", "public"."janitor_configs"."integration_tests_enabled", "public"."janitor_configs"."e2e_tests_enabled", "public"."janitor_configs"."created_at", "public"."janitor_configs"."updated_at" FROM "public"."janitor_configs" WHERE "public"."janitor_configs"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE "public"."workspaces"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."swarm_url", "public"."swarms"."swarm_secret_alias", "public"."swarms"."pool_name", "public"."swarms"."name", "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query COMMIT

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Execution > POST /api/workspaces/[slug]/janitors/[type]/run - should allow concurrent runs
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query BEGIN

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query COMMIT

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query INSERT INTO "public"."janitor_configs" ("id","workspace_id","unit_tests_enabled","integration_tests_enabled","e2e_tests_enabled","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."janitor_configs"."id", "public"."janitor_configs"."workspace_id", "public"."janitor_configs"."unit_tests_enabled", "public"."janitor_configs"."integration_tests_enabled", "public"."janitor_configs"."e2e_tests_enabled", "public"."janitor_configs"."created_at", "public"."janitor_configs"."updated_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query BEGIN

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query INSERT INTO "public"."janitor_runs" ("id","janitor_config_id","janitor_type","status","triggered_by","metadata","created_at","updated_at") VALUES ($1,$2,CAST($3::text AS "public"."JanitorType"),CAST($4::text AS "public"."JanitorStatus"),CAST($5::text AS "public"."JanitorTrigger"),$6,$7,$8), ($9,$10,CAST($11::text AS "public"."JanitorType"),CAST($12::text AS "public"."JanitorStatus"),CAST($13::text AS "public"."JanitorTrigger"),$14,$15,$16)

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query COMMIT

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query SELECT "public"."janitor_configs"."id", "public"."janitor_configs"."workspace_id", "public"."janitor_configs"."unit_tests_enabled", "public"."janitor_configs"."integration_tests_enabled", "public"."janitor_configs"."e2e_tests_enabled", "public"."janitor_configs"."created_at", "public"."janitor_configs"."updated_at" FROM "public"."janitor_configs" WHERE ("public"."janitor_configs"."workspace_id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query SELECT "public"."janitor_runs"."id", "public"."janitor_runs"."janitor_config_id", "public"."janitor_runs"."janitor_type"::text, "public"."janitor_runs"."status"::text, "public"."janitor_runs"."triggered_by"::text, "public"."janitor_runs"."stakwork_project_id", "public"."janitor_runs"."started_at", "public"."janitor_runs"."completed_at", "public"."janitor_runs"."error", "public"."janitor_runs"."metadata", "public"."janitor_runs"."created_at", "public"."janitor_runs"."updated_at", COALESCE("aggr_selection_0_JanitorRecommendation"."_aggr_count_recommendations", 0) AS "_aggr_count_recommendations" FROM "public"."janitor_runs" LEFT JOIN (SELECT "public"."janitor_recommendations"."janitor_run_id", COUNT(*) AS "_aggr_count_recommendations" FROM "public"."janitor_recommendations" WHERE 1=1 GROUP BY "public"."janitor_recommendations"."janitor_run_id") AS "aggr_selection_0_JanitorRecommendation" ON ("public"."janitor_runs"."id" = "aggr_selection_0_JanitorRecommendation"."janitor_run_id") WHERE "public"."janitor_runs"."janitor_config_id" = $1 ORDER BY "public"."janitor_runs"."created_at" DESC LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."janitor_runs"."id" FROM "public"."janitor_runs" WHERE "public"."janitor_runs"."janitor_config_id" = $1 OFFSET $2) AS "sub"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should get runs with pagination
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query BEGIN

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query COMMIT

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query INSERT INTO "public"."janitor_configs" ("id","workspace_id","unit_tests_enabled","integration_tests_enabled","e2e_tests_enabled","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."janitor_configs"."id", "public"."janitor_configs"."workspace_id", "public"."janitor_configs"."unit_tests_enabled", "public"."janitor_configs"."integration_tests_enabled", "public"."janitor_configs"."e2e_tests_enabled", "public"."janitor_configs"."created_at", "public"."janitor_configs"."updated_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query BEGIN

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query INSERT INTO "public"."janitor_runs" ("id","janitor_config_id","janitor_type","status","triggered_by","metadata","created_at","updated_at") VALUES ($1,$2,CAST($3::text AS "public"."JanitorType"),CAST($4::text AS "public"."JanitorStatus"),CAST($5::text AS "public"."JanitorTrigger"),$6,$7,$8), ($9,$10,CAST($11::text AS "public"."JanitorType"),CAST($12::text AS "public"."JanitorStatus"),CAST($13::text AS "public"."JanitorTrigger"),$14,$15,$16)

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query COMMIT

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query SELECT "public"."janitor_configs"."id", "public"."janitor_configs"."workspace_id", "public"."janitor_configs"."unit_tests_enabled", "public"."janitor_configs"."integration_tests_enabled", "public"."janitor_configs"."e2e_tests_enabled", "public"."janitor_configs"."created_at", "public"."janitor_configs"."updated_at" FROM "public"."janitor_configs" WHERE ("public"."janitor_configs"."workspace_id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."janitor_runs"."id" FROM "public"."janitor_runs" WHERE ("public"."janitor_runs"."janitor_config_id" = $1 AND "public"."janitor_runs"."janitor_type" = CAST($2::text AS "public"."JanitorType")) OFFSET $3) AS "sub"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query SELECT "public"."janitor_runs"."id", "public"."janitor_runs"."janitor_config_id", "public"."janitor_runs"."janitor_type"::text, "public"."janitor_runs"."status"::text, "public"."janitor_runs"."triggered_by"::text, "public"."janitor_runs"."stakwork_project_id", "public"."janitor_runs"."started_at", "public"."janitor_runs"."completed_at", "public"."janitor_runs"."error", "public"."janitor_runs"."metadata", "public"."janitor_runs"."created_at", "public"."janitor_runs"."updated_at", COALESCE("aggr_selection_0_JanitorRecommendation"."_aggr_count_recommendations", 0) AS "_aggr_count_recommendations" FROM "public"."janitor_runs" LEFT JOIN (SELECT "public"."janitor_recommendations"."janitor_run_id", COUNT(*) AS "_aggr_count_recommendations" FROM "public"."janitor_recommendations" WHERE 1=1 GROUP BY "public"."janitor_recommendations"."janitor_run_id") AS "aggr_selection_0_JanitorRecommendation" ON ("public"."janitor_runs"."id" = "aggr_selection_0_JanitorRecommendation"."janitor_run_id") WHERE ("public"."janitor_runs"."janitor_config_id" = $1 AND "public"."janitor_runs"."janitor_type" = CAST($2::text AS "public"."JanitorType")) ORDER BY "public"."janitor_runs"."created_at" DESC LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Janitor Runs > GET /api/workspaces/[slug]/janitors/runs - should filter by janitor type
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query BEGIN

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query COMMIT

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query INSERT INTO "public"."janitor_configs" ("id","workspace_id","unit_tests_enabled","integration_tests_enabled","e2e_tests_enabled","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."janitor_configs"."id", "public"."janitor_configs"."workspace_id", "public"."janitor_configs"."unit_tests_enabled", "public"."janitor_configs"."integration_tests_enabled", "public"."janitor_configs"."e2e_tests_enabled", "public"."janitor_configs"."created_at", "public"."janitor_configs"."updated_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query INSERT INTO "public"."janitor_runs" ("id","janitor_config_id","janitor_type","status","triggered_by","stakwork_project_id","metadata","created_at","updated_at") VALUES ($1,$2,CAST($3::text AS "public"."JanitorType"),CAST($4::text AS "public"."JanitorStatus"),CAST($5::text AS "public"."JanitorTrigger"),$6,$7,$8,$9) RETURNING "public"."janitor_runs"."id", "public"."janitor_runs"."janitor_config_id", "public"."janitor_runs"."janitor_type"::text, "public"."janitor_runs"."status"::text, "public"."janitor_runs"."triggered_by"::text, "public"."janitor_runs"."stakwork_project_id", "public"."janitor_runs"."started_at", "public"."janitor_runs"."completed_at", "public"."janitor_runs"."error", "public"."janitor_runs"."metadata", "public"."janitor_runs"."created_at", "public"."janitor_runs"."updated_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query BEGIN

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query UPDATE "public"."janitor_runs" SET "status" = CAST($1::text AS "public"."JanitorStatus"), "completed_at" = $2, "updated_at" = $3 WHERE ("public"."janitor_runs"."stakwork_project_id" = $4 AND "public"."janitor_runs"."status" IN (CAST($5::text AS "public"."JanitorStatus"),CAST($6::text AS "public"."JanitorStatus")))

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query COMMIT

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query SELECT "public"."janitor_runs"."id", "public"."janitor_runs"."janitor_config_id", "public"."janitor_runs"."janitor_type"::text, "public"."janitor_runs"."status"::text, "public"."janitor_runs"."triggered_by"::text, "public"."janitor_runs"."stakwork_project_id", "public"."janitor_runs"."started_at", "public"."janitor_runs"."completed_at", "public"."janitor_runs"."error", "public"."janitor_runs"."metadata", "public"."janitor_runs"."created_at", "public"."janitor_runs"."updated_at" FROM "public"."janitor_runs" WHERE ("public"."janitor_runs"."stakwork_project_id" = $1 AND "public"."janitor_runs"."status" = CAST($2::text AS "public"."JanitorStatus")) ORDER BY "public"."janitor_runs"."updated_at" DESC LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query SELECT "public"."janitor_configs"."id", "public"."janitor_configs"."workspace_id", "public"."janitor_configs"."unit_tests_enabled", "public"."janitor_configs"."integration_tests_enabled", "public"."janitor_configs"."e2e_tests_enabled", "public"."janitor_configs"."created_at", "public"."janitor_configs"."updated_at" FROM "public"."janitor_configs" WHERE "public"."janitor_configs"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE "public"."workspaces"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."swarm_url", "public"."swarms"."swarm_secret_alias", "public"."swarms"."pool_name", "public"."swarms"."name", "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query BEGIN

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query UPDATE "public"."janitor_runs" SET "metadata" = $1, "updated_at" = $2 WHERE ("public"."janitor_runs"."id" = $3 AND 1=1) RETURNING "public"."janitor_runs"."id", "public"."janitor_runs"."janitor_config_id", "public"."janitor_runs"."janitor_type"::text, "public"."janitor_runs"."status"::text, "public"."janitor_runs"."triggered_by"::text, "public"."janitor_runs"."stakwork_project_id", "public"."janitor_runs"."started_at", "public"."janitor_runs"."completed_at", "public"."janitor_runs"."error", "public"."janitor_runs"."metadata", "public"."janitor_runs"."created_at", "public"."janitor_runs"."updated_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query INSERT INTO "public"."janitor_recommendations" ("id","janitor_run_id","title","description","priority","impact","status","metadata","created_at","updated_at") VALUES ($1,$2,$3,$4,CAST($5::text AS "public"."Priority"),$6,CAST($7::text AS "public"."RecommendationStatus"),$8,$9,$10)

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query COMMIT

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."janitor_recommendations"."id" FROM "public"."janitor_recommendations" LEFT JOIN "public"."janitor_runs" AS "j0" ON ("j0"."id") = ("public"."janitor_recommendations"."janitor_run_id") LEFT JOIN "public"."janitor_configs" AS "j1" ON ("j1"."id") = ("j0"."janitor_config_id") WHERE (("j1"."workspace_id" = $1 AND ("j1"."id" IS NOT NULL) AND ("j0"."id" IS NOT NULL)) AND "public"."janitor_recommendations"."status" = CAST($2::text AS "public"."RecommendationStatus")) OFFSET $3) AS "sub"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
Janitor run cmf5qvdtj002fuuquecvtvoom processed: COMPLETED with 1 recommendations

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query SELECT "public"."janitor_runs"."id", "public"."janitor_runs"."janitor_config_id", "public"."janitor_runs"."janitor_type"::text, "public"."janitor_runs"."status"::text, "public"."janitor_runs"."triggered_by"::text, "public"."janitor_runs"."stakwork_project_id", "public"."janitor_runs"."started_at", "public"."janitor_runs"."completed_at", "public"."janitor_runs"."error", "public"."janitor_runs"."metadata", "public"."janitor_runs"."created_at", "public"."janitor_runs"."updated_at" FROM "public"."janitor_runs" WHERE ("public"."janitor_runs"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query SELECT "public"."janitor_recommendations"."id", "public"."janitor_recommendations"."janitor_run_id", "public"."janitor_recommendations"."title", "public"."janitor_recommendations"."description", "public"."janitor_recommendations"."priority"::text, "public"."janitor_recommendations"."impact", "public"."janitor_recommendations"."status"::text, "public"."janitor_recommendations"."accepted_at", "public"."janitor_recommendations"."dismissed_at", "public"."janitor_recommendations"."accepted_by_id", "public"."janitor_recommendations"."dismissed_by_id", "public"."janitor_recommendations"."metadata", "public"."janitor_recommendations"."created_at", "public"."janitor_recommendations"."updated_at" FROM "public"."janitor_recommendations" WHERE "public"."janitor_recommendations"."janitor_run_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query BEGIN

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query COMMIT

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query INSERT INTO "public"."janitor_configs" ("id","workspace_id","unit_tests_enabled","integration_tests_enabled","e2e_tests_enabled","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."janitor_configs"."id", "public"."janitor_configs"."workspace_id", "public"."janitor_configs"."unit_tests_enabled", "public"."janitor_configs"."integration_tests_enabled", "public"."janitor_configs"."e2e_tests_enabled", "public"."janitor_configs"."created_at", "public"."janitor_configs"."updated_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query INSERT INTO "public"."janitor_runs" ("id","janitor_config_id","janitor_type","status","triggered_by","stakwork_project_id","metadata","created_at","updated_at") VALUES ($1,$2,CAST($3::text AS "public"."JanitorType"),CAST($4::text AS "public"."JanitorStatus"),CAST($5::text AS "public"."JanitorTrigger"),$6,$7,$8,$9) RETURNING "public"."janitor_runs"."id", "public"."janitor_runs"."janitor_config_id", "public"."janitor_runs"."janitor_type"::text, "public"."janitor_runs"."status"::text, "public"."janitor_runs"."triggered_by"::text, "public"."janitor_runs"."stakwork_project_id", "public"."janitor_runs"."started_at", "public"."janitor_runs"."completed_at", "public"."janitor_runs"."error", "public"."janitor_runs"."metadata", "public"."janitor_runs"."created_at", "public"."janitor_runs"."updated_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query BEGIN

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query UPDATE "public"."janitor_runs" SET "status" = CAST($1::text AS "public"."JanitorStatus"), "completed_at" = $2, "error" = $3, "updated_at" = $4 WHERE ("public"."janitor_runs"."stakwork_project_id" = $5 AND "public"."janitor_runs"."status" IN (CAST($6::text AS "public"."JanitorStatus"),CAST($7::text AS "public"."JanitorStatus")))

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query COMMIT

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query SELECT "public"."janitor_runs"."id", "public"."janitor_runs"."janitor_config_id", "public"."janitor_runs"."janitor_type"::text, "public"."janitor_runs"."status"::text, "public"."janitor_runs"."triggered_by"::text, "public"."janitor_runs"."stakwork_project_id", "public"."janitor_runs"."started_at", "public"."janitor_runs"."completed_at", "public"."janitor_runs"."error", "public"."janitor_runs"."metadata", "public"."janitor_runs"."created_at", "public"."janitor_runs"."updated_at" FROM "public"."janitor_runs" WHERE ("public"."janitor_runs"."stakwork_project_id" = $1 AND "public"."janitor_runs"."status" = CAST($2::text AS "public"."JanitorStatus")) ORDER BY "public"."janitor_runs"."updated_at" DESC LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query SELECT "public"."janitor_configs"."id", "public"."janitor_configs"."workspace_id", "public"."janitor_configs"."unit_tests_enabled", "public"."janitor_configs"."integration_tests_enabled", "public"."janitor_configs"."e2e_tests_enabled", "public"."janitor_configs"."created_at", "public"."janitor_configs"."updated_at" FROM "public"."janitor_configs" WHERE "public"."janitor_configs"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."slug" FROM "public"."workspaces" WHERE "public"."workspaces"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query UPDATE "public"."janitor_runs" SET "metadata" = $1, "updated_at" = $2 WHERE ("public"."janitor_runs"."id" = $3 AND 1=1) RETURNING "public"."janitor_runs"."id", "public"."janitor_runs"."janitor_config_id", "public"."janitor_runs"."janitor_type"::text, "public"."janitor_runs"."status"::text, "public"."janitor_runs"."triggered_by"::text, "public"."janitor_runs"."stakwork_project_id", "public"."janitor_runs"."started_at", "public"."janitor_runs"."completed_at", "public"."janitor_runs"."error", "public"."janitor_runs"."metadata", "public"."janitor_runs"."created_at", "public"."janitor_runs"."updated_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
Janitor run cmf5qve3q002ouuqukb0y8kbk processed: FAILED

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query SELECT "public"."janitor_runs"."id", "public"."janitor_runs"."janitor_config_id", "public"."janitor_runs"."janitor_type"::text, "public"."janitor_runs"."status"::text, "public"."janitor_runs"."triggered_by"::text, "public"."janitor_runs"."stakwork_project_id", "public"."janitor_runs"."started_at", "public"."janitor_runs"."completed_at", "public"."janitor_runs"."error", "public"."janitor_runs"."metadata", "public"."janitor_runs"."created_at", "public"."janitor_runs"."updated_at" FROM "public"."janitor_runs" WHERE ("public"."janitor_runs"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should handle failed webhook
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query BEGIN

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query UPDATE "public"."janitor_runs" SET "status" = CAST($1::text AS "public"."JanitorStatus"), "completed_at" = $2, "updated_at" = $3 WHERE ("public"."janitor_runs"."stakwork_project_id" = $4 AND "public"."janitor_runs"."status" IN (CAST($5::text AS "public"."JanitorStatus"),CAST($6::text AS "public"."JanitorStatus")))

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query COMMIT

stderr | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
Error processing janitor webhook: Error: Janitor run not found
    at processJanitorWebhook [90m(/workspaces/hive/[39msrc/services/janitor.ts:623:13[90m)[39m
    at Module.POST [90m(/workspaces/hive/[39msrc/app/api/janitors/webhook/route.ts:26:20[90m)[39m
    at [90m/workspaces/hive/[39msrc/__tests__/integration/api/janitors.test.ts:574:24
    at [90mfile:///workspaces/hive/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should return 404 for unknown project
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query BEGIN

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query COMMIT

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query INSERT INTO "public"."janitor_configs" ("id","workspace_id","unit_tests_enabled","integration_tests_enabled","e2e_tests_enabled","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."janitor_configs"."id", "public"."janitor_configs"."workspace_id", "public"."janitor_configs"."unit_tests_enabled", "public"."janitor_configs"."integration_tests_enabled", "public"."janitor_configs"."e2e_tests_enabled", "public"."janitor_configs"."created_at", "public"."janitor_configs"."updated_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query INSERT INTO "public"."janitor_runs" ("id","janitor_config_id","janitor_type","status","triggered_by","metadata","created_at","updated_at") VALUES ($1,$2,CAST($3::text AS "public"."JanitorType"),CAST($4::text AS "public"."JanitorStatus"),CAST($5::text AS "public"."JanitorTrigger"),$6,$7,$8) RETURNING "public"."janitor_runs"."id", "public"."janitor_runs"."janitor_config_id", "public"."janitor_runs"."janitor_type"::text, "public"."janitor_runs"."status"::text, "public"."janitor_runs"."triggered_by"::text, "public"."janitor_runs"."stakwork_project_id", "public"."janitor_runs"."started_at", "public"."janitor_runs"."completed_at", "public"."janitor_runs"."error", "public"."janitor_runs"."metadata", "public"."janitor_runs"."created_at", "public"."janitor_runs"."updated_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query BEGIN

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query INSERT INTO "public"."janitor_recommendations" ("id","janitor_run_id","title","description","priority","status","accepted_at","accepted_by_id","metadata","created_at","updated_at") VALUES ($1,$2,$3,$4,CAST($5::text AS "public"."Priority"),CAST($6::text AS "public"."RecommendationStatus"),null,null,$7,$8,$9), ($10,$11,$12,$13,CAST($14::text AS "public"."Priority"),CAST($15::text AS "public"."RecommendationStatus"),$16,$17,$18,$19,$20)

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query COMMIT

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query SELECT "public"."janitor_configs"."id", "public"."janitor_configs"."workspace_id", "public"."janitor_configs"."unit_tests_enabled", "public"."janitor_configs"."integration_tests_enabled", "public"."janitor_configs"."e2e_tests_enabled", "public"."janitor_configs"."created_at", "public"."janitor_configs"."updated_at" FROM "public"."janitor_configs" WHERE ("public"."janitor_configs"."workspace_id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."janitor_recommendations"."id" FROM "public"."janitor_recommendations" LEFT JOIN "public"."janitor_runs" AS "j0" ON ("j0"."id") = ("public"."janitor_recommendations"."janitor_run_id") WHERE (("j0"."janitor_config_id" = $1 AND ("j0"."id" IS NOT NULL)) AND "public"."janitor_recommendations"."status" = CAST($2::text AS "public"."RecommendationStatus")) OFFSET $3) AS "sub"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query SELECT "public"."janitor_recommendations"."id", "public"."janitor_recommendations"."janitor_run_id", "public"."janitor_recommendations"."title", "public"."janitor_recommendations"."description", "public"."janitor_recommendations"."priority"::text, "public"."janitor_recommendations"."impact", "public"."janitor_recommendations"."status"::text, "public"."janitor_recommendations"."accepted_at", "public"."janitor_recommendations"."dismissed_at", "public"."janitor_recommendations"."accepted_by_id", "public"."janitor_recommendations"."dismissed_by_id", "public"."janitor_recommendations"."metadata", "public"."janitor_recommendations"."created_at", "public"."janitor_recommendations"."updated_at" FROM "public"."janitor_recommendations" LEFT JOIN "public"."janitor_runs" AS "j0" ON ("j0"."id") = ("public"."janitor_recommendations"."janitor_run_id") WHERE (("j0"."janitor_config_id" = $1 AND ("j0"."id" IS NOT NULL)) AND "public"."janitor_recommendations"."status" = CAST($2::text AS "public"."RecommendationStatus")) ORDER BY "public"."janitor_recommendations"."status" ASC, "public"."janitor_recommendations"."priority" DESC, "public"."janitor_recommendations"."created_at" DESC LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query SELECT "public"."janitor_runs"."id", "public"."janitor_runs"."janitor_type"::text, "public"."janitor_runs"."status"::text, "public"."janitor_runs"."created_at" FROM "public"."janitor_runs" WHERE "public"."janitor_runs"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should get recommendations with pagination
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query BEGIN

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query COMMIT

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query INSERT INTO "public"."janitor_configs" ("id","workspace_id","unit_tests_enabled","integration_tests_enabled","e2e_tests_enabled","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."janitor_configs"."id", "public"."janitor_configs"."workspace_id", "public"."janitor_configs"."unit_tests_enabled", "public"."janitor_configs"."integration_tests_enabled", "public"."janitor_configs"."e2e_tests_enabled", "public"."janitor_configs"."created_at", "public"."janitor_configs"."updated_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query INSERT INTO "public"."janitor_runs" ("id","janitor_config_id","janitor_type","status","triggered_by","metadata","created_at","updated_at") VALUES ($1,$2,CAST($3::text AS "public"."JanitorType"),CAST($4::text AS "public"."JanitorStatus"),CAST($5::text AS "public"."JanitorTrigger"),$6,$7,$8) RETURNING "public"."janitor_runs"."id", "public"."janitor_runs"."janitor_config_id", "public"."janitor_runs"."janitor_type"::text, "public"."janitor_runs"."status"::text, "public"."janitor_runs"."triggered_by"::text, "public"."janitor_runs"."stakwork_project_id", "public"."janitor_runs"."started_at", "public"."janitor_runs"."completed_at", "public"."janitor_runs"."error", "public"."janitor_runs"."metadata", "public"."janitor_runs"."created_at", "public"."janitor_runs"."updated_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query BEGIN

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query INSERT INTO "public"."janitor_recommendations" ("id","janitor_run_id","title","description","priority","status","accepted_at","accepted_by_id","metadata","created_at","updated_at") VALUES ($1,$2,$3,$4,CAST($5::text AS "public"."Priority"),CAST($6::text AS "public"."RecommendationStatus"),null,null,$7,$8,$9), ($10,$11,$12,$13,CAST($14::text AS "public"."Priority"),CAST($15::text AS "public"."RecommendationStatus"),$16,$17,$18,$19,$20)

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query COMMIT

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query SELECT "public"."janitor_configs"."id", "public"."janitor_configs"."workspace_id", "public"."janitor_configs"."unit_tests_enabled", "public"."janitor_configs"."integration_tests_enabled", "public"."janitor_configs"."e2e_tests_enabled", "public"."janitor_configs"."created_at", "public"."janitor_configs"."updated_at" FROM "public"."janitor_configs" WHERE ("public"."janitor_configs"."workspace_id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."janitor_recommendations"."id" FROM "public"."janitor_recommendations" LEFT JOIN "public"."janitor_runs" AS "j0" ON ("j0"."id") = ("public"."janitor_recommendations"."janitor_run_id") WHERE (("j0"."janitor_config_id" = $1 AND ("j0"."id" IS NOT NULL)) AND "public"."janitor_recommendations"."status" = CAST($2::text AS "public"."RecommendationStatus")) OFFSET $3) AS "sub"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query SELECT "public"."janitor_recommendations"."id", "public"."janitor_recommendations"."janitor_run_id", "public"."janitor_recommendations"."title", "public"."janitor_recommendations"."description", "public"."janitor_recommendations"."priority"::text, "public"."janitor_recommendations"."impact", "public"."janitor_recommendations"."status"::text, "public"."janitor_recommendations"."accepted_at", "public"."janitor_recommendations"."dismissed_at", "public"."janitor_recommendations"."accepted_by_id", "public"."janitor_recommendations"."dismissed_by_id", "public"."janitor_recommendations"."metadata", "public"."janitor_recommendations"."created_at", "public"."janitor_recommendations"."updated_at" FROM "public"."janitor_recommendations" LEFT JOIN "public"."janitor_runs" AS "j0" ON ("j0"."id") = ("public"."janitor_recommendations"."janitor_run_id") WHERE (("j0"."janitor_config_id" = $1 AND ("j0"."id" IS NOT NULL)) AND "public"."janitor_recommendations"."status" = CAST($2::text AS "public"."RecommendationStatus")) ORDER BY "public"."janitor_recommendations"."status" ASC, "public"."janitor_recommendations"."priority" DESC, "public"."janitor_recommendations"."created_at" DESC LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query SELECT "public"."janitor_runs"."id", "public"."janitor_runs"."janitor_type"::text, "public"."janitor_runs"."status"::text, "public"."janitor_runs"."created_at" FROM "public"."janitor_runs" WHERE "public"."janitor_runs"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by status
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query BEGIN

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query COMMIT

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query INSERT INTO "public"."janitor_configs" ("id","workspace_id","unit_tests_enabled","integration_tests_enabled","e2e_tests_enabled","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."janitor_configs"."id", "public"."janitor_configs"."workspace_id", "public"."janitor_configs"."unit_tests_enabled", "public"."janitor_configs"."integration_tests_enabled", "public"."janitor_configs"."e2e_tests_enabled", "public"."janitor_configs"."created_at", "public"."janitor_configs"."updated_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query INSERT INTO "public"."janitor_runs" ("id","janitor_config_id","janitor_type","status","triggered_by","metadata","created_at","updated_at") VALUES ($1,$2,CAST($3::text AS "public"."JanitorType"),CAST($4::text AS "public"."JanitorStatus"),CAST($5::text AS "public"."JanitorTrigger"),$6,$7,$8) RETURNING "public"."janitor_runs"."id", "public"."janitor_runs"."janitor_config_id", "public"."janitor_runs"."janitor_type"::text, "public"."janitor_runs"."status"::text, "public"."janitor_runs"."triggered_by"::text, "public"."janitor_runs"."stakwork_project_id", "public"."janitor_runs"."started_at", "public"."janitor_runs"."completed_at", "public"."janitor_runs"."error", "public"."janitor_runs"."metadata", "public"."janitor_runs"."created_at", "public"."janitor_runs"."updated_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query BEGIN

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query INSERT INTO "public"."janitor_recommendations" ("id","janitor_run_id","title","description","priority","status","metadata","created_at","updated_at") VALUES ($1,$2,$3,$4,CAST($5::text AS "public"."Priority"),CAST($6::text AS "public"."RecommendationStatus"),$7,$8,$9), ($10,$11,$12,$13,CAST($14::text AS "public"."Priority"),CAST($15::text AS "public"."RecommendationStatus"),$16,$17,$18)

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query COMMIT

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query SELECT "public"."janitor_configs"."id", "public"."janitor_configs"."workspace_id", "public"."janitor_configs"."unit_tests_enabled", "public"."janitor_configs"."integration_tests_enabled", "public"."janitor_configs"."e2e_tests_enabled", "public"."janitor_configs"."created_at", "public"."janitor_configs"."updated_at" FROM "public"."janitor_configs" WHERE ("public"."janitor_configs"."workspace_id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."janitor_recommendations"."id" FROM "public"."janitor_recommendations" LEFT JOIN "public"."janitor_runs" AS "j0" ON ("j0"."id") = ("public"."janitor_recommendations"."janitor_run_id") WHERE (("j0"."janitor_config_id" = $1 AND ("j0"."id" IS NOT NULL)) AND "public"."janitor_recommendations"."status" = CAST($2::text AS "public"."RecommendationStatus") AND "public"."janitor_recommendations"."priority" = CAST($3::text AS "public"."Priority")) OFFSET $4) AS "sub"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query SELECT "public"."janitor_recommendations"."id", "public"."janitor_recommendations"."janitor_run_id", "public"."janitor_recommendations"."title", "public"."janitor_recommendations"."description", "public"."janitor_recommendations"."priority"::text, "public"."janitor_recommendations"."impact", "public"."janitor_recommendations"."status"::text, "public"."janitor_recommendations"."accepted_at", "public"."janitor_recommendations"."dismissed_at", "public"."janitor_recommendations"."accepted_by_id", "public"."janitor_recommendations"."dismissed_by_id", "public"."janitor_recommendations"."metadata", "public"."janitor_recommendations"."created_at", "public"."janitor_recommendations"."updated_at" FROM "public"."janitor_recommendations" LEFT JOIN "public"."janitor_runs" AS "j0" ON ("j0"."id") = ("public"."janitor_recommendations"."janitor_run_id") WHERE (("j0"."janitor_config_id" = $1 AND ("j0"."id" IS NOT NULL)) AND "public"."janitor_recommendations"."status" = CAST($2::text AS "public"."RecommendationStatus") AND "public"."janitor_recommendations"."priority" = CAST($3::text AS "public"."Priority")) ORDER BY "public"."janitor_recommendations"."status" ASC, "public"."janitor_recommendations"."priority" DESC, "public"."janitor_recommendations"."created_at" DESC LIMIT $4 OFFSET $5

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query SELECT "public"."janitor_runs"."id", "public"."janitor_runs"."janitor_type"::text, "public"."janitor_runs"."status"::text, "public"."janitor_runs"."created_at" FROM "public"."janitor_runs" WHERE "public"."janitor_runs"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should filter by priority
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query BEGIN

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query COMMIT

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query SELECT "public"."janitor_configs"."id", "public"."janitor_configs"."workspace_id", "public"."janitor_configs"."unit_tests_enabled", "public"."janitor_configs"."integration_tests_enabled", "public"."janitor_configs"."e2e_tests_enabled", "public"."janitor_configs"."created_at", "public"."janitor_configs"."updated_at" FROM "public"."janitor_configs" WHERE ("public"."janitor_configs"."workspace_id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should return empty array when no janitor config exists
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query BEGIN

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query COMMIT

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > GET /api/workspaces/[slug]/janitors/recommendations - should reject unauthorized user
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query BEGIN

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query COMMIT

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query INSERT INTO "public"."janitor_configs" ("id","workspace_id","unit_tests_enabled","integration_tests_enabled","e2e_tests_enabled","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."janitor_configs"."id", "public"."janitor_configs"."workspace_id", "public"."janitor_configs"."unit_tests_enabled", "public"."janitor_configs"."integration_tests_enabled", "public"."janitor_configs"."e2e_tests_enabled", "public"."janitor_configs"."created_at", "public"."janitor_configs"."updated_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query INSERT INTO "public"."janitor_runs" ("id","janitor_config_id","janitor_type","status","triggered_by","metadata","created_at","updated_at") VALUES ($1,$2,CAST($3::text AS "public"."JanitorType"),CAST($4::text AS "public"."JanitorStatus"),CAST($5::text AS "public"."JanitorTrigger"),$6,$7,$8) RETURNING "public"."janitor_runs"."id", "public"."janitor_runs"."janitor_config_id", "public"."janitor_runs"."janitor_type"::text, "public"."janitor_runs"."status"::text, "public"."janitor_runs"."triggered_by"::text, "public"."janitor_runs"."stakwork_project_id", "public"."janitor_runs"."started_at", "public"."janitor_runs"."completed_at", "public"."janitor_runs"."error", "public"."janitor_runs"."metadata", "public"."janitor_runs"."created_at", "public"."janitor_runs"."updated_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query INSERT INTO "public"."janitor_recommendations" ("id","janitor_run_id","title","description","priority","status","metadata","created_at","updated_at") VALUES ($1,$2,$3,$4,CAST($5::text AS "public"."Priority"),CAST($6::text AS "public"."RecommendationStatus"),$7,$8,$9) RETURNING "public"."janitor_recommendations"."id", "public"."janitor_recommendations"."janitor_run_id", "public"."janitor_recommendations"."title", "public"."janitor_recommendations"."description", "public"."janitor_recommendations"."priority"::text, "public"."janitor_recommendations"."impact", "public"."janitor_recommendations"."status"::text, "public"."janitor_recommendations"."accepted_at", "public"."janitor_recommendations"."dismissed_at", "public"."janitor_recommendations"."accepted_by_id", "public"."janitor_recommendations"."dismissed_by_id", "public"."janitor_recommendations"."metadata", "public"."janitor_recommendations"."created_at", "public"."janitor_recommendations"."updated_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
Accept route called

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
Session user ID: user-1757010810941-0.8286655628852979

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query SELECT "public"."janitor_recommendations"."id", "public"."janitor_recommendations"."janitor_run_id", "public"."janitor_recommendations"."title", "public"."janitor_recommendations"."description", "public"."janitor_recommendations"."priority"::text, "public"."janitor_recommendations"."impact", "public"."janitor_recommendations"."status"::text, "public"."janitor_recommendations"."accepted_at", "public"."janitor_recommendations"."dismissed_at", "public"."janitor_recommendations"."accepted_by_id", "public"."janitor_recommendations"."dismissed_by_id", "public"."janitor_recommendations"."metadata", "public"."janitor_recommendations"."created_at", "public"."janitor_recommendations"."updated_at" FROM "public"."janitor_recommendations" WHERE ("public"."janitor_recommendations"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query SELECT "public"."janitor_runs"."id", "public"."janitor_runs"."janitor_config_id", "public"."janitor_runs"."janitor_type"::text, "public"."janitor_runs"."status"::text, "public"."janitor_runs"."triggered_by"::text, "public"."janitor_runs"."stakwork_project_id", "public"."janitor_runs"."started_at", "public"."janitor_runs"."completed_at", "public"."janitor_runs"."error", "public"."janitor_runs"."metadata", "public"."janitor_runs"."created_at", "public"."janitor_runs"."updated_at" FROM "public"."janitor_runs" WHERE "public"."janitor_runs"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query SELECT "public"."janitor_configs"."id", "public"."janitor_configs"."workspace_id", "public"."janitor_configs"."unit_tests_enabled", "public"."janitor_configs"."integration_tests_enabled", "public"."janitor_configs"."e2e_tests_enabled", "public"."janitor_configs"."created_at", "public"."janitor_configs"."updated_at" FROM "public"."janitor_configs" WHERE "public"."janitor_configs"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE "public"."workspaces"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query UPDATE "public"."janitor_recommendations" SET "status" = CAST($1::text AS "public"."RecommendationStatus"), "accepted_at" = $2, "accepted_by_id" = $3, "metadata" = $4, "updated_at" = $5 WHERE ("public"."janitor_recommendations"."id" = $6 AND 1=1) RETURNING "public"."janitor_recommendations"."id", "public"."janitor_recommendations"."janitor_run_id", "public"."janitor_recommendations"."title", "public"."janitor_recommendations"."description", "public"."janitor_recommendations"."priority"::text, "public"."janitor_recommendations"."impact", "public"."janitor_recommendations"."status"::text, "public"."janitor_recommendations"."accepted_at", "public"."janitor_recommendations"."dismissed_at", "public"."janitor_recommendations"."accepted_by_id", "public"."janitor_recommendations"."dismissed_by_id", "public"."janitor_recommendations"."metadata", "public"."janitor_recommendations"."created_at", "public"."janitor_recommendations"."updated_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query BEGIN

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query INSERT INTO "public"."tasks" ("id","title","description","workspace_id","assignee_id","repository_id","status","priority","workflow_status","source_type","created_by_id","updated_by_id","deleted","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,CAST($7::text AS "public"."TaskStatus"),CAST($8::text AS "public"."Priority"),CAST($9::text AS "public"."WorkflowStatus"),CAST($10::text AS "public"."TaskSourceType"),$11,$12,$13,$14,$15) RETURNING "public"."tasks"."id"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query SELECT "public"."tasks"."id", "public"."tasks"."title", "public"."tasks"."description", "public"."tasks"."workspace_id", "public"."tasks"."assignee_id", "public"."tasks"."repository_id", "public"."tasks"."status"::text, "public"."tasks"."priority"::text, "public"."tasks"."estimated_hours", "public"."tasks"."actual_hours", "public"."tasks"."workflow_status"::text, "public"."tasks"."workflow_started_at", "public"."tasks"."workflow_completed_at", "public"."tasks"."stakwork_project_id", "public"."tasks"."source_type"::text, "public"."tasks"."created_by_id", "public"."tasks"."updated_by_id", "public"."tasks"."deleted", "public"."tasks"."deleted_at", "public"."tasks"."created_at", "public"."tasks"."updated_at" FROM "public"."tasks" WHERE "public"."tasks"."id" = $1 LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."image" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query SELECT "public"."github_auth"."id", "public"."github_auth"."github_username", "public"."github_auth"."user_id" FROM "public"."github_auth" WHERE "public"."github_auth"."user_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."slug" FROM "public"."workspaces" WHERE "public"."workspaces"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."swarm_url", "public"."swarms"."swarm_secret_alias", "public"."swarms"."pool_name", "public"."swarms"."name", "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query COMMIT

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query BEGIN

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query INSERT INTO "public"."chat_messages" ("id","task_id","message","role","timestamp","context_tags","status","created_at","updated_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."ChatRole"),$5,$6,CAST($7::text AS "public"."ChatStatus"),$8,$9) RETURNING "public"."chat_messages"."id"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query SELECT "public"."chat_messages"."id", "public"."chat_messages"."task_id", "public"."chat_messages"."message", "public"."chat_messages"."workflow_url", "public"."chat_messages"."role"::text, "public"."chat_messages"."timestamp", "public"."chat_messages"."context_tags", "public"."chat_messages"."status"::text, "public"."chat_messages"."source_websocket_id", "public"."chat_messages"."reply_id", "public"."chat_messages"."created_at", "public"."chat_messages"."updated_at" FROM "public"."chat_messages" WHERE "public"."chat_messages"."id" = $1 LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query SELECT "public"."tasks"."id", "public"."tasks"."title" FROM "public"."tasks" WHERE "public"."tasks"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query COMMIT

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query SELECT "public"."users"."id", "public"."users"."name" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query SELECT "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at" FROM "public"."github_auth" WHERE ("public"."github_auth"."user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query SELECT "public"."accounts"."id", "public"."accounts"."user_id", "public"."accounts"."type", "public"."accounts"."provider", "public"."accounts"."provider_account_id", "public"."accounts"."refresh_token", "public"."accounts"."access_token", "public"."accounts"."expires_at", "public"."accounts"."token_type", "public"."accounts"."scope", "public"."accounts"."id_token", "public"."accounts"."session_state" FROM "public"."accounts" WHERE ("public"."accounts"."user_id" = $1 AND "public"."accounts"."provider" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query SELECT "public"."janitor_recommendations"."id", "public"."janitor_recommendations"."janitor_run_id", "public"."janitor_recommendations"."title", "public"."janitor_recommendations"."description", "public"."janitor_recommendations"."priority"::text, "public"."janitor_recommendations"."impact", "public"."janitor_recommendations"."status"::text, "public"."janitor_recommendations"."accepted_at", "public"."janitor_recommendations"."dismissed_at", "public"."janitor_recommendations"."accepted_by_id", "public"."janitor_recommendations"."dismissed_by_id", "public"."janitor_recommendations"."metadata", "public"."janitor_recommendations"."created_at", "public"."janitor_recommendations"."updated_at" FROM "public"."janitor_recommendations" WHERE ("public"."janitor_recommendations"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query SELECT "public"."tasks"."id", "public"."tasks"."title", "public"."tasks"."description", "public"."tasks"."workspace_id", "public"."tasks"."assignee_id", "public"."tasks"."repository_id", "public"."tasks"."status"::text, "public"."tasks"."priority"::text, "public"."tasks"."estimated_hours", "public"."tasks"."actual_hours", "public"."tasks"."workflow_status"::text, "public"."tasks"."workflow_started_at", "public"."tasks"."workflow_completed_at", "public"."tasks"."stakwork_project_id", "public"."tasks"."source_type"::text, "public"."tasks"."created_by_id", "public"."tasks"."updated_by_id", "public"."tasks"."deleted", "public"."tasks"."deleted_at", "public"."tasks"."created_at", "public"."tasks"."updated_at" FROM "public"."tasks" WHERE "public"."tasks"."title" = $1 LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/accept - should accept recommendation and create task
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query BEGIN

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query COMMIT

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query INSERT INTO "public"."janitor_configs" ("id","workspace_id","unit_tests_enabled","integration_tests_enabled","e2e_tests_enabled","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."janitor_configs"."id", "public"."janitor_configs"."workspace_id", "public"."janitor_configs"."unit_tests_enabled", "public"."janitor_configs"."integration_tests_enabled", "public"."janitor_configs"."e2e_tests_enabled", "public"."janitor_configs"."created_at", "public"."janitor_configs"."updated_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query INSERT INTO "public"."janitor_runs" ("id","janitor_config_id","janitor_type","status","triggered_by","metadata","created_at","updated_at") VALUES ($1,$2,CAST($3::text AS "public"."JanitorType"),CAST($4::text AS "public"."JanitorStatus"),CAST($5::text AS "public"."JanitorTrigger"),$6,$7,$8) RETURNING "public"."janitor_runs"."id", "public"."janitor_runs"."janitor_config_id", "public"."janitor_runs"."janitor_type"::text, "public"."janitor_runs"."status"::text, "public"."janitor_runs"."triggered_by"::text, "public"."janitor_runs"."stakwork_project_id", "public"."janitor_runs"."started_at", "public"."janitor_runs"."completed_at", "public"."janitor_runs"."error", "public"."janitor_runs"."metadata", "public"."janitor_runs"."created_at", "public"."janitor_runs"."updated_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query INSERT INTO "public"."janitor_recommendations" ("id","janitor_run_id","title","description","priority","status","metadata","created_at","updated_at") VALUES ($1,$2,$3,$4,CAST($5::text AS "public"."Priority"),CAST($6::text AS "public"."RecommendationStatus"),$7,$8,$9) RETURNING "public"."janitor_recommendations"."id", "public"."janitor_recommendations"."janitor_run_id", "public"."janitor_recommendations"."title", "public"."janitor_recommendations"."description", "public"."janitor_recommendations"."priority"::text, "public"."janitor_recommendations"."impact", "public"."janitor_recommendations"."status"::text, "public"."janitor_recommendations"."accepted_at", "public"."janitor_recommendations"."dismissed_at", "public"."janitor_recommendations"."accepted_by_id", "public"."janitor_recommendations"."dismissed_by_id", "public"."janitor_recommendations"."metadata", "public"."janitor_recommendations"."created_at", "public"."janitor_recommendations"."updated_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query SELECT "public"."janitor_recommendations"."id", "public"."janitor_recommendations"."janitor_run_id", "public"."janitor_recommendations"."title", "public"."janitor_recommendations"."description", "public"."janitor_recommendations"."priority"::text, "public"."janitor_recommendations"."impact", "public"."janitor_recommendations"."status"::text, "public"."janitor_recommendations"."accepted_at", "public"."janitor_recommendations"."dismissed_at", "public"."janitor_recommendations"."accepted_by_id", "public"."janitor_recommendations"."dismissed_by_id", "public"."janitor_recommendations"."metadata", "public"."janitor_recommendations"."created_at", "public"."janitor_recommendations"."updated_at" FROM "public"."janitor_recommendations" WHERE ("public"."janitor_recommendations"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query SELECT "public"."janitor_runs"."id", "public"."janitor_runs"."janitor_config_id", "public"."janitor_runs"."janitor_type"::text, "public"."janitor_runs"."status"::text, "public"."janitor_runs"."triggered_by"::text, "public"."janitor_runs"."stakwork_project_id", "public"."janitor_runs"."started_at", "public"."janitor_runs"."completed_at", "public"."janitor_runs"."error", "public"."janitor_runs"."metadata", "public"."janitor_runs"."created_at", "public"."janitor_runs"."updated_at" FROM "public"."janitor_runs" WHERE "public"."janitor_runs"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query SELECT "public"."janitor_configs"."id", "public"."janitor_configs"."workspace_id", "public"."janitor_configs"."unit_tests_enabled", "public"."janitor_configs"."integration_tests_enabled", "public"."janitor_configs"."e2e_tests_enabled", "public"."janitor_configs"."created_at", "public"."janitor_configs"."updated_at" FROM "public"."janitor_configs" WHERE "public"."janitor_configs"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE "public"."workspaces"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query BEGIN

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query UPDATE "public"."janitor_recommendations" SET "status" = CAST($1::text AS "public"."RecommendationStatus"), "dismissed_at" = $2, "dismissed_by_id" = $3, "metadata" = $4, "updated_at" = $5 WHERE ("public"."janitor_recommendations"."id" = $6 AND 1=1) RETURNING "public"."janitor_recommendations"."id", "public"."janitor_recommendations"."janitor_run_id", "public"."janitor_recommendations"."title", "public"."janitor_recommendations"."description", "public"."janitor_recommendations"."priority"::text, "public"."janitor_recommendations"."impact", "public"."janitor_recommendations"."status"::text, "public"."janitor_recommendations"."accepted_at", "public"."janitor_recommendations"."dismissed_at", "public"."janitor_recommendations"."accepted_by_id", "public"."janitor_recommendations"."dismissed_by_id", "public"."janitor_recommendations"."metadata", "public"."janitor_recommendations"."created_at", "public"."janitor_recommendations"."updated_at"

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query SELECT "public"."janitor_recommendations"."id", "public"."janitor_recommendations"."janitor_run_id", "public"."janitor_recommendations"."title", "public"."janitor_recommendations"."description", "public"."janitor_recommendations"."priority"::text, "public"."janitor_recommendations"."impact", "public"."janitor_recommendations"."status"::text, "public"."janitor_recommendations"."accepted_at", "public"."janitor_recommendations"."dismissed_at", "public"."janitor_recommendations"."accepted_by_id", "public"."janitor_recommendations"."dismissed_by_id", "public"."janitor_recommendations"."metadata", "public"."janitor_recommendations"."created_at", "public"."janitor_recommendations"."updated_at" FROM "public"."janitor_recommendations" WHERE "public"."janitor_recommendations"."id" = $1 LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query COMMIT

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query SELECT "public"."janitor_recommendations"."id", "public"."janitor_recommendations"."janitor_run_id", "public"."janitor_recommendations"."title", "public"."janitor_recommendations"."description", "public"."janitor_recommendations"."priority"::text, "public"."janitor_recommendations"."impact", "public"."janitor_recommendations"."status"::text, "public"."janitor_recommendations"."accepted_at", "public"."janitor_recommendations"."dismissed_at", "public"."janitor_recommendations"."accepted_by_id", "public"."janitor_recommendations"."dismissed_by_id", "public"."janitor_recommendations"."metadata", "public"."janitor_recommendations"."created_at", "public"."janitor_recommendations"."updated_at" FROM "public"."janitor_recommendations" WHERE ("public"."janitor_recommendations"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/janitors.test.ts > Janitor API Integration Tests > Recommendation Management > POST /api/janitors/recommendations/[id]/dismiss - should dismiss recommendation
prisma:query DELETE FROM "public"."users" WHERE 1=1

 âœ“ src/__tests__/integration/api/janitors.test.ts (20 tests) 3630ms
   âœ“ Janitor API Integration Tests > Webhook Processing > POST /api/janitors/webhook - should process successful webhook  373ms
stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query BEGIN

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query COMMIT

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."left_at" IS NULL) ORDER BY "public"."workspace_members"."joined_at" ASC OFFSET $2

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query SELECT "public"."github_auth"."id", "public"."github_auth"."github_username", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."public_repos", "public"."github_auth"."followers", "public"."github_auth"."user_id" FROM "public"."github_auth" WHERE "public"."github_auth"."user_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query SELECT "public"."github_auth"."id", "public"."github_auth"."github_username", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."public_repos", "public"."github_auth"."followers", "public"."github_auth"."user_id" FROM "public"."github_auth" WHERE "public"."github_auth"."user_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."left_at" IS NULL) OFFSET $2

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return workspace members with real database operations
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query BEGIN

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query COMMIT

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 401 when user not authenticated
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query BEGIN

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query COMMIT

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > GET /api/workspaces/[slug]/members > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query BEGIN

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query COMMIT

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query SELECT "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at" FROM "public"."github_auth" WHERE "public"."github_auth"."github_username" = $1 LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."owner_id" FROM "public"."workspaces" WHERE ("public"."workspaces"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NOT NULL) ORDER BY "public"."workspace_members"."left_at" DESC LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query BEGIN

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE "public"."workspace_members"."id" = $1 LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query SELECT "public"."github_auth"."id", "public"."github_auth"."github_username", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."public_repos", "public"."github_auth"."followers", "public"."github_auth"."user_id" FROM "public"."github_auth" WHERE "public"."github_auth"."user_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query COMMIT

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should add workspace member successfully with real database operations
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query BEGIN

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query COMMIT

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE "public"."workspace_members"."workspace_id" = $1 OFFSET $2

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 400 for missing required fields
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query BEGIN

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query COMMIT

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE "public"."workspace_members"."workspace_id" = $1 OFFSET $2

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query BEGIN

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query COMMIT

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query SELECT "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at" FROM "public"."github_auth" WHERE "public"."github_auth"."github_username" = $1 LIMIT $2 OFFSET $3

stderr | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
Error adding workspace member: Error: User not found. They must sign up to Hive first.
    at addWorkspaceMember [90m(/workspaces/hive/[39msrc/services/workspace.ts:673:11[90m)[39m
    at Module.POST [90m(/workspaces/hive/[39msrc/app/api/workspaces/[slug]/members/route.ts:84:20[90m)[39m
    at [90m/workspaces/hive/[39msrc/__tests__/integration/api/workspace-members.test.ts:278:24
    at [90mfile:///workspaces/hive/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE "public"."workspace_members"."workspace_id" = $1 OFFSET $2

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > POST /api/workspaces/[slug]/members > should prevent adding non-existent GitHub user
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query BEGIN

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query COMMIT

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query BEGIN

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query UPDATE "public"."workspace_members" SET "role" = CAST($1::text AS "public"."WorkspaceRole") WHERE ("public"."workspace_members"."id" = $2 AND 1=1) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE "public"."workspace_members"."id" = $1 LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query SELECT "public"."github_auth"."id", "public"."github_auth"."github_username", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."public_repos", "public"."github_auth"."followers", "public"."github_auth"."user_id" FROM "public"."github_auth" WHERE "public"."github_auth"."user_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query COMMIT

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should update member role successfully with real database operations
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query BEGIN

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query COMMIT

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query BEGIN

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query COMMIT

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stderr | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
Error updating workspace member role: Error: Member not found
    at updateWorkspaceMemberRole [90m(/workspaces/hive/[39msrc/services/workspace.ts:711:11[90m)[39m
    at Module.PATCH [90m(/workspaces/hive/[39msrc/app/api/workspaces/[slug]/members/[userId]/route.ts:49:27[90m)[39m
    at [90m/workspaces/hive/[39msrc/__tests__/integration/api/workspace-members.test.ts:381:24
    at [90mfile:///workspaces/hive/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query BEGIN

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query COMMIT

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query UPDATE "public"."workspace_members" SET "left_at" = $1 WHERE ("public"."workspace_members"."id" = $2 AND 1=1) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should remove member successfully with real database operations
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query BEGIN

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query COMMIT

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query BEGIN

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query COMMIT

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should prevent removing workspace owner
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query BEGIN

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query COMMIT

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stderr | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
Error removing workspace member: Error: Member not found
    at removeWorkspaceMember [90m(/workspaces/hive/[39msrc/services/workspace.ts:732:11[90m)[39m
    at Module.DELETE [90m(/workspaces/hive/[39msrc/app/api/workspaces/[slug]/members/[userId]/route.ts:97:5[90m)[39m
    at [90m/workspaces/hive/[39msrc/__tests__/integration/api/workspace-members.test.ts:508:24
    at [90mfile:///workspaces/hive/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-members.test.ts > Workspace Members API Integration Tests > DELETE /api/workspaces/[slug]/members/[userId] > should return 404 for non-existent member
prisma:query DELETE FROM "public"."users" WHERE 1=1

 âœ“ src/__tests__/integration/api/workspace-members.test.ts (14 tests) 2942ms
stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query BEGIN

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query COMMIT

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."id" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_id", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."instance_type", "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."pool_name", "public"."swarms"."pool_api_key", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."repository_name", "public"."swarms"."default_branch", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_secret_alias", "public"."swarms"."environment_variables", "public"."swarms"."services", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."ingest_ref_id", "public"."swarms"."container_files", "public"."swarms"."swarm_password", "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE ("public"."swarms"."workspace_id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
[saveOrUpdateSwarm] Create data: {
  workspaceId: [32m'cmf5qvinq007guuqu8tazautl'[39m,
  name: [32m'test-swarm'[39m,
  instanceType: [32m'm6i.xlarge'[39m,
  environmentVariables: [],
  status: [32m'PENDING'[39m,
  swarmUrl: [1mnull[22m,
  repositoryName: [32m'test-repo'[39m,
  repositoryDescription: [32m'Test repository'[39m,
  repositoryUrl: [32m'https://github.com/test/repo'[39m,
  swarmApiKey: [90mundefined[39m,
  swarmPassword: [90mundefined[39m,
  poolName: [32m''[39m,
  poolCpu: [32m'2'[39m,
  poolMemory: [32m'4Gi'[39m,
  services: [],
  swarmSecretAlias: [32m''[39m,
  wizardStep: [90mundefined[39m,
  stepStatus: [90mundefined[39m,
  defaultBranch: [32m'main'[39m,
  wizardData: [90mundefined[39m
}

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query INSERT INTO "public"."swarms" ("id","name","swarm_url","status","instance_type","created_at","updated_at","pool_name","pool_cpu","pool_memory","repository_name","default_branch","repository_description","repository_url","swarm_secret_alias","environment_variables","services","wizard_step","step_status","wizard_data","workspace_id") VALUES ($1,$2,$3,CAST($4::text AS "public"."SwarmStatus"),$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,CAST($18::text AS "public"."SwarmWizardStep"),CAST($19::text AS "public"."StepStatus"),$20,$21) RETURNING "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."workspace_id", "public"."swarms"."instance_type", "public"."swarms"."repository_name", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_password", "public"."swarms"."pool_api_key", "public"."swarms"."pool_name", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."services", "public"."swarms"."swarm_secret_alias", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."swarm_id", "public"."swarms"."ingest_ref_id", "public"."swarms"."environment_variables", "public"."swarms"."container_files", "public"."swarms"."default_branch"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_id", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."instance_type", "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."pool_name", "public"."swarms"."pool_api_key", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."repository_name", "public"."swarms"."default_branch", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_secret_alias", "public"."swarms"."environment_variables", "public"."swarms"."services", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."ingest_ref_id", "public"."swarms"."container_files", "public"."swarms"."swarm_password", "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE ("public"."swarms"."workspace_id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query UPDATE "public"."swarms" SET "status" = CAST($1::text AS "public"."SwarmStatus"), "swarm_url" = $2, "swarm_password" = $3, "swarm_id" = $4, "updated_at" = $5 WHERE ("public"."swarms"."workspace_id" = $6 AND 1=1) RETURNING "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."workspace_id", "public"."swarms"."instance_type", "public"."swarms"."repository_name", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_password", "public"."swarms"."pool_api_key", "public"."swarms"."pool_name", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."services", "public"."swarms"."swarm_secret_alias", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."swarm_id", "public"."swarms"."ingest_ref_id", "public"."swarms"."environment_variables", "public"."swarms"."container_files", "public"."swarms"."default_branch"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace owner to create swarm
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query BEGIN

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query COMMIT

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."id" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_id", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."instance_type", "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."pool_name", "public"."swarms"."pool_api_key", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."repository_name", "public"."swarms"."default_branch", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_secret_alias", "public"."swarms"."environment_variables", "public"."swarms"."services", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."ingest_ref_id", "public"."swarms"."container_files", "public"."swarms"."swarm_password", "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE ("public"."swarms"."workspace_id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
[saveOrUpdateSwarm] Create data: {
  workspaceId: [32m'cmf5qvipa007suuqum5e1p2uq'[39m,
  name: [32m'test-swarm'[39m,
  instanceType: [32m'm6i.xlarge'[39m,
  environmentVariables: [],
  status: [32m'PENDING'[39m,
  swarmUrl: [1mnull[22m,
  repositoryName: [32m'test-repo'[39m,
  repositoryDescription: [32m'Test repository'[39m,
  repositoryUrl: [32m'https://github.com/test/repo'[39m,
  swarmApiKey: [90mundefined[39m,
  swarmPassword: [90mundefined[39m,
  poolName: [32m''[39m,
  poolCpu: [32m'2'[39m,
  poolMemory: [32m'4Gi'[39m,
  services: [],
  swarmSecretAlias: [32m''[39m,
  wizardStep: [90mundefined[39m,
  stepStatus: [90mundefined[39m,
  defaultBranch: [32m'main'[39m,
  wizardData: [90mundefined[39m
}

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query INSERT INTO "public"."swarms" ("id","name","swarm_url","status","instance_type","created_at","updated_at","pool_name","pool_cpu","pool_memory","repository_name","default_branch","repository_description","repository_url","swarm_secret_alias","environment_variables","services","wizard_step","step_status","wizard_data","workspace_id") VALUES ($1,$2,$3,CAST($4::text AS "public"."SwarmStatus"),$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,CAST($18::text AS "public"."SwarmWizardStep"),CAST($19::text AS "public"."StepStatus"),$20,$21) RETURNING "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."workspace_id", "public"."swarms"."instance_type", "public"."swarms"."repository_name", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_password", "public"."swarms"."pool_api_key", "public"."swarms"."pool_name", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."services", "public"."swarms"."swarm_secret_alias", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."swarm_id", "public"."swarms"."ingest_ref_id", "public"."swarms"."environment_variables", "public"."swarms"."container_files", "public"."swarms"."default_branch"

stderr | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
Error creating Swarm: TypeError: swarmService.createSwarm is not a function
    at Module.POST [90m(/workspaces/hive/[39msrc/app/api/swarm/route.ts:100:44[90m)[39m
    at [90m/workspaces/hive/[39msrc/__tests__/integration/api/swarm-authorization.test.ts:197:24
    at [90mfile:///workspaces/hive/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should allow workspace admin to create swarm
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query BEGIN

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query COMMIT

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."id" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject developer role from creating swarm
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query BEGIN

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query COMMIT

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."id" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject viewer role from creating swarm
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query BEGIN

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query COMMIT

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."id" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthorized user from creating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query BEGIN

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query COMMIT

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."id" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject creating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query BEGIN

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query COMMIT

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > POST /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query BEGIN

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query COMMIT

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."id" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_id", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."instance_type", "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."pool_name", "public"."swarms"."pool_api_key", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."repository_name", "public"."swarms"."default_branch", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_secret_alias", "public"."swarms"."environment_variables", "public"."swarms"."services", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."ingest_ref_id", "public"."swarms"."container_files", "public"."swarms"."swarm_password", "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE ("public"."swarms"."workspace_id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
[saveOrUpdateSwarm] Create data: {
  workspaceId: [32m'cmf5qviv8009iuuqudjoj6ij6'[39m,
  name: [32m''[39m,
  instanceType: [32m''[39m,
  environmentVariables: [ { name: [32m'TEST_VAR'[39m, value: [36m[Object][39m } ],
  status: [32m'PENDING'[39m,
  swarmUrl: [1mnull[22m,
  repositoryName: [32m''[39m,
  repositoryDescription: [32m''[39m,
  repositoryUrl: [32m''[39m,
  swarmApiKey: [90mundefined[39m,
  swarmPassword: [90mundefined[39m,
  poolName: [32m''[39m,
  poolCpu: [32m'2'[39m,
  poolMemory: [32m'4Gi'[39m,
  services: [ { name: [32m'test-service'[39m, port: [33m3000[39m } ],
  swarmSecretAlias: [32m''[39m,
  wizardStep: [90mundefined[39m,
  stepStatus: [90mundefined[39m,
  defaultBranch: [32m''[39m,
  wizardData: [90mundefined[39m
}

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query INSERT INTO "public"."swarms" ("id","name","swarm_url","status","instance_type","created_at","updated_at","pool_name","pool_cpu","pool_memory","repository_name","default_branch","repository_description","repository_url","swarm_secret_alias","environment_variables","services","wizard_step","step_status","wizard_data","workspace_id") VALUES ($1,$2,$3,CAST($4::text AS "public"."SwarmStatus"),$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,CAST($18::text AS "public"."SwarmWizardStep"),CAST($19::text AS "public"."StepStatus"),$20,$21) RETURNING "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."workspace_id", "public"."swarms"."instance_type", "public"."swarms"."repository_name", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_password", "public"."swarms"."pool_api_key", "public"."swarms"."pool_name", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."services", "public"."swarms"."swarm_secret_alias", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."swarm_id", "public"."swarms"."ingest_ref_id", "public"."swarms"."environment_variables", "public"."swarms"."container_files", "public"."swarms"."default_branch"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace owner to update swarm
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query BEGIN

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query COMMIT

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."id" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_id", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."instance_type", "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."pool_name", "public"."swarms"."pool_api_key", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."repository_name", "public"."swarms"."default_branch", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_secret_alias", "public"."swarms"."environment_variables", "public"."swarms"."services", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."ingest_ref_id", "public"."swarms"."container_files", "public"."swarms"."swarm_password", "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE ("public"."swarms"."workspace_id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
[saveOrUpdateSwarm] Create data: {
  workspaceId: [32m'cmf5qviw9009uuuquimzi6gaq'[39m,
  name: [32m''[39m,
  instanceType: [32m''[39m,
  environmentVariables: [ { name: [32m'TEST_VAR'[39m, value: [36m[Object][39m } ],
  status: [32m'PENDING'[39m,
  swarmUrl: [1mnull[22m,
  repositoryName: [32m''[39m,
  repositoryDescription: [32m''[39m,
  repositoryUrl: [32m''[39m,
  swarmApiKey: [90mundefined[39m,
  swarmPassword: [90mundefined[39m,
  poolName: [32m''[39m,
  poolCpu: [32m'2'[39m,
  poolMemory: [32m'4Gi'[39m,
  services: [ { name: [32m'test-service'[39m, port: [33m3000[39m } ],
  swarmSecretAlias: [32m''[39m,
  wizardStep: [90mundefined[39m,
  stepStatus: [90mundefined[39m,
  defaultBranch: [32m''[39m,
  wizardData: [90mundefined[39m
}

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query INSERT INTO "public"."swarms" ("id","name","swarm_url","status","instance_type","created_at","updated_at","pool_name","pool_cpu","pool_memory","repository_name","default_branch","repository_description","repository_url","swarm_secret_alias","environment_variables","services","wizard_step","step_status","wizard_data","workspace_id") VALUES ($1,$2,$3,CAST($4::text AS "public"."SwarmStatus"),$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,CAST($18::text AS "public"."SwarmWizardStep"),CAST($19::text AS "public"."StepStatus"),$20,$21) RETURNING "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."workspace_id", "public"."swarms"."instance_type", "public"."swarms"."repository_name", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_password", "public"."swarms"."pool_api_key", "public"."swarms"."pool_name", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."services", "public"."swarms"."swarm_secret_alias", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."swarm_id", "public"."swarms"."ingest_ref_id", "public"."swarms"."environment_variables", "public"."swarms"."container_files", "public"."swarms"."default_branch"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should allow workspace admin to update swarm
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query BEGIN

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query COMMIT

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."id" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject developer role from updating swarm
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query BEGIN

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query COMMIT

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."id" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject viewer role from updating swarm
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query BEGIN

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query COMMIT

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."id" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthorized user from updating swarm in workspace they don't belong to
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query BEGIN

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query COMMIT

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."id" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject updating swarm with non-existent workspace ID
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query BEGIN

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query COMMIT

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject request without workspaceId
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query BEGIN

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query COMMIT

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > PUT /api/swarm - Authorization Tests > should reject unauthenticated requests
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query BEGIN

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query COMMIT

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."id" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."swarms"."id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" = $1 OFFSET $2) AS "sub"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent cross-workspace swarm creation attack
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query BEGIN

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query COMMIT

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."id" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-authorization.test.ts > Swarm API Authorization Tests > Security Vulnerability Prevention > should prevent privilege escalation via direct API call
prisma:query DELETE FROM "public"."users" WHERE 1=1

 âœ“ src/__tests__/integration/api/swarm-authorization.test.ts (17 tests) 3008ms
stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."workspaces"."id" FROM "public"."workspaces" WHERE ("public"."workspaces"."owner_id" = $1 AND "public"."workspaces"."deleted" = $2) OFFSET $3) AS "sub"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query INSERT INTO "public"."workspaces" ("id","name","description","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7,$8) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should create workspace successfully
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."workspaces"."id" FROM "public"."workspaces" WHERE ("public"."workspaces"."owner_id" = $1 AND "public"."workspaces"."deleted" = $2) OFFSET $3) AS "sub"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."workspaces"."id" FROM "public"."workspaces" WHERE ("public"."workspaces"."owner_id" = $1 AND "public"."workspaces"."deleted" = $2) OFFSET $3) AS "sub"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should throw error for duplicate slug
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."workspaces"."id" FROM "public"."workspaces" WHERE ("public"."workspaces"."owner_id" = $1 AND "public"."workspaces"."deleted" = $2) OFFSET $3) AS "sub"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should handle workspace creation with minimal data
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."workspaces"."id" FROM "public"."workspaces" WHERE ("public"."workspaces"."owner_id" = $1 AND "public"."workspaces"."deleted" = $2) OFFSET $3) AS "sub"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."workspaces"."id" FROM "public"."workspaces" WHERE ("public"."workspaces"."owner_id" = $1 AND "public"."workspaces"."deleted" = $2) OFFSET $3) AS "sub"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."workspaces"."id" FROM "public"."workspaces" WHERE ("public"."workspaces"."owner_id" = $1 AND "public"."workspaces"."deleted" = $2) OFFSET $3) AS "sub"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."workspaces"."id" FROM "public"."workspaces" WHERE ("public"."workspaces"."owner_id" = $1 AND "public"."workspaces"."deleted" = $2) OFFSET $3) AS "sub"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."workspaces"."id" FROM "public"."workspaces" WHERE ("public"."workspaces"."owner_id" = $1 AND "public"."workspaces"."deleted" = $2) OFFSET $3) AS "sub"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should enforce workspace limit per user
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."workspaces"."id" FROM "public"."workspaces" WHERE ("public"."workspaces"."owner_id" = $1 AND "public"."workspaces"."deleted" = $2) OFFSET $3) AS "sub"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."workspaces"."id" FROM "public"."workspaces" WHERE ("public"."workspaces"."owner_id" = $1 AND "public"."workspaces"."deleted" = $2) OFFSET $3) AS "sub"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."workspaces"."id" FROM "public"."workspaces" WHERE ("public"."workspaces"."owner_id" = $1 AND "public"."workspaces"."deleted" = $2) OFFSET $3) AS "sub"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."workspaces"."id" FROM "public"."workspaces" WHERE ("public"."workspaces"."owner_id" = $1 AND "public"."workspaces"."deleted" = $2) OFFSET $3) AS "sub"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query UPDATE "public"."workspaces" SET "deleted" = $1, "deleted_at" = $2, "updated_at" = $3 WHERE ("public"."workspaces"."id" = $4 AND 1=1) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."workspaces"."id" FROM "public"."workspaces" WHERE ("public"."workspaces"."owner_id" = $1 AND "public"."workspaces"."deleted" = $2) OFFSET $3) AS "sub"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > createWorkspace > should allow workspace creation after deletion
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query BEGIN

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query COMMIT

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."owner_id" = $1 AND "public"."workspaces"."deleted" = $2) OFFSET $3

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should return workspaces owned by user
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query BEGIN

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","deleted_at","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7,$8) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query COMMIT

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."owner_id" = $1 AND "public"."workspaces"."deleted" = $2) OFFSET $3

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspacesByUserId > should exclude deleted workspaces
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query INSERT INTO "public"."workspaces" ("id","name","description","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7,$8) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query INSERT INTO "public"."swarms" ("id","name","status","instance_type","created_at","updated_at","environment_variables","services","wizard_step","step_status","wizard_data","workspace_id") VALUES ($1,$2,CAST($3::text AS "public"."SwarmStatus"),$4,$5,$6,$7,$8,CAST($9::text AS "public"."SwarmWizardStep"),CAST($10::text AS "public"."StepStatus"),$11,$12) RETURNING "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_id", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."instance_type", "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."pool_name", "public"."swarms"."pool_api_key", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."repository_name", "public"."swarms"."default_branch", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_secret_alias", "public"."swarms"."environment_variables", "public"."swarms"."services", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."ingest_ref_id", "public"."swarms"."container_files", "public"."swarms"."swarm_password", "public"."swarms"."workspace_id"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return workspace with swarm by slug
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query INSERT INTO "public"."workspaces" ("id","name","description","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7,$8) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query INSERT INTO "public"."swarms" ("id","name","status","instance_type","created_at","updated_at","environment_variables","services","wizard_step","step_status","wizard_data","workspace_id") VALUES ($1,$2,CAST($3::text AS "public"."SwarmStatus"),$4,$5,$6,$7,$8,CAST($9::text AS "public"."SwarmWizardStep"),CAST($10::text AS "public"."StepStatus"),$11,$12) RETURNING "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_id", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."instance_type", "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."pool_name", "public"."swarms"."pool_api_key", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."repository_name", "public"."swarms"."default_branch", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_secret_alias", "public"."swarms"."environment_variables", "public"."swarms"."services", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."ingest_ref_id", "public"."swarms"."container_files", "public"."swarms"."swarm_password", "public"."swarms"."workspace_id"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for non-existent slug
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query INSERT INTO "public"."workspaces" ("id","name","description","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7,$8) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query INSERT INTO "public"."swarms" ("id","name","status","instance_type","created_at","updated_at","environment_variables","services","wizard_step","step_status","wizard_data","workspace_id") VALUES ($1,$2,CAST($3::text AS "public"."SwarmStatus"),$4,$5,$6,$7,$8,CAST($9::text AS "public"."SwarmWizardStep"),CAST($10::text AS "public"."StepStatus"),$11,$12) RETURNING "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_id", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."instance_type", "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."pool_name", "public"."swarms"."pool_api_key", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."repository_name", "public"."swarms"."default_branch", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_secret_alias", "public"."swarms"."environment_variables", "public"."swarms"."services", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."ingest_ref_id", "public"."swarms"."container_files", "public"."swarms"."swarm_password", "public"."swarms"."workspace_id"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query UPDATE "public"."workspaces" SET "deleted" = $1, "deleted_at" = $2, "updated_at" = $3 WHERE ("public"."workspaces"."id" = $4 AND 1=1) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getWorkspaceBySlug > should return null for deleted workspace
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query BEGIN

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query COMMIT

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."owner_id" = $1 AND "public"."workspaces"."deleted" = $2) OFFSET $3

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."user_id" = $1 AND "public"."workspace_members"."left_at" IS NULL) OFFSET $2

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE "public"."workspaces"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" IN ($1,$2) AND "public"."workspace_members"."left_at" IS NULL) OFFSET $3

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getUserWorkspaces > should return workspaces where user is owner or member
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query BEGIN

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query COMMIT

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > validateWorkspaceAccess > should validate workspace access correctly
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."owner_id" = $1 AND "public"."workspaces"."deleted" = $2) ORDER BY "public"."workspaces"."created_at" ASC LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return most recently created workspace
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."owner_id" = $1 AND "public"."workspaces"."deleted" = $2) ORDER BY "public"."workspaces"."created_at" ASC LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."user_id" = $1 AND "public"."workspace_members"."left_at" IS NULL) ORDER BY "public"."workspace_members"."joined_at" ASC LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > getDefaultWorkspaceForUser > should return null if user has no workspaces
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query UPDATE "public"."workspaces" SET "deleted" = $1, "deleted_at" = $2, "updated_at" = $3 WHERE ("public"."workspaces"."id" = $4 AND 1=1) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should soft delete workspace
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/services/workspace.test.ts > Workspace Service - Integration Tests > deleteWorkspaceBySlug > should throw error for non-existent workspace
prisma:query DELETE FROM "public"."users" WHERE 1=1

 âœ“ src/__tests__/integration/services/workspace.test.ts (16 tests) 2863ms
stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query BEGIN

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query COMMIT

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at" FROM "public"."github_auth" WHERE "public"."github_auth"."github_username" = $1 LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."owner_id" FROM "public"."workspaces" WHERE ("public"."workspaces"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NOT NULL) ORDER BY "public"."workspace_members"."left_at" DESC LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query BEGIN

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE "public"."workspace_members"."id" = $1 LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."github_auth"."id", "public"."github_auth"."github_username", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."public_repos", "public"."github_auth"."followers", "public"."github_auth"."user_id" FROM "public"."github_auth" WHERE "public"."github_auth"."user_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query COMMIT

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query BEGIN

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query COMMIT

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at" FROM "public"."github_auth" WHERE "public"."github_auth"."github_username" = $1 LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."owner_id" FROM "public"."workspaces" WHERE ("public"."workspaces"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NOT NULL) ORDER BY "public"."workspace_members"."left_at" DESC LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query BEGIN

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE "public"."workspace_members"."id" = $1 LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."github_auth"."id", "public"."github_auth"."github_username", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."public_repos", "public"."github_auth"."followers", "public"."github_auth"."user_id" FROM "public"."github_auth" WHERE "public"."github_auth"."user_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query COMMIT

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query BEGIN

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query COMMIT

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at" FROM "public"."github_auth" WHERE "public"."github_auth"."github_username" = $1 LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."owner_id" FROM "public"."workspaces" WHERE ("public"."workspaces"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NOT NULL) ORDER BY "public"."workspace_members"."left_at" DESC LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query BEGIN

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE "public"."workspace_members"."id" = $1 LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."github_auth"."id", "public"."github_auth"."github_username", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."public_repos", "public"."github_auth"."followers", "public"."github_auth"."user_id" FROM "public"."github_auth" WHERE "public"."github_auth"."user_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query COMMIT

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query BEGIN

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query COMMIT

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at" FROM "public"."github_auth" WHERE "public"."github_auth"."github_username" = $1 LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."owner_id" FROM "public"."workspaces" WHERE ("public"."workspaces"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NOT NULL) ORDER BY "public"."workspace_members"."left_at" DESC LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query BEGIN

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE "public"."workspace_members"."id" = $1 LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."github_auth"."id", "public"."github_auth"."github_username", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."public_repos", "public"."github_auth"."followers", "public"."github_auth"."user_id" FROM "public"."github_auth" WHERE "public"."github_auth"."user_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query COMMIT

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should accept all assignable roles with real database operations
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query BEGIN

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query COMMIT

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE "public"."workspace_members"."workspace_id" = $1 OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject OWNER role with real validation logic
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query BEGIN

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query COMMIT

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE "public"."workspace_members"."workspace_id" = $1 OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject STAKEHOLDER role with real validation logic
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query BEGIN

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query COMMIT

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE "public"."workspace_members"."workspace_id" = $1 OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query BEGIN

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query COMMIT

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE "public"."workspace_members"."workspace_id" = $1 OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query BEGIN

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query COMMIT

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE "public"."workspace_members"."workspace_id" = $1 OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query BEGIN

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query COMMIT

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE "public"."workspace_members"."workspace_id" = $1 OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should reject invalid role strings with real validation
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query BEGIN

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query COMMIT

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require authentication with real session validation
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query BEGIN

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query COMMIT

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > POST /api/workspaces/[slug]/members - Add Member Role Validation > should require valid workspace access with real database lookup
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query BEGIN

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query COMMIT

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stderr | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
Error updating workspace member role: Error: Member already has this role
    at updateWorkspaceMemberRole [90m(/workspaces/hive/[39msrc/services/workspace.ts:716:11[90m)[39m
    at Module.PATCH [90m(/workspaces/hive/[39msrc/app/api/workspaces/[slug]/members/[userId]/route.ts:49:27[90m)[39m
    at [90m/workspaces/hive/[39msrc/__tests__/integration/api/workspace-member-roles.test.ts:292:26
    at [90mfile:///workspaces/hive/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query BEGIN

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query COMMIT

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query BEGIN

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query UPDATE "public"."workspace_members" SET "role" = CAST($1::text AS "public"."WorkspaceRole") WHERE ("public"."workspace_members"."id" = $2 AND 1=1) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE "public"."workspace_members"."id" = $1 LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query SELECT "public"."github_auth"."id", "public"."github_auth"."github_username", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."public_repos", "public"."github_auth"."followers", "public"."github_auth"."user_id" FROM "public"."github_auth" WHERE "public"."github_auth"."user_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query COMMIT

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query BEGIN

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query COMMIT

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query BEGIN

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query UPDATE "public"."workspace_members" SET "role" = CAST($1::text AS "public"."WorkspaceRole") WHERE ("public"."workspace_members"."id" = $2 AND 1=1) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE "public"."workspace_members"."id" = $1 LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query SELECT "public"."github_auth"."id", "public"."github_auth"."github_username", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."public_repos", "public"."github_auth"."followers", "public"."github_auth"."user_id" FROM "public"."github_auth" WHERE "public"."github_auth"."user_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query COMMIT

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query BEGIN

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query COMMIT

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query BEGIN

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query UPDATE "public"."workspace_members" SET "role" = CAST($1::text AS "public"."WorkspaceRole") WHERE ("public"."workspace_members"."id" = $2 AND 1=1) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE "public"."workspace_members"."id" = $1 LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query SELECT "public"."github_auth"."id", "public"."github_auth"."github_username", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."public_repos", "public"."github_auth"."followers", "public"."github_auth"."user_id" FROM "public"."github_auth" WHERE "public"."github_auth"."user_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query COMMIT

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should accept all assignable roles for role updates
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query BEGIN

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query COMMIT

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject OWNER role for role updates
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query BEGIN

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query COMMIT

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject STAKEHOLDER role for role updates
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query BEGIN

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query COMMIT

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query BEGIN

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query COMMIT

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query BEGIN

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query COMMIT

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query BEGIN

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query COMMIT

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should reject invalid role strings for updates
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query BEGIN

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","name","bio","public_repos","followers","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query COMMIT

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-member-roles.test.ts > Workspace Member Role API Integration Tests > PATCH /api/workspaces/[slug]/members/[userId] - Update Member Role Validation > should verify real permission checks for role updates
prisma:query DELETE FROM "public"."users" WHERE 1=1

 âœ“ src/__tests__/integration/api/workspace-member-roles.test.ts (11 tests) 2845ms
stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query INSERT INTO "public"."workspaces" ("id","name","description","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7,$8) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should get workspace successfully with real database operations
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query INSERT INTO "public"."workspaces" ("id","name","description","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7,$8) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 401 for unauthenticated request
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query INSERT INTO "public"."workspaces" ("id","name","description","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7,$8) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > GET /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query INSERT INTO "public"."workspaces" ("id","name","description","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7,$8) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query UPDATE "public"."workspaces" SET "name" = $1, "slug" = $2, "description" = $3, "updated_at" = $4 WHERE ("public"."workspaces"."id" = $5 AND 1=1) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query INSERT INTO "public"."workspaces" ("id","name","description","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7,$8) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query UPDATE "public"."workspaces" SET "name" = $1, "slug" = $2, "description" = $3, "updated_at" = $4 WHERE ("public"."workspaces"."id" = $5 AND 1=1) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should update workspace successfully as admin with real database operations
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query INSERT INTO "public"."workspaces" ("id","name","description","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7,$8) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stderr | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
Error updating workspace: Error: Only workspace owners and admins can update workspace settings
    at updateWorkspace [90m(/workspaces/hive/[39msrc/services/workspace.ts:755:11[90m)[39m
    at Module.PUT [90m(/workspaces/hive/[39msrc/app/api/workspaces/[slug]/route.ts:123:30[90m)[39m
    at [90m/workspaces/hive/[39msrc/__tests__/integration/api/workspace-update.test.ts:228:24
    at [90mfile:///workspaces/hive/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should return 403 for insufficient permissions
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query INSERT INTO "public"."workspaces" ("id","name","description","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7,$8) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stderr | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
Error updating workspace: ZodError: [
  {
    "code": "too_small",
    "minimum": 1,
    "type": "string",
    "inclusive": true,
    "exact": false,
    "message": "Workspace name is required",
    "path": [
      "name"
    ]
  }
]
    at Object.get error [as error] [90m(file:///workspaces/hive/[39mnode_modules/[4mzod[24m/v3/types.js:39:31[90m)[39m
    at ZodObject.parse [90m(file:///workspaces/hive/[39mnode_modules/[4mzod[24m/v3/types.js:114:22[90m)[39m
    at Module.PUT [90m(/workspaces/hive/[39msrc/app/api/workspaces/[slug]/route.ts:120:49[90m)[39m
    at [90m/workspaces/hive/[39msrc/__tests__/integration/api/workspace-update.test.ts:260:24
    at [90mfile:///workspaces/hive/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20 {
  issues: [
    {
      code: [32m'too_small'[39m,
      minimum: [33m1[39m,
      type: [32m'string'[39m,
      inclusive: [33mtrue[39m,
      exact: [33mfalse[39m,
      message: [32m'Workspace name is required'[39m,
      path: [36m[Array][39m
    }
  ],
  addIssue: [36m[Function (anonymous)][39m,
  addIssues: [36m[Function (anonymous)][39m,
  errors: [
    {
      code: [32m'too_small'[39m,
      minimum: [33m1[39m,
      type: [32m'string'[39m,
      inclusive: [33mtrue[39m,
      exact: [33mfalse[39m,
      message: [32m'Workspace name is required'[39m,
      path: [36m[Array][39m
    }
  ]
}

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should validate required fields with real schema validation
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query INSERT INTO "public"."workspaces" ("id","name","description","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7,$8) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stderr | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
Error updating workspace: Error: A workspace with this name already exists. Please choose a different name.
    at updateWorkspace [90m(/workspaces/hive/[39msrc/services/workspace.ts:770:13[90m)[39m
    at Module.PUT [90m(/workspaces/hive/[39msrc/app/api/workspaces/[slug]/route.ts:123:30[90m)[39m
    at [90m/workspaces/hive/[39msrc/__tests__/integration/api/workspace-update.test.ts:302:24
    at [90mfile:///workspaces/hive/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > PUT /api/workspaces/[slug] > should prevent duplicate slug with real database constraint
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query INSERT INTO "public"."workspaces" ("id","name","description","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7,$8) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query UPDATE "public"."workspaces" SET "deleted" = $1, "deleted_at" = $2, "updated_at" = $3 WHERE ("public"."workspaces"."id" = $4 AND 1=1) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should delete workspace successfully as owner with real database operations
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query INSERT INTO "public"."workspaces" ("id","name","description","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7,$8) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query SELECT "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at" FROM "public"."workspace_members" WHERE ("public"."workspace_members"."workspace_id" = $1 AND "public"."workspace_members"."user_id" = $2 AND "public"."workspace_members"."left_at" IS NULL) LIMIT $3 OFFSET $4

stderr | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
Error deleting workspace: Error: Only workspace owners can delete workspaces
    at deleteWorkspaceBySlug [90m(/workspaces/hive/[39msrc/services/workspace.ts:552:11[90m)[39m
    at Module.DELETE [90m(/workspaces/hive/[39msrc/app/api/workspaces/[slug]/route.ts:74:5[90m)[39m
    at [90m/workspaces/hive/[39msrc/__tests__/integration/api/workspace-update.test.ts:353:24
    at [90mfile:///workspaces/hive/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 403 for non-owner attempting deletion
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query INSERT INTO "public"."workspaces" ("id","name","description","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7,$8) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stderr | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
Error deleting workspace: Error: Workspace not found or access denied
    at deleteWorkspaceBySlug [90m(/workspaces/hive/[39msrc/services/workspace.ts:548:11[90m)[39m
    at Module.DELETE [90m(/workspaces/hive/[39msrc/app/api/workspaces/[slug]/route.ts:74:5[90m)[39m
    at [90m/workspaces/hive/[39msrc/__tests__/integration/api/workspace-update.test.ts:377:24
    at [90mfile:///workspaces/hive/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 404 for non-existent workspace
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query INSERT INTO "public"."workspaces" ("id","name","description","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7,$8) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query INSERT INTO "public"."workspace_members" ("id","workspace_id","user_id","role","joined_at") VALUES ($1,$2,$3,CAST($4::text AS "public"."WorkspaceRole"),$5) RETURNING "public"."workspace_members"."id", "public"."workspace_members"."workspace_id", "public"."workspace_members"."user_id", "public"."workspace_members"."role"::text, "public"."workspace_members"."joined_at", "public"."workspace_members"."left_at"

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspace-update.test.ts > Workspace Update API Integration Tests > DELETE /api/workspaces/[slug] > should return 401 for unauthenticated deletion
prisma:query DELETE FROM "public"."users" WHERE 1=1

 âœ“ src/__tests__/integration/api/workspace-update.test.ts (12 tests) 2917ms
stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."workspaces"."id" FROM "public"."workspaces" WHERE ("public"."workspaces"."owner_id" = $1 AND "public"."workspaces"."deleted" = $2) OFFSET $3) AS "sub"

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query INSERT INTO "public"."workspaces" ("id","name","description","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7,$8) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should create workspace successfully
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."workspaces"."id" FROM "public"."workspaces" WHERE ("public"."workspaces"."owner_id" = $1 AND "public"."workspaces"."deleted" = $2) OFFSET $3) AS "sub"

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should enforce workspace limit
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query UPDATE "public"."workspaces" SET "deleted" = $1, "deleted_at" = $2, "updated_at" = $3 WHERE ("public"."workspaces"."id" = $4 AND 1=1) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."workspaces"."id" FROM "public"."workspaces" WHERE ("public"."workspaces"."owner_id" = $1 AND "public"."workspaces"."deleted" = $2) OFFSET $3) AS "sub"

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should allow creation after workspace deletion
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for missing required fields
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for missing required fields
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for missing required fields
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for missing required fields
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for missing required fields
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for missing required fields
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for missing required fields
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for missing required fields
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for missing required fields
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for missing required fields
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for missing required fields
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for missing required fields
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for missing required fields
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for missing required fields
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for missing required fields
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for missing required fields
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for missing required fields
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for missing required fields
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for missing required fields
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for missing required fields
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for missing required fields
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for missing required fields
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for missing required fields
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for missing required fields
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for missing required fields
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for missing required fields
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for missing required fields
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for missing required fields
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for missing required fields
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for missing required fields
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for missing required fields
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for missing required fields
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for missing required fields
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for missing required fields
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for missing required fields
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for missing required fields
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for missing required fields
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for missing required fields
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for missing required fields
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for missing required fields
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for missing required fields
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for missing required fields
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for missing required fields
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for missing required fields
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for missing required fields
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for missing required fields
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for missing required fields
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query SELECT COUNT(*) AS "_count._all" FROM (SELECT "public"."workspaces"."id" FROM "public"."workspaces" WHERE ("public"."workspaces"."owner_id" = $1 AND "public"."workspaces"."deleted" = $2) OFFSET $3) AS "sub"

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces.test.ts > Workspace API - Integration Tests > POST /api/workspaces > should return 400 for duplicate slug
prisma:query DELETE FROM "public"."users" WHERE 1=1

 âœ“ src/__tests__/integration/api/workspaces.test.ts (6 tests) 2481ms
stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query BEGIN

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query INSERT INTO "public"."accounts" ("id","user_id","type","provider","provider_account_id","access_token") VALUES ($1,$2,$3,$4,$5,$6) RETURNING "public"."accounts"."id", "public"."accounts"."user_id", "public"."accounts"."type", "public"."accounts"."provider", "public"."accounts"."provider_account_id", "public"."accounts"."refresh_token", "public"."accounts"."access_token", "public"."accounts"."expires_at", "public"."accounts"."token_type", "public"."accounts"."scope", "public"."accounts"."id_token", "public"."accounts"."session_state"

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","github_node_id","name","public_repos","followers","following","account_type","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query COMMIT

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query SELECT "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at" FROM "public"."github_auth" WHERE ("public"."github_auth"."user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query SELECT "public"."accounts"."id", "public"."accounts"."user_id", "public"."accounts"."type", "public"."accounts"."provider", "public"."accounts"."provider_account_id", "public"."accounts"."refresh_token", "public"."accounts"."access_token", "public"."accounts"."expires_at", "public"."accounts"."token_type", "public"."accounts"."scope", "public"."accounts"."id_token", "public"."accounts"."session_state" FROM "public"."accounts" WHERE ("public"."accounts"."user_id" = $1 AND "public"."accounts"."provider" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query SELECT "public"."accounts"."id", "public"."accounts"."user_id", "public"."accounts"."type", "public"."accounts"."provider", "public"."accounts"."provider_account_id", "public"."accounts"."refresh_token", "public"."accounts"."access_token", "public"."accounts"."expires_at", "public"."accounts"."token_type", "public"."accounts"."scope", "public"."accounts"."id_token", "public"."accounts"."session_state" FROM "public"."accounts" WHERE ("public"."accounts"."user_id" = $1 AND "public"."accounts"."provider" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should search GitHub users successfully with real database operations
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for unauthenticated user
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query BEGIN

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query INSERT INTO "public"."accounts" ("id","user_id","type","provider","provider_account_id","access_token") VALUES ($1,$2,$3,$4,$5,$6) RETURNING "public"."accounts"."id", "public"."accounts"."user_id", "public"."accounts"."type", "public"."accounts"."provider", "public"."accounts"."provider_account_id", "public"."accounts"."refresh_token", "public"."accounts"."access_token", "public"."accounts"."expires_at", "public"."accounts"."token_type", "public"."accounts"."scope", "public"."accounts"."id_token", "public"."accounts"."session_state"

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","github_node_id","name","public_repos","followers","following","account_type","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query COMMIT

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for missing query parameter
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query BEGIN

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query INSERT INTO "public"."accounts" ("id","user_id","type","provider","provider_account_id","access_token") VALUES ($1,$2,$3,$4,$5,$6) RETURNING "public"."accounts"."id", "public"."accounts"."user_id", "public"."accounts"."type", "public"."accounts"."provider", "public"."accounts"."provider_account_id", "public"."accounts"."refresh_token", "public"."accounts"."access_token", "public"."accounts"."expires_at", "public"."accounts"."token_type", "public"."accounts"."scope", "public"."accounts"."id_token", "public"."accounts"."session_state"

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","github_node_id","name","public_repos","followers","following","account_type","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query COMMIT

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 for query too short
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query SELECT "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at" FROM "public"."github_auth" WHERE ("public"."github_auth"."user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query SELECT "public"."accounts"."id", "public"."accounts"."user_id", "public"."accounts"."type", "public"."accounts"."provider", "public"."accounts"."provider_account_id", "public"."accounts"."refresh_token", "public"."accounts"."access_token", "public"."accounts"."expires_at", "public"."accounts"."token_type", "public"."accounts"."scope", "public"."accounts"."id_token", "public"."accounts"."session_state" FROM "public"."accounts" WHERE ("public"."accounts"."user_id" = $1 AND "public"."accounts"."provider" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 400 when GitHub account not found in database
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query BEGIN

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query INSERT INTO "public"."accounts" ("id","user_id","type","provider","provider_account_id","access_token") VALUES ($1,$2,$3,$4,$5,$6) RETURNING "public"."accounts"."id", "public"."accounts"."user_id", "public"."accounts"."type", "public"."accounts"."provider", "public"."accounts"."provider_account_id", "public"."accounts"."refresh_token", "public"."accounts"."access_token", "public"."accounts"."expires_at", "public"."accounts"."token_type", "public"."accounts"."scope", "public"."accounts"."id_token", "public"."accounts"."session_state"

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","github_node_id","name","public_repos","followers","following","account_type","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query COMMIT

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query SELECT "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at" FROM "public"."github_auth" WHERE ("public"."github_auth"."user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query SELECT "public"."accounts"."id", "public"."accounts"."user_id", "public"."accounts"."type", "public"."accounts"."provider", "public"."accounts"."provider_account_id", "public"."accounts"."refresh_token", "public"."accounts"."access_token", "public"."accounts"."expires_at", "public"."accounts"."token_type", "public"."accounts"."scope", "public"."accounts"."id_token", "public"."accounts"."session_state" FROM "public"."accounts" WHERE ("public"."accounts"."user_id" = $1 AND "public"."accounts"."provider" = $2) LIMIT $3 OFFSET $4

stderr | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
Error searching GitHub users: { response: { status: [33m401[39m } }

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 401 for expired GitHub token
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query BEGIN

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query INSERT INTO "public"."accounts" ("id","user_id","type","provider","provider_account_id","access_token") VALUES ($1,$2,$3,$4,$5,$6) RETURNING "public"."accounts"."id", "public"."accounts"."user_id", "public"."accounts"."type", "public"."accounts"."provider", "public"."accounts"."provider_account_id", "public"."accounts"."refresh_token", "public"."accounts"."access_token", "public"."accounts"."expires_at", "public"."accounts"."token_type", "public"."accounts"."scope", "public"."accounts"."id_token", "public"."accounts"."session_state"

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","github_node_id","name","public_repos","followers","following","account_type","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query COMMIT

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query SELECT "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at" FROM "public"."github_auth" WHERE ("public"."github_auth"."user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query SELECT "public"."accounts"."id", "public"."accounts"."user_id", "public"."accounts"."type", "public"."accounts"."provider", "public"."accounts"."provider_account_id", "public"."accounts"."refresh_token", "public"."accounts"."access_token", "public"."accounts"."expires_at", "public"."accounts"."token_type", "public"."accounts"."scope", "public"."accounts"."id_token", "public"."accounts"."session_state" FROM "public"."accounts" WHERE ("public"."accounts"."user_id" = $1 AND "public"."accounts"."provider" = $2) LIMIT $3 OFFSET $4

stderr | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
Error searching GitHub users: Error: Network error
    at [90m/workspaces/hive/[39msrc/__tests__/integration/api/github-users-search.test.ts:232:39
    at [90mfile:///workspaces/hive/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should return 500 for other GitHub API errors
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query BEGIN

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query INSERT INTO "public"."accounts" ("id","user_id","type","provider","provider_account_id","access_token") VALUES ($1,$2,$3,$4,$5,$6) RETURNING "public"."accounts"."id", "public"."accounts"."user_id", "public"."accounts"."type", "public"."accounts"."provider", "public"."accounts"."provider_account_id", "public"."accounts"."refresh_token", "public"."accounts"."access_token", "public"."accounts"."expires_at", "public"."accounts"."token_type", "public"."accounts"."scope", "public"."accounts"."id_token", "public"."accounts"."session_state"

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","github_node_id","name","public_repos","followers","following","account_type","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query COMMIT

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query SELECT "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at" FROM "public"."github_auth" WHERE ("public"."github_auth"."user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query SELECT "public"."accounts"."id", "public"."accounts"."user_id", "public"."accounts"."type", "public"."accounts"."provider", "public"."accounts"."provider_account_id", "public"."accounts"."refresh_token", "public"."accounts"."access_token", "public"."accounts"."expires_at", "public"."accounts"."token_type", "public"."accounts"."scope", "public"."accounts"."id_token", "public"."accounts"."session_state" FROM "public"."accounts" WHERE ("public"."accounts"."user_id" = $1 AND "public"."accounts"."provider" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should handle empty search results
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query BEGIN

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query INSERT INTO "public"."accounts" ("id","user_id","type","provider","provider_account_id","access_token") VALUES ($1,$2,$3,$4,$5,$6) RETURNING "public"."accounts"."id", "public"."accounts"."user_id", "public"."accounts"."type", "public"."accounts"."provider", "public"."accounts"."provider_account_id", "public"."accounts"."refresh_token", "public"."accounts"."access_token", "public"."accounts"."expires_at", "public"."accounts"."token_type", "public"."accounts"."scope", "public"."accounts"."id_token", "public"."accounts"."session_state"

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query INSERT INTO "public"."github_auth" ("id","user_id","github_user_id","github_username","github_node_id","name","public_repos","followers","following","account_type","scopes","created_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) RETURNING "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at"

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query COMMIT

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key" FROM "public"."users" WHERE ("public"."users"."id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query SELECT "public"."github_auth"."id", "public"."github_auth"."user_id", "public"."github_auth"."github_user_id", "public"."github_auth"."github_username", "public"."github_auth"."github_node_id", "public"."github_auth"."name", "public"."github_auth"."bio", "public"."github_auth"."company", "public"."github_auth"."location", "public"."github_auth"."blog", "public"."github_auth"."twitter_username", "public"."github_auth"."public_repos", "public"."github_auth"."public_gists", "public"."github_auth"."followers", "public"."github_auth"."following", "public"."github_auth"."github_created_at", "public"."github_auth"."github_updated_at", "public"."github_auth"."account_type", "public"."github_auth"."scopes", "public"."github_auth"."organizations_hash", "public"."github_auth"."created_at", "public"."github_auth"."updated_at" FROM "public"."github_auth" WHERE ("public"."github_auth"."user_id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query SELECT "public"."accounts"."id", "public"."accounts"."user_id", "public"."accounts"."type", "public"."accounts"."provider", "public"."accounts"."provider_account_id", "public"."accounts"."refresh_token", "public"."accounts"."access_token", "public"."accounts"."expires_at", "public"."accounts"."token_type", "public"."accounts"."scope", "public"."accounts"."id_token", "public"."accounts"."session_state" FROM "public"."accounts" WHERE ("public"."accounts"."user_id" = $1 AND "public"."accounts"."provider" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query SELECT "public"."accounts"."id", "public"."accounts"."user_id", "public"."accounts"."type", "public"."accounts"."provider", "public"."accounts"."provider_account_id", "public"."accounts"."refresh_token", "public"."accounts"."access_token", "public"."accounts"."expires_at", "public"."accounts"."token_type", "public"."accounts"."scope", "public"."accounts"."id_token", "public"."accounts"."session_state" FROM "public"."accounts" WHERE ("public"."accounts"."user_id" = $1 AND "public"."accounts"."provider" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/github-users-search.test.ts > GitHub Users Search API Integration Tests > GET /api/github/users/search > should properly encrypt and decrypt access tokens
prisma:query DELETE FROM "public"."users" WHERE 1=1

 âœ“ src/__tests__/integration/api/github-users-search.test.ts (9 tests) 2776ms
stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query BEGIN

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query INSERT INTO "public"."swarms" ("id","name","swarm_id","swarm_url","status","instance_type","created_at","updated_at","swarm_api_key","swarm_secret_alias","environment_variables","services","wizard_step","step_status","wizard_data","workspace_id") VALUES ($1,$2,$3,$4,CAST($5::text AS "public"."SwarmStatus"),$6,$7,$8,$9,$10,$11,$12,CAST($13::text AS "public"."SwarmWizardStep"),CAST($14::text AS "public"."StepStatus"),$15,$16) RETURNING "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_id", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."instance_type", "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."pool_name", "public"."swarms"."pool_api_key", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."repository_name", "public"."swarms"."default_branch", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_secret_alias", "public"."swarms"."environment_variables", "public"."swarms"."services", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."ingest_ref_id", "public"."swarms"."container_files", "public"."swarms"."swarm_password", "public"."swarms"."workspace_id"

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query COMMIT

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."id" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query UPDATE "public"."workspaces" SET "stakwork_api_key" = $1, "updated_at" = $2 WHERE ("public"."workspaces"."id" = $3 AND 1=1) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_id", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."instance_type", "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."pool_name", "public"."swarms"."pool_api_key", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."repository_name", "public"."swarms"."default_branch", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_secret_alias", "public"."swarms"."environment_variables", "public"."swarms"."services", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."ingest_ref_id", "public"."swarms"."container_files", "public"."swarms"."swarm_password", "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" = $1 LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > creates secret with plaintext value (not encrypted JSON)
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query BEGIN

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query INSERT INTO "public"."swarms" ("id","name","swarm_id","swarm_url","status","instance_type","created_at","updated_at","swarm_api_key","swarm_secret_alias","environment_variables","services","wizard_step","step_status","wizard_data","workspace_id") VALUES ($1,$2,$3,$4,CAST($5::text AS "public"."SwarmStatus"),$6,$7,$8,$9,$10,$11,$12,CAST($13::text AS "public"."SwarmWizardStep"),CAST($14::text AS "public"."StepStatus"),$15,$16) RETURNING "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_id", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."instance_type", "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."pool_name", "public"."swarms"."pool_api_key", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."repository_name", "public"."swarms"."default_branch", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_secret_alias", "public"."swarms"."environment_variables", "public"."swarms"."services", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."ingest_ref_id", "public"."swarms"."container_files", "public"."swarms"."swarm_password", "public"."swarms"."workspace_id"

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query COMMIT

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query BEGIN

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query UPDATE "public"."swarms" SET "swarm_api_key" = $1, "updated_at" = $2 WHERE "public"."swarms"."workspace_id" = $3

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query COMMIT

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."id" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query UPDATE "public"."workspaces" SET "stakwork_api_key" = $1, "updated_at" = $2 WHERE ("public"."workspaces"."id" = $3 AND 1=1) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_id", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."instance_type", "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."pool_name", "public"."swarms"."pool_api_key", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."repository_name", "public"."swarms"."default_branch", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_secret_alias", "public"."swarms"."environment_variables", "public"."swarms"."services", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."ingest_ref_id", "public"."swarms"."container_files", "public"."swarms"."swarm_password", "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" = $1 LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/stakwork-create-customer.test.ts > POST /api/stakwork/create-customer > double-encrypted rows are decrypted back to plaintext before sending
prisma:query DELETE FROM "public"."users" WHERE 1=1

 âœ“ src/__tests__/integration/api/stakwork-create-customer.test.ts (2 tests) 2390ms
stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query BEGIN

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query INSERT INTO "public"."swarms" ("id","name","swarm_id","swarm_url","status","instance_type","created_at","updated_at","swarm_api_key","environment_variables","services","wizard_step","step_status","wizard_data","workspace_id") VALUES ($1,$2,$3,$4,CAST($5::text AS "public"."SwarmStatus"),$6,$7,$8,$9,$10,$11,CAST($12::text AS "public"."SwarmWizardStep"),CAST($13::text AS "public"."StepStatus"),$14,$15) RETURNING "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_id", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."instance_type", "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."pool_name", "public"."swarms"."pool_api_key", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."repository_name", "public"."swarms"."default_branch", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_secret_alias", "public"."swarms"."environment_variables", "public"."swarms"."services", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."ingest_ref_id", "public"."swarms"."container_files", "public"."swarms"."swarm_password", "public"."swarms"."workspace_id"

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query COMMIT

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_id", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."instance_type", "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."pool_name", "public"."swarms"."pool_api_key", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."repository_name", "public"."swarms"."default_branch", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_secret_alias", "public"."swarms"."environment_variables", "public"."swarms"."services", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."ingest_ref_id", "public"."swarms"."container_files", "public"."swarms"."swarm_password", "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."swarm_id" = $1 LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_id", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."instance_type", "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."pool_name", "public"."swarms"."pool_api_key", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."repository_name", "public"."swarms"."default_branch", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_secret_alias", "public"."swarms"."environment_variables", "public"."swarms"."services", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."ingest_ref_id", "public"."swarms"."container_files", "public"."swarms"."swarm_password", "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE ("public"."swarms"."workspace_id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query UPDATE "public"."swarms" SET "services" = $1, "updated_at" = $2 WHERE ("public"."swarms"."workspace_id" = $3 AND 1=1) RETURNING "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."workspace_id", "public"."swarms"."instance_type", "public"."swarms"."repository_name", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_password", "public"."swarms"."pool_api_key", "public"."swarms"."pool_name", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."services", "public"."swarms"."swarm_secret_alias", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."swarm_id", "public"."swarms"."ingest_ref_id", "public"."swarms"."environment_variables", "public"."swarms"."container_files", "public"."swarms"."default_branch"

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
Swarm API Response status: [33m200[39m
Swarm API Response body: {
  "success": true,
  "status": 200,
  "data": {
    "services": []
  }
}

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_id", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."instance_type", "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."pool_name", "public"."swarms"."pool_api_key", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."repository_name", "public"."swarms"."default_branch", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_secret_alias", "public"."swarms"."environment_variables", "public"."swarms"."services", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."ingest_ref_id", "public"."swarms"."container_files", "public"."swarms"."swarm_password", "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."swarm_id" = $1 LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/swarm-stakgraph-services.test.ts > GET /api/swarm/stakgraph/services > proxies with decrypted header and keeps DB encrypted
prisma:query DELETE FROM "public"."users" WHERE 1=1

 âœ“ src/__tests__/integration/api/swarm-stakgraph-services.test.ts (1 test) 2468ms
stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query DELETE FROM "public"."users" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query BEGIN

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query INSERT INTO "public"."users" ("id","name","email","role","timezone","locale","created_at","updated_at","deleted") VALUES ($1,$2,$3,CAST($4::text AS "public"."UserRole"),$5,$6,$7,$8,$9) RETURNING "public"."users"."id", "public"."users"."name", "public"."users"."email", "public"."users"."email_verified", "public"."users"."image", "public"."users"."role"::text, "public"."users"."timezone", "public"."users"."locale", "public"."users"."created_at", "public"."users"."updated_at", "public"."users"."deleted", "public"."users"."deleted_at", "public"."users"."last_login_at", "public"."users"."pool_api_key"

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query INSERT INTO "public"."workspaces" ("id","name","slug","deleted","created_at","updated_at","owner_id") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key"

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query INSERT INTO "public"."swarms" ("id","name","status","instance_type","created_at","updated_at","environment_variables","services","wizard_step","step_status","wizard_data","workspace_id") VALUES ($1,$2,CAST($3::text AS "public"."SwarmStatus"),$4,$5,$6,$7,$8,CAST($9::text AS "public"."SwarmWizardStep"),CAST($10::text AS "public"."StepStatus"),$11,$12) RETURNING "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_id", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."instance_type", "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."pool_name", "public"."swarms"."pool_api_key", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."repository_name", "public"."swarms"."default_branch", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_secret_alias", "public"."swarms"."environment_variables", "public"."swarms"."services", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."ingest_ref_id", "public"."swarms"."container_files", "public"."swarms"."swarm_password", "public"."swarms"."workspace_id"

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query COMMIT

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query SELECT "public"."workspaces"."id", "public"."workspaces"."name", "public"."workspaces"."description", "public"."workspaces"."slug", "public"."workspaces"."deleted", "public"."workspaces"."deleted_at", "public"."workspaces"."created_at", "public"."workspaces"."updated_at", "public"."workspaces"."owner_id", "public"."workspaces"."stakwork_api_key" FROM "public"."workspaces" WHERE ("public"."workspaces"."slug" = $1 AND "public"."workspaces"."deleted" = $2) LIMIT $3 OFFSET $4

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query SELECT "public"."users"."id", "public"."users"."name", "public"."users"."email" FROM "public"."users" WHERE "public"."users"."id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."status"::text, "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query SELECT "public"."repositories"."id", "public"."repositories"."name", "public"."repositories"."repository_url", "public"."repositories"."branch", "public"."repositories"."status"::text, "public"."repositories"."updated_at", "public"."repositories"."workspace_id" FROM "public"."repositories" WHERE "public"."repositories"."workspace_id" IN ($1) OFFSET $2

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."workspace_id", "public"."swarms"."instance_type", "public"."swarms"."repository_name", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_password", "public"."swarms"."pool_api_key", "public"."swarms"."pool_name", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."services", "public"."swarms"."swarm_secret_alias", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."swarm_id", "public"."swarms"."ingest_ref_id", "public"."swarms"."environment_variables", "public"."swarms"."container_files", "public"."swarms"."default_branch" FROM "public"."swarms" WHERE ("public"."swarms"."workspace_id" = $1 AND 1=1) LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
Response status: [33m200[39m
Response body: {
  "success": true,
  "message": "Stakgraph settings retrieved successfully",
  "data": {
    "name": "s2-1757010838656",
    "description": "",
    "repositoryUrl": "",
    "swarmUrl": "",
    "swarmSecretAlias": "",
    "poolName": "cmf5qvzpc00kwuuquog3tgtwo",
    "poolCpu": "2",
    "poolMemory": "4Gi",
    "environmentVariables": [
      {
        "name": "SECRET",
        "value": "my_value"
      }
    ],
    "services": [],
    "status": "ACTIVE",
    "lastUpdated": "2025-09-04T18:33:58.656Z",
    "containerFiles": [],
    "webhookEnsured": false
  }
}

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query SELECT "public"."swarms"."id", "public"."swarms"."name", "public"."swarms"."swarm_id", "public"."swarms"."swarm_url", "public"."swarms"."status"::text, "public"."swarms"."instance_type", "public"."swarms"."created_at", "public"."swarms"."updated_at", "public"."swarms"."pool_name", "public"."swarms"."pool_api_key", "public"."swarms"."pool_cpu", "public"."swarms"."pool_memory", "public"."swarms"."repository_name", "public"."swarms"."default_branch", "public"."swarms"."repository_description", "public"."swarms"."repository_url", "public"."swarms"."swarm_api_key", "public"."swarms"."swarm_secret_alias", "public"."swarms"."environment_variables", "public"."swarms"."services", "public"."swarms"."wizard_step"::text, "public"."swarms"."step_status"::text, "public"."swarms"."wizard_data", "public"."swarms"."ingest_ref_id", "public"."swarms"."container_files", "public"."swarms"."swarm_password", "public"."swarms"."workspace_id" FROM "public"."swarms" WHERE "public"."swarms"."name" = $1 LIMIT $2 OFFSET $3

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query DELETE FROM "public"."attachments" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query DELETE FROM "public"."artifacts" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query DELETE FROM "public"."comments" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query DELETE FROM "public"."roadmap_items" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query DELETE FROM "public"."chat_messages" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query DELETE FROM "public"."roadmaps" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query DELETE FROM "public"."requirements" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query DELETE FROM "public"."user_stories" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query DELETE FROM "public"."tasks" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query DELETE FROM "public"."janitor_recommendations" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query DELETE FROM "public"."janitor_runs" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query DELETE FROM "public"."janitor_configs" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query DELETE FROM "public"."features" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query DELETE FROM "public"."repositories" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query DELETE FROM "public"."products" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query DELETE FROM "public"."swarms" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query DELETE FROM "public"."workspace_members" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query DELETE FROM "public"."workspaces" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query DELETE FROM "public"."sessions" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query DELETE FROM "public"."accounts" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query DELETE FROM "public"."verification_tokens" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query DELETE FROM "public"."github_auth" WHERE 1=1

stdout | src/__tests__/integration/api/workspaces-stakgraph.test.ts > /api/workspaces/[slug]/stakgraph > GET returns decrypted env vars but DB remains encrypted
prisma:query DELETE FROM "public"."users" WHERE 1=1

 âœ“ src/__tests__/integration/api/workspaces-stakgraph.test.ts (1 test) 2338ms

 Test Files  11 passed (11)
      Tests  109 passed (109)
   Start at  18:33:25
   Duration  32.70s (transform 641ms, setup 182ms, collect 1.31s, tests 30.66s, environment 0ms, prepare 341ms)

