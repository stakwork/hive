import {
  makeRes,
  createArtifact,
  ArtifactType,
  PYTHON_CODE,
  JSON_CODE,
  REPOMAP,
  MARKDOWN_EXAMPLE,
} from "./helpers";

// Generate unique IDs to prevent collisions
function generateUniqueId() {
  return `mock_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
}

export function generateCodeResponse() {
  const messageId = generateUniqueId();

  return makeRes(
    "Perfect! I've created the connection leak monitor implementation. Here's what I've built:",
    [
      createArtifact({
        id: "code-artifact-1",
        messageId: messageId,
        type: ArtifactType.CODE,
        content: {
          file: "stakwork/senza-lnd/lib/connection_leak_monitor.rb",
          content: PYTHON_CODE,
          change: "Create main connection leak monitor class",
          action: "create",
        },
      }),
      createArtifact({
        id: "code-artifact-2",
        messageId: messageId,
        type: ArtifactType.CODE,
        content: {
          file: "stakwork/senza-lnd/config/database.json",
          content: JSON_CODE,
          change:
            "Add Aurora Postgres database configuration with connection leak monitoring settings",
          action: "create",
        },
      }),
    ],
  );
}

export function generateFormResponse() {
  const messageId = generateUniqueId();

  return makeRes(
    "I'll help you build a connection leak monitor. Here's my plan:",
    [
      createArtifact({
        id: "form-artifact-1",
        messageId: messageId,
        type: ArtifactType.FORM,
        content: {
          actionText:
            "Here's my plan to implement the connection leak monitor:",
          webhook: "https://stakwork.com/api/chat/confirm",
          options: [
            {
              actionType: "button",
              optionLabel: "✓ Confirm Plan",
              optionResponse: "confirmed",
            },
            {
              actionType: "button",
              optionLabel: "✗ Modify Plan",
              optionResponse: "modify",
            },
          ],
        },
      }),
    ],
  );
}

export function generateChatFormResponse() {
  const messageId = generateUniqueId();

  return makeRes(
    "I need some additional information to proceed with your request:",
    [
      createArtifact({
        id: "chat-form-artifact-1",
        messageId: messageId,
        type: ArtifactType.FORM,
        content: {
          actionText:
            "Please provide more details about what you'd like me to help you with. You can type your response in the input field below.",
          webhook: "https://stakwork.com/api/chat/details",
          options: [
            {
              actionType: "chat",
              optionLabel: "Provide Details",
              optionResponse: "user_details_provided",
            },
          ],
        },
      }),
    ],
  );
}

export function generateBrowserResponse(baseUrl: string) {
  const messageId = generateUniqueId();

  return makeRes("Here's a live preview of the site:", [
    createArtifact({
      id: "browser-artifact-1",
      messageId: messageId,
      type: ArtifactType.BROWSER,
      content: {
        url: baseUrl,
      },
    }),
  ]);
}

export function generateLongformResponse() {
  const messageId = `mock_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;

  return makeRes("", [
    createArtifact({
      id: "longform-1",
      messageId,
      type: ArtifactType.LONGFORM,
      content: {
        title: "Repomap: Project Hive Overview",
        text: REPOMAP,
      },
    }),
  ]);
}

export function generateResponseBasedOnMessage(
  message: string,
  mockBrowserUrl: string,
) {
  const messageText = message.toLowerCase();

  if (process.env.MOCK_BROWSER_URL) {
    mockBrowserUrl = process.env.MOCK_BROWSER_URL;
  }

  if (messageText.includes("browser")) {
    return generateBrowserResponse(mockBrowserUrl);
  } else if (messageText.includes("code")) {
    return generateCodeResponse();
  } else if (messageText.includes("chat")) {
    return generateChatFormResponse();
  } else if (messageText.includes("longform")) {
    return generateLongformResponse();
  } else if (messageText.includes("form")) {
    return generateFormResponse();
  } else if (messageText.includes("confirmed")) {
    return makeRes("Ok! Let's move forward with this plan");
  } else if (messageText.includes("modify")) {
    return makeRes("What do you want to modify?");
  } else if (messageText.includes("markdown")) {
    return makeRes(MARKDOWN_EXAMPLE);
  } else {
    return makeRes("Autogenerated response.");
  }
}
