generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                 String            @id @default(cuid())
  name               String?
  email              String?           @unique
  emailVerified      DateTime?         @map("email_verified")
  image              String?
  role               UserRole          @default(USER)
  timezone           String?           @default("UTC")
  locale             String?           @default("en")
  createdAt          DateTime          @default(now()) @map("created_at")
  updatedAt          DateTime          @updatedAt @map("updated_at")
  deleted            Boolean           @default(false)
  deletedAt          DateTime?         @map("deleted_at")
  lastLoginAt        DateTime?         @map("last_login_at")
  poolApiKey         String?           @map("pool_api_key")
  accounts           Account[]
  comments           Comment[]
  createdFeatures    Feature[]         @relation("FeatureCreator")
  updatedFeatures    Feature[]         @relation("FeatureUpdater")
  githubAuth         GitHubAuth?
  sessions           Session[]
  assignedTasks      Task[]            @relation("TaskAssignee")
  createdTasks       Task[]            @relation("TaskCreator")
  updatedTasks       Task[]            @relation("TaskUpdater")
  createdUserStories UserStory[]       @relation("UserStoryCreator")
  updatedUserStories UserStory[]       @relation("UserStoryUpdater")
  workspaceMembers   WorkspaceMember[]
  ownedWorkspaces    Workspace[]       @relation("WorkspaceOwner")

  @@index([createdAt])
  @@index([deleted])
  @@index([email])
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model GitHubAuth {
  id                String    @id @default(cuid())
  userId            String    @unique @map("user_id")
  githubUserId      String    @map("github_user_id")
  githubUsername    String    @map("github_username")
  githubNodeId      String?   @map("github_node_id")
  name              String?
  bio               String?
  company           String?
  location          String?
  blog              String?
  twitterUsername   String?   @map("twitter_username")
  publicRepos       Int?      @map("public_repos")
  publicGists       Int?      @map("public_gists")
  followers         Int?
  following         Int?
  githubCreatedAt   DateTime? @map("github_created_at")
  githubUpdatedAt   DateTime? @map("github_updated_at")
  accountType       String?   @map("account_type")
  scopes            String[]  @default([])
  organizationsHash String?   @map("organizations_hash")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([githubUserId])
  @@index([githubUsername])
  @@map("github_auth")
}

model Workspace {
  id             String            @id @default(cuid())
  name           String
  description    String?
  slug           String            @unique
  deleted        Boolean           @default(false)
  deletedAt      DateTime?         @map("deleted_at")
  createdAt      DateTime          @default(now()) @map("created_at")
  updatedAt      DateTime          @updatedAt @map("updated_at")
  ownerId        String            @map("owner_id")
  stakworkApiKey String?           @map("stakwork_api_key")
  products       Product[]
  repositories   Repository[]
  swarm          Swarm?
  tasks          Task[]
  members        WorkspaceMember[]
  owner          User              @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([ownerId])
  @@index([deleted])
  @@map("workspaces")
}

model WorkspaceMember {
  id          String        @id @default(cuid())
  workspaceId String        @map("workspace_id")
  userId      String        @map("user_id")
  role        WorkspaceRole @default(VIEWER)
  joinedAt    DateTime      @default(now()) @map("joined_at")
  leftAt      DateTime?     @map("left_at")
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, userId])
  @@index([workspaceId])
  @@index([userId])
  @@map("workspace_members")
}

model Swarm {
  id                    String          @id @default(cuid())
  name                  String          @unique
  swarmId               String?         @map("swarm_id")
  swarmUrl              String?         @map("swarm_url")
  status                SwarmStatus     @default(PENDING)
  instanceType          String          @default("XL") @map("instance_type")
  createdAt             DateTime        @default(now()) @map("created_at")
  updatedAt             DateTime        @updatedAt @map("updated_at")
  poolName              String?         @map("pool_name")
  repositoryName        String?         @map("repository_name")
  repositoryDescription String?         @map("repository_description")
  repositoryUrl         String?         @map("repository_url")
  swarmApiKey           String?         @map("swarm_api_key")
  swarmSecretAlias      String?         @map("swarm_secret_alias")
  environmentVariables  Json            @default("[]") @map("environment_variables")
  services              Json            @default("[]")
  wizardStep            SwarmWizardStep @default(WELCOME) @map("wizard_step")
  stepStatus            StepStatus      @default(PENDING) @map("step_status")
  wizardData            Json            @default("{}") @map("wizard_data")
  ingestRefId           String?         @map("ingest_ref_id")
  containerFiles        Json?           @map("container_files")
  workspaceId           String          @unique @map("workspace_id")
  defaultBranch         String?         @map("default_branch")
  workspace             Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([swarmId])
  @@map("swarms")
}

model Repository {
  id            String           @id @default(cuid())
  name          String
  repositoryUrl String           @map("repository_url")
  branch        String           @default("main")
  status        RepositoryStatus @default(PENDING)
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")
  workspaceId   String           @map("workspace_id")
  workspace     Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  tasks         Task[]

  @@unique([repositoryUrl, workspaceId], name: "repositoryUrl_workspaceId")
  @@index([workspaceId])
  @@map("repositories")
}

model Product {
  id          String    @id @default(cuid())
  name        String
  description String?
  vision      String?
  workspaceId String    @map("workspace_id")
  deleted     Boolean   @default(false)
  deletedAt   DateTime? @map("deleted_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  features    Feature[]
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  roadmaps    Roadmap[]

  @@index([workspaceId])
  @@index([deleted])
  @@map("products")
}

model Feature {
  id           String        @id @default(cuid())
  title        String
  description  String?
  productId    String        @map("product_id")
  phase        Int           @default(0)
  parentId     String?       @map("parent_id")
  status       FeatureStatus @default(IDEA)
  priority     Priority      @default(MEDIUM)
  createdById  String        @map("created_by_id")
  updatedById  String        @map("updated_by_id")
  deleted      Boolean       @default(false)
  deletedAt    DateTime?     @map("deleted_at")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  comments     Comment[]     @relation("FeatureComments")
  createdBy    User          @relation("FeatureCreator", fields: [createdById], references: [id])
  parent       Feature?      @relation("FeaturePhases", fields: [parentId], references: [id])
  phases       Feature[]     @relation("FeaturePhases")
  product      Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  updatedBy    User          @relation("FeatureUpdater", fields: [updatedById], references: [id])
  requirements Requirement[]
  roadmapItems RoadmapItem[]
  userStories  UserStory[]

  @@index([productId])
  @@index([parentId])
  @@index([status])
  @@index([priority])
  @@index([deleted])
  @@map("features")
}

model UserStory {
  id                 String      @id @default(cuid())
  title              String
  description        String?
  acceptanceCriteria String?     @map("acceptance_criteria")
  featureId          String      @map("feature_id")
  priority           Priority    @default(MEDIUM)
  storyPoints        Int?        @map("story_points")
  status             StoryStatus @default(BACKLOG)
  createdById        String      @map("created_by_id")
  updatedById        String      @map("updated_by_id")
  deleted            Boolean     @default(false)
  deletedAt          DateTime?   @map("deleted_at")
  createdAt          DateTime    @default(now()) @map("created_at")
  updatedAt          DateTime    @updatedAt @map("updated_at")
  comments           Comment[]   @relation("UserStoryComments")
  createdBy          User        @relation("UserStoryCreator", fields: [createdById], references: [id])
  feature            Feature     @relation(fields: [featureId], references: [id], onDelete: Cascade)
  updatedBy          User        @relation("UserStoryUpdater", fields: [updatedById], references: [id])

  @@index([featureId])
  @@index([status])
  @@index([priority])
  @@index([deleted])
  @@map("user_stories")
}

model Requirement {
  id          String            @id @default(cuid())
  title       String
  description String?
  type        RequirementType   @default(FUNCTIONAL)
  featureId   String            @map("feature_id")
  priority    MoSCoWPriority    @default(SHOULD_HAVE)
  status      RequirementStatus @default(DRAFT)
  deleted     Boolean           @default(false)
  deletedAt   DateTime?         @map("deleted_at")
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")
  comments    Comment[]         @relation("RequirementComments")
  feature     Feature           @relation(fields: [featureId], references: [id], onDelete: Cascade)

  @@index([featureId])
  @@index([type])
  @@index([status])
  @@index([deleted])
  @@map("requirements")
}

model Task {
  id                  String          @id @default(cuid())
  title               String
  description         String?
  workspaceId         String          @map("workspace_id")
  assigneeId          String?         @map("assignee_id")
  repositoryId        String?         @map("repository_id")
  status              TaskStatus      @default(TODO)
  priority            Priority        @default(MEDIUM)
  estimatedHours      Int?            @map("estimated_hours")
  actualHours         Int?            @map("actual_hours")
  createdById         String          @map("created_by_id")
  updatedById         String          @map("updated_by_id")
  deleted             Boolean         @default(false)
  deletedAt           DateTime?       @map("deleted_at")
  createdAt           DateTime        @default(now()) @map("created_at")
  updatedAt           DateTime        @updatedAt @map("updated_at")
  workflowCompletedAt DateTime?       @map("workflow_completed_at")
  workflowStartedAt   DateTime?       @map("workflow_started_at")
  workflowStatus      WorkflowStatus? @default(PENDING) @map("workflow_status")
  chatMessages        ChatMessage[]
  comments            Comment[]       @relation("TaskComments")
  assignee            User?           @relation("TaskAssignee", fields: [assigneeId], references: [id])
  createdBy           User            @relation("TaskCreator", fields: [createdById], references: [id])
  repository          Repository?     @relation(fields: [repositoryId], references: [id])
  updatedBy           User            @relation("TaskUpdater", fields: [updatedById], references: [id])
  workspace           Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
  @@index([assigneeId])
  @@index([status])
  @@index([deleted])
  @@map("tasks")
}

model ChatMessage {
  id                String     @id @default(cuid())
  taskId            String?    @map("task_id")
  message           String
  role              ChatRole
  timestamp         DateTime   @default(now())
  contextTags       Json       @default("[]") @map("context_tags")
  status            ChatStatus @default(SENDING)
  sourceWebsocketID String?    @map("source_websocket_id")
  replyId           String?    @map("reply_id")
  createdAt         DateTime   @default(now()) @map("created_at")
  updatedAt         DateTime   @updatedAt @map("updated_at")
  workflowUrl       String?    @map("workflow_url")
  artifacts         Artifact[]
  task              Task?      @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([timestamp])
  @@map("chat_messages")
}

model Artifact {
  id        String       @id @default(cuid())
  messageId String       @map("message_id")
  type      ArtifactType
  content   Json?
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")
  message   ChatMessage  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
  @@index([type])
  @@map("artifacts")
}

model Roadmap {
  id          String        @id @default(cuid())
  name        String
  description String?
  productId   String        @map("product_id")
  timeHorizon TimeHorizon   @default(QUARTER) @map("time_horizon")
  startDate   DateTime      @map("start_date")
  endDate     DateTime      @map("end_date")
  deleted     Boolean       @default(false)
  deletedAt   DateTime?     @map("deleted_at")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  items       RoadmapItem[]
  product     Product       @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([deleted])
  @@map("roadmaps")
}

model RoadmapItem {
  id               String    @id @default(cuid())
  roadmapId        String    @map("roadmap_id")
  featureId        String    @map("feature_id")
  plannedStartDate DateTime  @map("planned_start_date")
  plannedEndDate   DateTime  @map("planned_end_date")
  actualStartDate  DateTime? @map("actual_start_date")
  actualEndDate    DateTime? @map("actual_end_date")
  dependencies     String[]  @default([])
  milestone        Boolean   @default(false)
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  feature          Feature   @relation(fields: [featureId], references: [id], onDelete: Cascade)
  roadmap          Roadmap   @relation(fields: [roadmapId], references: [id], onDelete: Cascade)

  @@unique([roadmapId, featureId])
  @@index([roadmapId])
  @@index([featureId])
  @@map("roadmap_items")
}

model Comment {
  id            String        @id @default(cuid())
  content       String
  entityType    CommentEntity @map("entity_type")
  featureId     String?       @map("feature_id")
  userStoryId   String?       @map("user_story_id")
  taskId        String?       @map("task_id")
  requirementId String?       @map("requirement_id")
  parentId      String?       @map("parent_id")
  authorId      String        @map("author_id")
  deleted       Boolean       @default(false)
  deletedAt     DateTime?     @map("deleted_at")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  author        User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  feature       Feature?      @relation("FeatureComments", fields: [featureId], references: [id], onDelete: Cascade)
  parent        Comment?      @relation("CommentThread", fields: [parentId], references: [id])
  replies       Comment[]     @relation("CommentThread")
  requirement   Requirement?  @relation("RequirementComments", fields: [requirementId], references: [id], onDelete: Cascade)
  task          Task?         @relation("TaskComments", fields: [taskId], references: [id], onDelete: Cascade)
  userStory     UserStory?    @relation("UserStoryComments", fields: [userStoryId], references: [id], onDelete: Cascade)

  @@index([featureId])
  @@index([userStoryId])
  @@index([taskId])
  @@index([requirementId])
  @@index([authorId])
  @@index([deleted])
  @@map("comments")
}

enum ChatRole {
  USER
  ASSISTANT
}

enum ChatStatus {
  SENDING
  SENT
  ERROR
}

enum ContextTagType {
  PRODUCT_BRIEF
  FEATURE_BRIEF
  SCHEMATIC
}

enum ArtifactType {
  FORM
  CODE
  BROWSER
  IDE
  MEDIA
  STREAM
  LONGFORM
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum WorkspaceRole {
  OWNER
  ADMIN
  PM
  DEVELOPER
  STAKEHOLDER
  VIEWER
}

enum SwarmStatus {
  PENDING
  ACTIVE
  FAILED
  DELETED
}

enum RepositoryStatus {
  PENDING
  SYNCED
  FAILED
}

enum FeatureStatus {
  IDEA
  PLANNED
  IN_PROGRESS
  DONE
  CANCELLED
}

enum StoryStatus {
  BACKLOG
  IN_PROGRESS
  DONE
  CANCELLED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
  CANCELLED
}

enum WorkflowStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ERROR
  HALTED
  FAILED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum RequirementType {
  FUNCTIONAL
  NON_FUNCTIONAL
  TECHNICAL
  BUSINESS
}

enum MoSCoWPriority {
  MUST_HAVE
  SHOULD_HAVE
  COULD_HAVE
  WONT_HAVE
}

enum RequirementStatus {
  DRAFT
  APPROVED
  IMPLEMENTED
  REJECTED
}

enum TimeHorizon {
  QUARTER
  HALF_YEAR
  YEAR
  CUSTOM
}

enum CommentEntity {
  FEATURE
  USER_STORY
  TASK
  REQUIREMENT
}

enum SwarmWizardStep {
  WELCOME
  REPOSITORY_SELECT
  PROJECT_NAME
  GRAPH_INFRASTRUCTURE
  INGEST_CODE
  ADD_SERVICES
  ENVIRONMENT_SETUP
  REVIEW_POOL_ENVIRONMENT
  STAKWORK_SETUP
  COMPLETION
}

enum StepStatus {
  PENDING
  STARTED
  PROCESSING
  COMPLETED
  FAILED
}
