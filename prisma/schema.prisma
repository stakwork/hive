// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================
// AUTHENTICATION & USER MANAGEMENT
// =============================================

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token      String? 
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope             String?
  id_token           String?
  session_state      String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?    @map("email_verified")
  image         String?
  role          UserRole     @default(USER)
  timezone      String?      @default("UTC")
  locale        String?      @default("en")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  deleted       Boolean      @default(false)
  deletedAt     DateTime?    @map("deleted_at")
  lastLoginAt   DateTime?    @map("last_login_at")
  poolApiKey    String?      @map("pool_api_key") // Pool API Key for Pool Manager (will be removed in separate PR)
  
  // Authentication relationships
  accounts      Account[]
  sessions      Session[]
  githubAuth    GitHubAuth?

  
  // Workspace relationships
  ownedWorkspaces    Workspace[]       @relation("WorkspaceOwner")
  workspaceMembers   WorkspaceMember[]
  
  // Task assignments
  assignedTasks      Task[]            @relation("TaskAssignee")
  
  // Audit trail
  createdFeatures    Feature[]         @relation("FeatureCreator")
  updatedFeatures    Feature[]         @relation("FeatureUpdater")
  createdUserStories UserStory[]       @relation("UserStoryCreator")
  updatedUserStories UserStory[]       @relation("UserStoryUpdater")
  createdTasks       Task[]            @relation("TaskCreator")
  updatedTasks       Task[]            @relation("TaskUpdater")
  
  // Comments and discussions
  comments           Comment[]

  @@index([createdAt])
  @@index([deleted])
  @@index([email])
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model GitHubAuth {
  id                String    @id @default(cuid())
  userId            String    @unique @map("user_id")
  githubUserId      String    @map("github_user_id")
  githubUsername    String    @map("github_username")
  githubNodeId      String?   @map("github_node_id")
  name              String?
  bio               String?
  company           String?
  location          String?
  blog              String?
  twitterUsername   String?   @map("twitter_username")
  publicRepos       Int?      @map("public_repos")
  publicGists       Int?      @map("public_gists")
  followers         Int?
  following         Int?
  githubCreatedAt   DateTime? @map("github_created_at")
  githubUpdatedAt   DateTime? @map("github_updated_at")
  accountType       String?   @map("account_type")
  scopes            String[]  @default([])
  organizationsHash String?   @map("organizations_hash")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([githubUserId])
  @@index([githubUsername])
  @@map("github_auth")
}

// =============================================
// WORKSPACE & ORGANIZATION
// =============================================

model Workspace {
  id          String   @id @default(cuid())
  name        String
  description String?
  slug        String   @unique
  deleted     Boolean  @default(false)
  deletedAt   DateTime? @map("deleted_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Owner of the workspace
  ownerId String @map("owner_id")
  owner   User   @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  // Members of the workspace
  members WorkspaceMember[]
  
  // Infrastructure
  swarm        Swarm?
  repositories Repository[]
  
  // PM Structure
  products Product[]
  tasks    Task[]

  // Stakwork credentials
  stakworkApiKey String? @map("stakwork_api_key")

  @@index([ownerId])
  @@index([deleted])
  @@map("workspaces")
}

model WorkspaceMember {
  id          String        @id @default(cuid())
  workspaceId String        @map("workspace_id")
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId      String        @map("user_id")
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  role        WorkspaceRole @default(VIEWER)
  joinedAt    DateTime      @default(now()) @map("joined_at")
  leftAt      DateTime?     @map("left_at")
  
  @@unique([workspaceId, userId])
  @@index([workspaceId])
  @@index([userId])
  @@map("workspace_members")
}

// =============================================
// INFRASTRUCTURE (Swarm & Repositories)
// =============================================

model Swarm {
  id           String      @id @default(cuid())
  name         String      @unique // domain name used for creation
  swarmId      String?     @map("swarm_id") // swarm_id from 3rd party
  swarmUrl     String?     @map("swarm_url") // https://{name}.sphinx.chat/api
  status       SwarmStatus @default(PENDING) // pending, active, failed, deleted
  instanceType String      @default("XL") @map("instance_type")
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")

  // Stakgraph configuration fields
  poolName              String? @map("pool_name")
  poolApiKey            String? @map("pool_api_key") // Pool API Key for Pool Manager
  repositoryName        String? @map("repository_name")
  defaultBranch         String? @map("default_branch")
  repositoryDescription String? @map("repository_description")
  repositoryUrl         String? @map("repository_url")
  swarmApiKey           String? @map("swarm_api_key")
  swarmSecretAlias      String? @map("swarm_secret_alias") // e.g., {{SWARM_{regex_swarm_id_number}_API_KEY}}
  environmentVariables  Json    @default("[]") @map("environment_variables")
  services              Json    @default("[]")


  // Wizard progress tracking
  wizardStep   SwarmWizardStep @default(WELCOME) @map("wizard_step")
  stepStatus   StepStatus      @default(PENDING) @map("step_status")
  wizardData   Json     @default("{}") @map("wizard_data")
  ingestRefId String? @map("ingest_ref_id")

  // Generated container files
  containerFiles Json? @map("container_files")

  // One-to-one relationship with workspace
  workspaceId String @unique @map("workspace_id")
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([swarmId])
  @@map("swarms")
}

model Repository {
  id            String           @id @default(cuid())
  name          String
  repositoryUrl String           @map("repository_url")
  branch        String           @default("main")
  status        RepositoryStatus @default(PENDING)
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")
  
  // Repository belongs to workspace
  workspaceId String @map("workspace_id")
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  // Tasks can be linked to repositories
  tasks Task[]

  @@index([workspaceId])
  @@unique([repositoryUrl, workspaceId], name: "repositoryUrl_workspaceId")
  @@map("repositories")
}

// =============================================
// PRODUCT MANAGEMENT HIERARCHY
// =============================================

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  vision      String?
  
  workspaceId String @map("workspace_id")
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  deleted     Boolean   @default(false)
  deletedAt   DateTime? @map("deleted_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  features    Feature[]
  roadmaps    Roadmap[]
  
  @@index([workspaceId])
  @@index([deleted])
  @@map("products")
}

// Goal / Objective
model Feature {
  id          String        @id @default(cuid())
  title       String
  description String?
  
  productId   String        @map("product_id")
  product     Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  // Phase support - 0 for main feature, 1,2,3... for phases
  phase       Int           @default(0)
  parentId    String?       @map("parent_id")
  parent      Feature?      @relation("FeaturePhases", fields: [parentId], references: [id])
  phases      Feature[]     @relation("FeaturePhases")
  
  status      FeatureStatus @default(IDEA)
  priority    Priority      @default(MEDIUM)
  
  // Audit fields
  createdById String        @map("created_by_id")
  createdBy   User          @relation("FeatureCreator", fields: [createdById], references: [id])
  updatedById String        @map("updated_by_id")
  updatedBy   User          @relation("FeatureUpdater", fields: [updatedById], references: [id])
  
  deleted     Boolean       @default(false)
  deletedAt   DateTime?     @map("deleted_at")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  
  userStories  UserStory[]
  requirements Requirement[]
  roadmapItems RoadmapItem[]
  comments     Comment[]     @relation("FeatureComments")
  
  @@index([productId])
  @@index([parentId])
  @@index([status])
  @@index([priority])
  @@index([deleted])
  @@map("features")
}

model UserStory {
  id                  String      @id @default(cuid())
  title               String
  description         String?
  acceptanceCriteria  String?     @map("acceptance_criteria")
  
  featureId           String      @map("feature_id")
  feature             Feature     @relation(fields: [featureId], references: [id], onDelete: Cascade)
  
  priority            Priority    @default(MEDIUM)
  storyPoints         Int?        @map("story_points")
  status              StoryStatus @default(BACKLOG)
  
  // Audit fields
  createdById         String      @map("created_by_id")
  createdBy           User        @relation("UserStoryCreator", fields: [createdById], references: [id])
  updatedById         String      @map("updated_by_id")
  updatedBy           User        @relation("UserStoryUpdater", fields: [updatedById], references: [id])
  
  deleted             Boolean     @default(false)
  deletedAt           DateTime?   @map("deleted_at")
  createdAt           DateTime    @default(now()) @map("created_at")
  updatedAt           DateTime    @updatedAt @map("updated_at")
  
  comments            Comment[]   @relation("UserStoryComments")
  
  @@index([featureId])
  @@index([status])
  @@index([priority])
  @@index([deleted])
  @@map("user_stories")
}

model Requirement {
  id          String             @id @default(cuid())
  title       String
  description String?
  type        RequirementType    @default(FUNCTIONAL)
  
  featureId   String             @map("feature_id")
  feature     Feature            @relation(fields: [featureId], references: [id], onDelete: Cascade)
  
  priority    MoSCoWPriority     @default(SHOULD_HAVE)
  status      RequirementStatus  @default(DRAFT)
  
  deleted     Boolean            @default(false)
  deletedAt   DateTime?          @map("deleted_at")
  createdAt   DateTime           @default(now()) @map("created_at")
  updatedAt   DateTime           @updatedAt @map("updated_at")
  
  comments    Comment[]          @relation("RequirementComments")
  
  @@index([featureId])
  @@index([type])
  @@index([status])
  @@index([deleted])
  @@map("requirements")
}

// Chat
model Task {
  id            String      @id @default(cuid())
  title         String
  description   String?
  
  // Direct workspace relationship
  workspaceId   String      @map("workspace_id")
  workspace     Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  // Assignment and repository linking
  assigneeId    String?     @map("assignee_id")
  assignee      User?       @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  repositoryId  String?     @map("repository_id")
  repository    Repository? @relation(fields: [repositoryId], references: [id], onDelete: SetNull)
  
  status        TaskStatus     @default(TODO)
  priority      Priority       @default(MEDIUM)
  estimatedHours Int?          @map("estimated_hours")
  actualHours   Int?           @map("actual_hours")
  
  // Workflow status tracking
  workflowStatus     WorkflowStatus? @default(PENDING) @map("workflow_status")
  workflowStartedAt  DateTime?       @map("workflow_started_at")
  workflowCompletedAt DateTime?      @map("workflow_completed_at")
  
  // Stakwork project ID for log subscription
  stakworkProjectId Int?            @map("stakwork_project_id")
  
  // Audit fields
  createdById   String      @map("created_by_id")
  createdBy     User        @relation("TaskCreator", fields: [createdById], references: [id])
  updatedById   String      @map("updated_by_id")
  updatedBy     User        @relation("TaskUpdater", fields: [updatedById], references: [id])
  
  deleted       Boolean     @default(false)
  deletedAt     DateTime?   @map("deleted_at")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  
  comments      Comment[]   @relation("TaskComments")
  chatMessages  ChatMessage[] 

  @@index([workspaceId])
  @@index([assigneeId])
  @@index([status])
  @@index([deleted])
  @@map("tasks")
}

// =============================================
// CHAT & ARTIFACTS
// =============================================

model ChatMessage {
  id                  String      @id @default(cuid())
  taskId              String?     @map("task_id")
  task                Task?       @relation(fields: [taskId], references: [id], onDelete: Cascade)
  message             String
  workflowUrl         String?     @map("workflow_url")
  role                ChatRole
  timestamp           DateTime    @default(now())
  contextTags         Json        @default("[]") @map("context_tags") // stores ContextTag[]
  status              ChatStatus  @default(SENDING)
  sourceWebsocketID   String?     @map("source_websocket_id")
  replyId             String?     @map("reply_id")
  
  artifacts           Artifact[]
  
  createdAt           DateTime    @default(now()) @map("created_at")
  updatedAt           DateTime    @updatedAt @map("updated_at")
  
  @@index([taskId])
  @@index([timestamp])
  @@map("chat_messages")
}

model Artifact {
  id            String        @id @default(cuid())
  messageId     String        @map("message_id")
  message       ChatMessage   @relation(fields: [messageId], references: [id], onDelete: Cascade)
  type          ArtifactType
  content       Json?         // stores FormContent | CodeContent | BrowserContent
  icon          String?       // Icon for this artifact
  
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  
  @@index([messageId])
  @@index([type])
  @@map("artifacts")
}

// Add these enums to your existing enums section:
enum ChatRole {
  USER
  ASSISTANT
}

enum ChatStatus {
  SENDING
  SENT
  ERROR
}

enum ContextTagType {
  PRODUCT_BRIEF
  FEATURE_BRIEF
  SCHEMATIC
}

enum ArtifactType {
  FORM
  CODE
  BROWSER
  IDE
  MEDIA
  STREAM
  LONGFORM
}

// =============================================
// ROADMAP MANAGEMENT
// =============================================

model Roadmap {
  id          String         @id @default(cuid())
  name        String
  description String?
  
  productId   String         @map("product_id")
  product     Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  timeHorizon TimeHorizon    @default(QUARTER) @map("time_horizon")
  startDate   DateTime       @map("start_date")
  endDate     DateTime       @map("end_date")
  
  deleted     Boolean        @default(false)
  deletedAt   DateTime?      @map("deleted_at")
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")
  
  items       RoadmapItem[]
  
  @@index([productId])
  @@index([deleted])
  @@map("roadmaps")
}

model RoadmapItem {
  id                String    @id @default(cuid())
  roadmapId         String    @map("roadmap_id")
  roadmap           Roadmap   @relation(fields: [roadmapId], references: [id], onDelete: Cascade)
  featureId         String    @map("feature_id")
  feature           Feature   @relation(fields: [featureId], references: [id], onDelete: Cascade)
  
  plannedStartDate  DateTime  @map("planned_start_date")
  plannedEndDate    DateTime  @map("planned_end_date")
  actualStartDate   DateTime? @map("actual_start_date")
  actualEndDate     DateTime? @map("actual_end_date")
  
  // Dependencies stored as array of roadmap item IDs
  dependencies      String[]  @default([])
  milestone         Boolean   @default(false)
  
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  
  @@unique([roadmapId, featureId])
  @@index([roadmapId])
  @@index([featureId])
  @@map("roadmap_items")
}

// =============================================
// COMMUNICATION & COLLABORATION
// =============================================

model Comment {
  id          String        @id @default(cuid())
  content     String
  
  // Polymorphic relationship - can comment on different entity types
  entityType  CommentEntity @map("entity_type")
  featureId   String?       @map("feature_id")
  feature     Feature?      @relation("FeatureComments", fields: [featureId], references: [id], onDelete: Cascade)
  userStoryId String?       @map("user_story_id")
  userStory   UserStory?    @relation("UserStoryComments", fields: [userStoryId], references: [id], onDelete: Cascade)
  taskId      String?       @map("task_id")
  task        Task?         @relation("TaskComments", fields: [taskId], references: [id], onDelete: Cascade)
  requirementId String?     @map("requirement_id")
  requirement Requirement? @relation("RequirementComments", fields: [requirementId], references: [id], onDelete: Cascade)
  
  // Threading support
  parentId    String?       @map("parent_id")
  parent      Comment?      @relation("CommentThread", fields: [parentId], references: [id])
  replies     Comment[]     @relation("CommentThread")
  
  authorId    String        @map("author_id")
  author      User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  deleted     Boolean       @default(false)
  deletedAt   DateTime?     @map("deleted_at")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  
  @@index([featureId])
  @@index([userStoryId])
  @@index([taskId])
  @@index([requirementId])
  @@index([authorId])
  @@index([deleted])
  @@map("comments")
}

// =============================================
// ENUMS
// =============================================

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum WorkspaceRole {
  OWNER
  ADMIN
  PM
  DEVELOPER
  STAKEHOLDER
  VIEWER
}

enum SwarmStatus {
  PENDING
  ACTIVE
  FAILED
  DELETED
}

enum RepositoryStatus {
  PENDING
  SYNCED
  FAILED
}

enum FeatureStatus {
  IDEA
  PLANNED
  IN_PROGRESS
  DONE
  CANCELLED
}

enum StoryStatus {
  BACKLOG
  IN_PROGRESS
  DONE
  CANCELLED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
  CANCELLED
}

enum WorkflowStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ERROR
  HALTED
  FAILED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum RequirementType {
  FUNCTIONAL
  NON_FUNCTIONAL
  TECHNICAL
  BUSINESS
}

enum MoSCoWPriority {
  MUST_HAVE
  SHOULD_HAVE
  COULD_HAVE
  WONT_HAVE
}

enum RequirementStatus {
  DRAFT
  APPROVED
  IMPLEMENTED
  REJECTED
}

enum TimeHorizon {
  QUARTER
  HALF_YEAR
  YEAR
  CUSTOM
}

enum CommentEntity {
  FEATURE
  USER_STORY
  TASK
  REQUIREMENT
}

enum SwarmWizardStep {
  WELCOME
  REPOSITORY_SELECT
  PROJECT_NAME
  GRAPH_INFRASTRUCTURE
  INGEST_CODE
  ADD_SERVICES
  ENVIRONMENT_SETUP
  REVIEW_POOL_ENVIRONMENT
  STAKWORK_SETUP
  COMPLETION
}

enum StepStatus {
  PENDING
  STARTED
  PROCESSING
  COMPLETED
  FAILED
}