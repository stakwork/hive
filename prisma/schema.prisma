generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  app_access_token  String? @map("app_access_token")
  app_expires_at    Int?    @map("app_expires_at")
  app_refresh_token String? @map("app_refresh_token")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  githubState  String?  @map("github_state")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                       String                  @id @default(cuid())
  name                     String?
  email                    String?                 @unique
  emailVerified            DateTime?               @map("email_verified")
  image                    String?
  role                     UserRole                @default(USER)
  timezone                 String?                 @default("UTC")
  locale                   String?                 @default("en")
  createdAt                DateTime                @default(now()) @map("created_at")
  updatedAt                DateTime                @updatedAt @map("updated_at")
  deleted                  Boolean                 @default(false)
  deletedAt                DateTime?               @map("deleted_at")
  lastLoginAt              DateTime?               @map("last_login_at")
  poolApiKey               String?                 @map("pool_api_key")
  accounts                 Account[]
  assignedFeatures         Feature[]               @relation("FeatureAssignee")
  createdFeatures          Feature[]               @relation("FeatureCreator")
  updatedFeatures          Feature[]               @relation("FeatureUpdater")
  githubAuth               GitHubAuth?
  acceptedRecommendations  JanitorRecommendation[] @relation("RecommendationAcceptor")
  dismissedRecommendations JanitorRecommendation[] @relation("RecommendationDismissor")
  sessions                 Session[]
  sourceControlTokens      SourceControlToken[]
  assignedTasks            Task[]                  @relation("TaskAssignee")
  createdTasks             Task[]                  @relation("TaskCreator")
  updatedTasks             Task[]                  @relation("TaskUpdater")
  createdUserStories       UserStory[]             @relation("UserStoryCreator")
  updatedUserStories       UserStory[]             @relation("UserStoryUpdater")
  workspaceMembers         WorkspaceMember[]
  ownedWorkspaces          Workspace[]             @relation("WorkspaceOwner")

  @@index([createdAt])
  @@index([deleted])
  @@index([email])
  @@map("users")
}

model GitHubAuth {
  id                String    @id @default(cuid())
  userId            String    @unique @map("user_id")
  githubUserId      String    @map("github_user_id")
  githubUsername    String    @map("github_username")
  githubNodeId      String?   @map("github_node_id")
  name              String?
  bio               String?
  company           String?
  location          String?
  blog              String?
  twitterUsername   String?   @map("twitter_username")
  publicRepos       Int?      @map("public_repos")
  publicGists       Int?      @map("public_gists")
  followers         Int?
  following         Int?
  githubCreatedAt   DateTime? @map("github_created_at")
  githubUpdatedAt   DateTime? @map("github_updated_at")
  accountType       String?   @map("account_type")
  scopes            String[]  @default([])
  organizationsHash String?   @map("organizations_hash")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([githubUserId])
  @@index([githubUsername])
  @@map("github_auth")
}

model SourceControlOrg {
  id                   String               @id @default(cuid())
  type                 SourceControlOrgType @default(ORG)
  githubLogin          String               @unique
  githubInstallationId Int                  @unique @map("github_installation_id")
  name                 String?
  avatarUrl            String?              @map("avatar_url")
  description          String?
  createdAt            DateTime             @default(now()) @map("created_at")
  updatedAt            DateTime             @updatedAt @map("updated_at")
  tokens               SourceControlToken[]
  workspaces           Workspace[]

  @@index([githubLogin])
  @@index([githubInstallationId])
  @@map("source_control_orgs")
}

model SourceControlToken {
  id                 String           @id @default(cuid())
  userId             String           @map("user_id")
  sourceControlOrgId String           @map("source_control_org_id")
  token              String
  refreshToken       String?          @map("refresh_token")
  expiresAt          DateTime?        @map("expires_at")
  scopes             String[]         @default([])
  createdAt          DateTime         @default(now()) @map("created_at")
  updatedAt          DateTime         @updatedAt @map("updated_at")
  sourceControlOrg   SourceControlOrg @relation(fields: [sourceControlOrgId], references: [id], onDelete: Cascade)
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, sourceControlOrgId])
  @@index([userId])
  @@index([sourceControlOrgId])
  @@map("source_control_tokens")
}

model Workspace {
  id                 String            @id @default(cuid())
  name               String
  description        String?
  slug               String            @unique
  deleted            Boolean           @default(false)
  deletedAt          DateTime?         @map("deleted_at")
  createdAt          DateTime          @default(now()) @map("created_at")
  updatedAt          DateTime          @updatedAt @map("updated_at")
  ownerId            String            @map("owner_id")
  stakworkApiKey     String?           @map("stakwork_api_key")
  originalSlug       String?           @map("original_slug")
  sourceControlOrgId String?           @map("source_control_org_id")
  mission            String?
  features           Feature[]
  janitorConfig      JanitorConfig?
  repositories       Repository[]
  swarm              Swarm?
  tasks              Task[]
  members            WorkspaceMember[]
  owner              User              @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  sourceControlOrg   SourceControlOrg? @relation(fields: [sourceControlOrgId], references: [id])

  @@index([ownerId])
  @@index([deleted])
  @@index([sourceControlOrgId])
  @@map("workspaces")
}

model WorkspaceMember {
  id          String        @id @default(cuid())
  workspaceId String        @map("workspace_id")
  userId      String        @map("user_id")
  role        WorkspaceRole @default(VIEWER)
  joinedAt    DateTime      @default(now()) @map("joined_at")
  leftAt      DateTime?     @map("left_at")
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, userId])
  @@index([workspaceId])
  @@index([userId])
  @@map("workspace_members")
}

model Swarm {
  id                     String      @id @default(cuid())
  name                   String      @unique
  swarmId                String?     @map("swarm_id")
  swarmUrl               String?     @map("swarm_url")
  status                 SwarmStatus @default(PENDING)
  instanceType           String      @default("XL") @map("instance_type")
  createdAt              DateTime    @default(now()) @map("created_at")
  updatedAt              DateTime    @updatedAt @map("updated_at")
  poolName               String?     @map("pool_name")
  repository_name        String?
  repository_description String?
  repository_url         String?
  swarmApiKey            String?     @map("swarm_api_key")
  swarmSecretAlias       String?     @map("swarm_secret_alias")
  environmentVariables   Json        @default("[]") @map("environment_variables")
  services               Json        @default("[]")
  ingestRefId            String?     @map("ingest_ref_id")
  containerFiles         Json?       @map("container_files")
  workspaceId            String      @unique @map("workspace_id")
  default_branch         String?
  poolApiKey             String?     @map("pool_api_key")
  swarmPassword          String?     @map("swarm_password")
  poolCpu                String?     @map("pool_cpu")
  poolMemory             String?     @map("pool_memory")
  poolState              PoolState   @default(NOT_STARTED) @map("pool_state")
  ec2Id                  String?     @map("ec2_id")
  workspace              Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([swarmId])
  @@map("swarms")
}

model Repository {
  id                    String           @id @default(cuid())
  name                  String
  repositoryUrl         String           @map("repository_url")
  branch                String           @default("main")
  status                RepositoryStatus @default(PENDING)
  createdAt             DateTime         @default(now()) @map("created_at")
  updatedAt             DateTime         @updatedAt @map("updated_at")
  workspaceId           String           @map("workspace_id")
  githubWebhookId       String?          @map("github_webhook_id")
  githubWebhookSecret   String?          @map("github_webhook_secret")
  playwrightSetup       Boolean          @default(false) @map("playwright_setup")
  testingFrameworkSetup Boolean          @default(false) @map("testing_framework_setup")
  ignoreDirs            String?          @default("") @map("ignore_dirs")
  workspace             Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  tasks                 Task[]

  @@unique([repositoryUrl, workspaceId], name: "repositoryUrl_workspaceId")
  @@index([workspaceId])
  @@map("repositories")
}

model Task {
  id                  String          @id @default(cuid())
  title               String
  description         String?
  workspaceId         String          @map("workspace_id")
  assigneeId          String?         @map("assignee_id")
  repositoryId        String?         @map("repository_id")
  status              TaskStatus      @default(TODO)
  priority            Priority        @default(MEDIUM)
  estimatedHours      Int?            @map("estimated_hours")
  actualHours         Int?            @map("actual_hours")
  createdById         String          @map("created_by_id")
  updatedById         String          @map("updated_by_id")
  deleted             Boolean         @default(false)
  deletedAt           DateTime?       @map("deleted_at")
  createdAt           DateTime        @default(now()) @map("created_at")
  updatedAt           DateTime        @updatedAt @map("updated_at")
  workflowCompletedAt DateTime?       @map("workflow_completed_at")
  workflowStartedAt   DateTime?       @map("workflow_started_at")
  workflowStatus      WorkflowStatus? @default(PENDING) @map("workflow_status")
  stakworkProjectId   Int?            @map("stakwork_project_id")
  sourceType          TaskSourceType  @default(USER) @map("source_type")
  chatMessages        ChatMessage[]
  assignee            User?           @relation("TaskAssignee", fields: [assigneeId], references: [id])
  createdBy           User            @relation("TaskCreator", fields: [createdById], references: [id])
  repository          Repository?     @relation(fields: [repositoryId], references: [id])
  updatedBy           User            @relation("TaskUpdater", fields: [updatedById], references: [id])
  workspace           Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
  @@index([assigneeId])
  @@index([status])
  @@index([deleted])
  @@map("tasks")
}

model ChatMessage {
  id                String       @id @default(cuid())
  taskId            String?      @map("task_id")
  message           String
  role              ChatRole
  timestamp         DateTime     @default(now())
  contextTags       Json         @default("[]") @map("context_tags")
  status            ChatStatus   @default(SENDING)
  sourceWebsocketID String?      @map("source_websocket_id")
  replyId           String?      @map("reply_id")
  createdAt         DateTime     @default(now()) @map("created_at")
  updatedAt         DateTime     @updatedAt @map("updated_at")
  workflowUrl       String?      @map("workflow_url")
  artifacts         Artifact[]
  attachments       Attachment[]
  task              Task?        @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([timestamp])
  @@map("chat_messages")
}

model Artifact {
  id        String       @id @default(cuid())
  messageId String       @map("message_id")
  type      ArtifactType
  content   Json?
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")
  icon      String?
  message   ChatMessage  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
  @@index([type])
  @@map("artifacts")
}

model Attachment {
  id        String      @id @default(cuid())
  messageId String      @map("message_id")
  path      String
  filename  String
  mimeType  String      @map("mime_type")
  size      Int
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  message   ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
  @@map("attachments")
}

model JanitorConfig {
  id                      String       @id @default(cuid())
  workspaceId             String       @unique @map("workspace_id")
  unitTestsEnabled        Boolean      @default(false) @map("unit_tests_enabled")
  integrationTestsEnabled Boolean      @default(false) @map("integration_tests_enabled")
  createdAt               DateTime     @default(now()) @map("created_at")
  updatedAt               DateTime     @updatedAt @map("updated_at")
  e2eTestsEnabled         Boolean      @default(false) @map("e2e_tests_enabled")
  securityReviewEnabled   Boolean      @default(false) @map("security_review_enabled")
  taskCoordinatorEnabled  Boolean      @default(false) @map("task_coordinator_enabled")
  workspace               Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  janitorRuns             JanitorRun[]

  @@index([workspaceId])
  @@map("janitor_configs")
}

model JanitorRun {
  id                String                  @id @default(cuid())
  janitorConfigId   String                  @map("janitor_config_id")
  janitorType       JanitorType             @map("janitor_type")
  status            JanitorStatus           @default(PENDING)
  triggeredBy       JanitorTrigger          @default(SCHEDULED) @map("triggered_by")
  stakworkProjectId Int?                    @map("stakwork_project_id")
  startedAt         DateTime?               @map("started_at")
  completedAt       DateTime?               @map("completed_at")
  error             String?
  metadata          Json                    @default("{}")
  createdAt         DateTime                @default(now()) @map("created_at")
  updatedAt         DateTime                @updatedAt @map("updated_at")
  recommendations   JanitorRecommendation[]
  janitorConfig     JanitorConfig           @relation(fields: [janitorConfigId], references: [id], onDelete: Cascade)

  @@index([janitorConfigId])
  @@index([janitorType])
  @@index([status])
  @@index([createdAt])
  @@map("janitor_runs")
}

model JanitorRecommendation {
  id            String               @id @default(cuid())
  janitorRunId  String               @map("janitor_run_id")
  title         String
  description   String
  priority      Priority             @default(MEDIUM)
  impact        String?
  status        RecommendationStatus @default(PENDING)
  acceptedAt    DateTime?            @map("accepted_at")
  dismissedAt   DateTime?            @map("dismissed_at")
  acceptedById  String?              @map("accepted_by_id")
  dismissedById String?              @map("dismissed_by_id")
  metadata      Json                 @default("{}")
  createdAt     DateTime             @default(now()) @map("created_at")
  updatedAt     DateTime             @updatedAt @map("updated_at")
  acceptedBy    User?                @relation("RecommendationAcceptor", fields: [acceptedById], references: [id])
  dismissedBy   User?                @relation("RecommendationDismissor", fields: [dismissedById], references: [id])
  janitorRun    JanitorRun           @relation(fields: [janitorRunId], references: [id], onDelete: Cascade)

  @@index([janitorRunId])
  @@index([status])
  @@index([priority])
  @@index([createdAt])
  @@map("janitor_recommendations")
}

model Feature {
  id          String          @id @default(cuid())
  title       String
  workspaceId String          @map("workspace_id")
  assigneeId  String?         @map("assignee_id")
  status      FeatureStatus   @default(BACKLOG)
  priority    FeaturePriority @default(NONE)
  createdById String          @map("created_by_id")
  updatedById String          @map("updated_by_id")
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")
  assignee    User?           @relation("FeatureAssignee", fields: [assigneeId], references: [id])
  createdBy   User            @relation("FeatureCreator", fields: [createdById], references: [id])
  updatedBy   User            @relation("FeatureUpdater", fields: [updatedById], references: [id])
  workspace   Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userStories UserStory[]

  @@index([workspaceId])
  @@index([assigneeId])
  @@index([status])
  @@map("features")
}

model UserStory {
  id          String   @id @default(cuid())
  featureId   String   @map("feature_id")
  title       String
  order       Int      @default(0)
  completed   Boolean  @default(false)
  createdById String   @map("created_by_id")
  updatedById String   @map("updated_by_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  createdBy   User     @relation("UserStoryCreator", fields: [createdById], references: [id])
  feature     Feature  @relation(fields: [featureId], references: [id], onDelete: Cascade)
  updatedBy   User     @relation("UserStoryUpdater", fields: [updatedById], references: [id])

  @@index([featureId])
  @@index([order])
  @@map("user_stories")
}

enum ChatRole {
  USER
  ASSISTANT
}

enum ChatStatus {
  SENDING
  SENT
  ERROR
}

enum ContextTagType {
  PRODUCT_BRIEF
  FEATURE_BRIEF
  SCHEMATIC
}

enum ArtifactType {
  FORM
  CODE
  BROWSER
  IDE
  MEDIA
  STREAM
  LONGFORM
  BUG_REPORT
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum WorkspaceRole {
  OWNER
  ADMIN
  PM
  DEVELOPER
  STAKEHOLDER
  VIEWER
}

enum SwarmStatus {
  PENDING
  ACTIVE
  FAILED
  DELETED
}

enum RepositoryStatus {
  PENDING
  SYNCED
  FAILED
}

enum PoolState {
  NOT_STARTED
  STARTED
  FAILED
  COMPLETE
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
  CANCELLED
}

enum WorkflowStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ERROR
  HALTED
  FAILED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum SwarmWizardStep {
  WELCOME
  REPOSITORY_SELECT
  PROJECT_NAME
  GRAPH_INFRASTRUCTURE
  INGEST_CODE
  ADD_SERVICES
  ENVIRONMENT_SETUP
  REVIEW_POOL_ENVIRONMENT
  STAKWORK_SETUP
  COMPLETION
}

enum StepStatus {
  PENDING
  STARTED
  PROCESSING
  COMPLETED
  FAILED
}

enum JanitorType {
  UNIT_TESTS
  INTEGRATION_TESTS
  E2E_TESTS
  SECURITY_REVIEW
}

enum JanitorStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum JanitorTrigger {
  MANUAL
  SCHEDULED
  WEBHOOK
  ON_COMMIT
}

enum RecommendationStatus {
  PENDING
  ACCEPTED
  DISMISSED
  IN_PROGRESS
  COMPLETED
}

enum TaskSourceType {
  USER
  JANITOR
  SYSTEM
}

enum SourceControlOrgType {
  ORG
  USER
}

enum FeatureStatus {
  BACKLOG
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum FeaturePriority {
  NONE
  LOW
  MEDIUM
  HIGH
  URGENT
}
