// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================
// AUTHENTICATION & USER MANAGEMENT
// =============================================

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  // GitHub App specific tokens (different from regular OAuth)
  app_access_token  String? @map("app_access_token")
  app_refresh_token String? @map("app_refresh_token")
  app_expires_at    Int?    @map("app_expires_at")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  githubState  String?  @map("github_state")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          UserRole  @default(USER)
  timezone      String?   @default("UTC")
  locale        String?   @default("en")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  deleted       Boolean   @default(false)
  deletedAt     DateTime? @map("deleted_at")
  lastLoginAt   DateTime? @map("last_login_at")
  poolApiKey    String?   @map("pool_api_key") // Pool API Key for Pool Manager (will be removed in separate PR)

  // Authentication relationships
  accounts   Account[]
  sessions   Session[]
  githubAuth GitHubAuth?

  // Workspace relationships
  ownedWorkspaces  Workspace[]       @relation("WorkspaceOwner")
  workspaceMembers WorkspaceMember[]

  // Task assignments
  assignedTasks Task[] @relation("TaskAssignee")

  // Feature assignments
  assignedFeatures Feature[] @relation("FeatureAssignee")

  // Ticket assignments
  assignedTickets Ticket[] @relation("TicketAssignee")

  // Audit trail
  createdTasks       Task[]      @relation("TaskCreator")
  updatedTasks       Task[]      @relation("TaskUpdater")
  createdFeatures    Feature[]   @relation("FeatureCreator")
  updatedFeatures    Feature[]   @relation("FeatureUpdater")
  createdUserStories UserStory[] @relation("UserStoryCreator")
  updatedUserStories UserStory[] @relation("UserStoryUpdater")
  createdTickets     Ticket[]    @relation("TicketCreator")
  updatedTickets     Ticket[]    @relation("TicketUpdater")

  // Janitor recommendations
  acceptedRecommendations  JanitorRecommendation[] @relation("RecommendationAcceptor")
  dismissedRecommendations JanitorRecommendation[] @relation("RecommendationDismissor")

  // Source control tokens
  sourceControlTokens SourceControlToken[]

  @@index([createdAt])
  @@index([deleted])
  @@index([email])
  @@map("users")
}


model GitHubAuth {
  id                String    @id @default(cuid())
  userId            String    @unique @map("user_id")
  githubUserId      String    @map("github_user_id")
  githubUsername    String    @map("github_username")
  githubNodeId      String?   @map("github_node_id")
  name              String?
  bio               String?
  company           String?
  location          String?
  blog              String?
  twitterUsername   String?   @map("twitter_username")
  publicRepos       Int?      @map("public_repos")
  publicGists       Int?      @map("public_gists")
  followers         Int?
  following         Int?
  githubCreatedAt   DateTime? @map("github_created_at")
  githubUpdatedAt   DateTime? @map("github_updated_at")
  accountType       String?   @map("account_type")
  scopes            String[]  @default([])
  organizationsHash String?   @map("organizations_hash")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([githubUserId])
  @@index([githubUsername])
  @@map("github_auth")
}

// =============================================
// SOURCE CONTROL INTEGRATION
// =============================================

model SourceControlOrg {
  id                   String                @id @default(cuid())
  type                 SourceControlOrgType  @default(ORG)
  githubLogin          String                @unique // e.g. "anthropic", "evanfeenstra"
  githubInstallationId Int                   @unique @map("github_installation_id")
  name                 String?               // Display name
  avatarUrl            String?               @map("avatar_url")
  description          String?
  createdAt            DateTime              @default(now()) @map("created_at")
  updatedAt            DateTime              @updatedAt @map("updated_at")

  // Relationships
  tokens     SourceControlToken[]
  workspaces Workspace[]

  @@index([githubLogin])
  @@index([githubInstallationId])
  @@map("source_control_orgs")
}

model SourceControlToken {
  id                  String           @id @default(cuid())
  userId              String           @map("user_id")
  sourceControlOrgId  String           @map("source_control_org_id")
  token               String           // Encrypted app access token
  refreshToken        String?          @map("refresh_token") // Encrypted refresh token
  expiresAt           DateTime?        @map("expires_at")
  scopes              String[]         @default([])
  createdAt           DateTime         @default(now()) @map("created_at")
  updatedAt           DateTime         @updatedAt @map("updated_at")

  // Relationships
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  sourceControlOrg SourceControlOrg @relation(fields: [sourceControlOrgId], references: [id], onDelete: Cascade)

  @@unique([userId, sourceControlOrgId])
  @@index([userId])
  @@index([sourceControlOrgId])
  @@map("source_control_tokens")
}

// =============================================
// WORKSPACE & ORGANIZATION
// =============================================

model Workspace {
  id          String    @id @default(cuid())
  name        String
  description String?
  mission     String?
  slug        String    @unique
  originalSlug String?  @map("original_slug") // Store original slug for recovery
  deleted     Boolean   @default(false)
  deletedAt   DateTime? @map("deleted_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Owner of the workspace
  ownerId String @map("owner_id")
  owner   User   @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  // Members of the workspace
  members WorkspaceMember[]

  // Source control integration
  sourceControlOrgId String?           @map("source_control_org_id")
  sourceControlOrg   SourceControlOrg? @relation(fields: [sourceControlOrgId], references: [id], onDelete: SetNull)

  // Infrastructure
  swarm        Swarm?
  repositories Repository[]

  // Tasks
  tasks    Task[]

  // Stakwork credentials
  stakworkApiKey String? @map("stakwork_api_key")

  // Janitor configuration
  janitorConfig JanitorConfig?

  // Roadmap features
  features Feature[]

  @@index([ownerId])
  @@index([deleted])
  @@index([sourceControlOrgId])
  @@map("workspaces")
}

model WorkspaceMember {
  id          String        @id @default(cuid())
  workspaceId String        @map("workspace_id")
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId      String        @map("user_id")
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  role        WorkspaceRole @default(VIEWER)
  joinedAt    DateTime      @default(now()) @map("joined_at")
  leftAt      DateTime?     @map("left_at")

  @@unique([workspaceId, userId])
  @@index([workspaceId])
  @@index([userId])
  @@map("workspace_members")
}

// =============================================
// INFRASTRUCTURE (Swarm & Repositories)
// =============================================

model Swarm {
  id           String      @id @default(cuid())
  name         String      @unique // domain name used for creation
  swarmId      String?     @map("swarm_id") // swarm_id from 3rd party
  swarmUrl     String?     @map("swarm_url") // https://{name}.sphinx.chat/api
  status       SwarmStatus @default(PENDING) // pending, active, failed, deleted
  instanceType String      @default("XL") @map("instance_type")
  ec2Id        String?     @map("ec2_id")
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")

  // Stakgraph configuration fields
  poolState            PoolState @default(NOT_STARTED) @map("pool_state")
  poolName             String?   @map("pool_name")
  poolApiKey           String?   @map("pool_api_key") // Pool API Key for Pool Manager
  poolCpu              String?   @map("pool_cpu") // CPU allocation for pool tasks
  poolMemory           String?   @map("pool_memory") // Memory allocation for pool tasks
  swarmApiKey          String?   @map("swarm_api_key")
  swarmSecretAlias     String?   @map("swarm_secret_alias") // e.g., {{SWARM_{regex_swarm_id_number}_API_KEY}}
  environmentVariables Json      @default("[]") @map("environment_variables")
  services             Json      @default("[]")

  // ingestion status tracking
  ingestRefId String?         @map("ingest_ref_id")

  // Generated container files
  containerFiles Json? @map("container_files")

  // Swarm password (encrypted)
  swarmPassword String? @map("swarm_password")

  // One-to-one relationship with workspace
  workspaceId String    @unique @map("workspace_id")
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([swarmId])
  @@map("swarms")
}

model Repository {
  id            String           @id @default(cuid())
  name          String
  description   String?
  repositoryUrl String           @map("repository_url")
  branch        String           @default("main")
  status        RepositoryStatus @default(PENDING)
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")

  // Webhook integration
  githubWebhookId     String? @map("github_webhook_id")
  githubWebhookSecret String? @map("github_webhook_secret")

  // Test setup flags
  testingFrameworkSetup Boolean @default(false) @map("testing_framework_setup")
  playwrightSetup       Boolean @default(false) @map("playwright_setup")

  ignoreDirs String? @default("") @map("ignore_dirs")

  // Repository belongs to workspace (source control org inherited from workspace)
  workspaceId String    @map("workspace_id")
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  // Tasks can be linked to repositories
  tasks Task[]

  @@unique([repositoryUrl, workspaceId], name: "repositoryUrl_workspaceId")
  @@index([workspaceId])
  @@map("repositories")
}

// Chat
model Task {
  id          String  @id @default(cuid())
  title       String
  description String?

  // Direct workspace relationship
  workspaceId String    @map("workspace_id")
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  // Assignment and repository linking
  assigneeId   String?     @map("assignee_id")
  assignee     User?       @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  repositoryId String?     @map("repository_id")
  repository   Repository? @relation(fields: [repositoryId], references: [id], onDelete: SetNull)

  status         TaskStatus @default(TODO)
  priority       Priority   @default(MEDIUM)
  estimatedHours Int?       @map("estimated_hours")
  actualHours    Int?       @map("actual_hours")

  // Workflow status tracking
  workflowStatus      WorkflowStatus? @default(PENDING) @map("workflow_status")
  workflowStartedAt   DateTime?       @map("workflow_started_at")
  workflowCompletedAt DateTime?       @map("workflow_completed_at")

  // Stakwork project ID for log subscription
  stakworkProjectId Int? @map("stakwork_project_id")

  // Task source tracking
  sourceType TaskSourceType @default(USER) @map("source_type")

  // Audit fields
  createdById String @map("created_by_id")
  createdBy   User   @relation("TaskCreator", fields: [createdById], references: [id])
  updatedById String @map("updated_by_id")
  updatedBy   User   @relation("TaskUpdater", fields: [updatedById], references: [id])

  deleted   Boolean   @default(false)
  deletedAt DateTime? @map("deleted_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  chatMessages ChatMessage[]

  @@index([workspaceId])
  @@index([assigneeId])
  @@index([status])
  @@index([deleted])
  @@map("tasks")
}

// =============================================
// CHAT & ARTIFACTS
// =============================================

model ChatMessage {
  id                String     @id @default(cuid())
  taskId            String?    @map("task_id")
  task              Task?      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  message           String
  workflowUrl       String?    @map("workflow_url")
  role              ChatRole
  timestamp         DateTime   @default(now())
  contextTags       Json       @default("[]") @map("context_tags") // stores ContextTag[]
  status            ChatStatus @default(SENDING)
  sourceWebsocketID String?    @map("source_websocket_id")
  replyId           String?    @map("reply_id")

  artifacts   Artifact[]
  attachments Attachment[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([taskId])
  @@index([timestamp])
  @@map("chat_messages")
}

model Artifact {
  id        String       @id @default(cuid())
  messageId String       @map("message_id")
  message   ChatMessage  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  type      ArtifactType
  content   Json? // stores FormContent | CodeContent | BrowserContent
  icon      String? // Icon for this artifact

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([messageId])
  @@index([type])
  @@map("artifacts")
}

model Attachment {
  id        String      @id @default(cuid())
  messageId String      @map("message_id")
  message   ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  path      String // S3 path (bucket-relative path)
  filename  String // Original filename
  mimeType  String      @map("mime_type") // File MIME type
  size      Int // File size in bytes

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([messageId])
  @@map("attachments")
}

// Add these enums to your existing enums section:
enum ChatRole {
  USER
  ASSISTANT
}

enum ChatStatus {
  SENDING
  SENT
  ERROR
}

enum ContextTagType {
  PRODUCT_BRIEF
  FEATURE_BRIEF
  SCHEMATIC
}

enum ArtifactType {
  FORM
  CODE
  BROWSER
  IDE
  MEDIA
  STREAM
  LONGFORM
  BUG_REPORT
}

// =============================================
// JANITOR CONFIGURATION
// =============================================

model JanitorConfig {
  id          String @id @default(cuid())
  workspaceId String @unique @map("workspace_id")

  // Individual janitor toggles
  unitTestsEnabled        Boolean @default(false) @map("unit_tests_enabled")
  integrationTestsEnabled Boolean @default(false) @map("integration_tests_enabled")
  e2eTestsEnabled         Boolean @default(false) @map("e2e_tests_enabled")
  securityReviewEnabled   Boolean @default(false) @map("security_review_enabled")

  // Task Coordinator automation
  taskCoordinatorEnabled  Boolean @default(false) @map("task_coordinator_enabled")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  workspace   Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  janitorRuns JanitorRun[]

  @@index([workspaceId])
  @@map("janitor_configs")
}

model JanitorRun {
  id                String         @id @default(cuid())
  janitorConfigId   String         @map("janitor_config_id")
  janitorType       JanitorType    @map("janitor_type")
  status            JanitorStatus  @default(PENDING)
  triggeredBy       JanitorTrigger @default(SCHEDULED) @map("triggered_by")
  stakworkProjectId Int?           @map("stakwork_project_id")
  startedAt         DateTime?      @map("started_at")
  completedAt       DateTime?      @map("completed_at")
  error             String?
  metadata          Json           @default("{}")
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")

  janitorConfig   JanitorConfig           @relation(fields: [janitorConfigId], references: [id], onDelete: Cascade)
  recommendations JanitorRecommendation[]

  @@index([janitorConfigId])
  @@index([janitorType])
  @@index([status])
  @@index([createdAt])
  @@map("janitor_runs")
}

model JanitorRecommendation {
  id           String @id @default(cuid())
  janitorRunId String @map("janitor_run_id")

  // Recommendation details
  title       String
  description String
  priority    Priority @default(MEDIUM)
  impact      String?

  status        RecommendationStatus @default(PENDING)
  acceptedAt    DateTime?            @map("accepted_at")
  dismissedAt   DateTime?            @map("dismissed_at")
  acceptedById  String?              @map("accepted_by_id")
  dismissedById String?              @map("dismissed_by_id")

  metadata  Json     @default("{}")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  janitorRun  JanitorRun @relation(fields: [janitorRunId], references: [id], onDelete: Cascade)
  acceptedBy  User?      @relation("RecommendationAcceptor", fields: [acceptedById], references: [id])
  dismissedBy User?      @relation("RecommendationDismissor", fields: [dismissedById], references: [id])

  @@index([janitorRunId])
  @@index([status])
  @@index([priority])
  @@index([createdAt])
  @@map("janitor_recommendations")
}

// =============================================
// ENUMS
// =============================================

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum WorkspaceRole {
  OWNER
  ADMIN
  PM
  DEVELOPER
  STAKEHOLDER
  VIEWER
}

enum SwarmStatus {
  PENDING
  ACTIVE
  FAILED
  DELETED
}

enum RepositoryStatus {
  PENDING
  SYNCED
  FAILED
}

enum PoolState {
  NOT_STARTED
  STARTED
  FAILED
  COMPLETE
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
  CANCELLED
}

enum TicketStatus {
  TODO
  IN_PROGRESS
  DONE
  BLOCKED
}

enum PhaseStatus {
  NOT_STARTED
  IN_PROGRESS
  DONE
  BLOCKED
}

enum WorkflowStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ERROR
  HALTED
  FAILED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum SwarmWizardStep {
  WELCOME
  REPOSITORY_SELECT
  PROJECT_NAME
  GRAPH_INFRASTRUCTURE
  INGEST_CODE
  ADD_SERVICES
  ENVIRONMENT_SETUP
  REVIEW_POOL_ENVIRONMENT
  STAKWORK_SETUP
  COMPLETION
}

enum StepStatus {
  PENDING
  STARTED
  PROCESSING
  COMPLETED
  FAILED
}

enum JanitorType {
  UNIT_TESTS
  INTEGRATION_TESTS
  E2E_TESTS
  SECURITY_REVIEW
}

enum JanitorStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum JanitorTrigger {
  MANUAL
  SCHEDULED
  WEBHOOK
  ON_COMMIT
}

enum RecommendationStatus {
  PENDING
  ACCEPTED
  DISMISSED
  IN_PROGRESS
  COMPLETED
}

enum TaskSourceType {
  USER
  JANITOR
  SYSTEM
}

enum SourceControlOrgType {
  ORG
  USER
}

// =============================================
// ROADMAP FEATURES
// =============================================

model Feature {
  id          String           @id @default(cuid())
  title       String
  brief       String?
  requirements String?
  architecture String?
  workspaceId String           @map("workspace_id")
  workspace   Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  // Assignee/Lead
  assigneeId  String?          @map("assignee_id")
  assignee    User?            @relation("FeatureAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)

  status      FeatureStatus    @default(BACKLOG)
  priority    FeaturePriority  @default(NONE)

  // Audit fields
  createdById String           @map("created_by_id")
  createdBy   User             @relation("FeatureCreator", fields: [createdById], references: [id])
  updatedById String           @map("updated_by_id")
  updatedBy   User             @relation("FeatureUpdater", fields: [updatedById], references: [id])

  // Relationships
  userStories UserStory[]
  phases      Phase[]
  tickets     Ticket[]

  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")

  @@index([workspaceId])
  @@index([assigneeId])
  @@index([status])
  @@map("features")
}

enum FeatureStatus {
  BACKLOG
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum FeaturePriority {
  NONE
  LOW
  MEDIUM
  HIGH
  URGENT
}

model UserStory {
  id          String   @id @default(cuid())
  featureId   String   @map("feature_id")
  feature     Feature  @relation(fields: [featureId], references: [id], onDelete: Cascade)

  title       String
  order       Int      @default(0)
  completed   Boolean  @default(false)

  // Audit fields
  createdById String   @map("created_by_id")
  createdBy   User     @relation("UserStoryCreator", fields: [createdById], references: [id])
  updatedById String   @map("updated_by_id")
  updatedBy   User     @relation("UserStoryUpdater", fields: [updatedById], references: [id])

  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@index([featureId])
  @@index([order])
  @@map("user_stories")
}

model Phase {
  id          String      @id @default(cuid())
  featureId   String      @map("feature_id")
  name        String
  description String?
  status      PhaseStatus @default(NOT_STARTED)
  order       Int         @default(0)

  // Relationships
  feature Feature  @relation(fields: [featureId], references: [id], onDelete: Cascade)
  tickets Ticket[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([featureId])
  @@index([status])
  @@index([order])
  @@map("phases")
}

model Ticket {
  id          String       @id @default(cuid())
  title       String
  description String?

  // Feature relationship (required)
  featureId String  @map("feature_id")
  feature   Feature @relation(fields: [featureId], references: [id], onDelete: Cascade)

  // Phase relationship (optional)
  phaseId String? @map("phase_id")
  phase   Phase?  @relation(fields: [phaseId], references: [id], onDelete: SetNull)

  // Task attributes
  status   TicketStatus @default(TODO)
  priority Priority     @default(MEDIUM)
  order    Int          @default(0)

  // Assignment
  assigneeId String? @map("assignee_id")
  assignee   User?   @relation("TicketAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)

  // Dependencies - array of ticket IDs this ticket depends on
  dependsOnTicketIds String[] @default([]) @map("depends_on_ticket_ids")

  // Audit fields
  createdById String @map("created_by_id")
  createdBy   User   @relation("TicketCreator", fields: [createdById], references: [id])
  updatedById String @map("updated_by_id")
  updatedBy   User   @relation("TicketUpdater", fields: [updatedById], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([featureId])
  @@index([phaseId])
  @@index([assigneeId])
  @@index([status])
  @@index([order])
  @@map("tickets")
}
