// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================
// AUTHENTICATION & USER MANAGEMENT
// =============================================

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refreshToken     String?
  accessToken      String?
  expiresAt        Int?
  tokenType        String?
  scope             String?
  idToken          String?
  sessionState     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  role          UserRole     @default(USER)
  timezone      String?      @default("UTC")
  locale        String?      @default("en")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  deleted       Boolean      @default(false)
  deletedAt     DateTime?
  lastLoginAt   DateTime?
  
  // Authentication relationships
  accounts      Account[]
  sessions      Session[]
  githubAuth    GitHubAuth?
  
  // Workspace relationships
  ownedWorkspaces    Workspace[]       @relation("WorkspaceOwner")
  workspaceMembers   WorkspaceMember[]
  
  // Task assignments
  assignedTasks      Task[]            @relation("TaskAssignee")
  
  // Audit trail
  createdFeatures    Feature[]         @relation("FeatureCreator")
  updatedFeatures    Feature[]         @relation("FeatureUpdater")
  createdUserStories UserStory[]       @relation("UserStoryCreator")
  updatedUserStories UserStory[]       @relation("UserStoryUpdater")
  createdTasks       Task[]            @relation("TaskCreator")
  updatedTasks       Task[]            @relation("TaskUpdater")
  
  // Comments and discussions
  comments           Comment[]

  @@index([createdAt])
  @@index([deleted])
  @@index([email])
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model GitHubAuth {
  id                String    @id @default(cuid())
  userId            String    @unique
  githubUserId      String
  githubUsername    String
  githubNodeId      String?
  name              String?
  bio               String?
  company           String?
  location          String?
  blog              String?
  twitterUsername   String?
  publicRepos       Int?
  publicGists       Int?
  followers         Int?
  following         Int?
  githubCreatedAt   DateTime?
  githubUpdatedAt   DateTime?
  accountType       String?
  scopes            String[]  @default([])
  organizationsHash String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([githubUserId])
  @@index([githubUsername])
  @@map("github_auth")
}

// =============================================
// WORKSPACE & ORGANIZATION
// =============================================

model Workspace {
  id          String   @id @default(cuid())
  name        String
  description String?
  slug        String   @unique
  deleted     Boolean  @default(false)
  deletedAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Owner of the workspace
  ownerId String
  owner   User   @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  // Members of the workspace
  members WorkspaceMember[]
  
  // Infrastructure
  swarm        Swarm?
  repositories Repository[]
  
  // PM Structure
  products Product[]
  tasks    Task[]

  @@index([ownerId])
  @@index([deleted])
  @@map("workspaces")
}

model WorkspaceMember {
  id          String        @id @default(cuid())
  workspaceId String
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  role        WorkspaceRole @default(VIEWER)
  joinedAt    DateTime      @default(now())
  leftAt      DateTime?
  
  @@unique([workspaceId, userId])
  @@index([workspaceId])
  @@index([userId])
  @@map("workspace_members")
}

// =============================================
// INFRASTRUCTURE (Swarm & Repositories)
// =============================================

model Swarm {
  id           String      @id @default(cuid())
  name         String      @unique // domain name used for creation
  swarmId      String?     // swarm_id from 3rd party
  swarmUrl     String?     // https://{name}.sphinx.chat/api
  status       SwarmStatus @default(PENDING) // pending, active, failed, deleted
  instanceType String      @default("XL")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  // Stakgraph configuration fields
  poolName              String?
  repositoryName        String?
  repositoryDescription String?
  repositoryUrl         String?
  swarmApiKey           String?
  swarmSecretAlias      String? // e.g., {{SWARM_{regex_swarm_id_number}_API_KEY}}
  poolApiKey            String? // NEW: Pool API Key for Pool Manager
  environmentVariables  Json    @default("[]")
  services              Json    @default("[]")

  // Wizard progress tracking
  wizardStep   SwarmWizardStep @default(WELCOME)
  stepStatus   StepStatus      @default(PENDING)
  wizardData   Json     @default("{}")
  
  // One-to-one relationship with workspace
  workspaceId String @unique
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([swarmId])
  @@map("swarms")
}

model Repository {
  id            String           @id @default(cuid())
  name          String
  repositoryUrl String
  branch        String           @default("main")
  status        RepositoryStatus @default(PENDING)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  // Repository belongs to workspace
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  // Tasks can be linked to repositories
  tasks Task[]

  @@index([workspaceId])
  @@unique([repositoryUrl, workspaceId], name: "repositoryUrl_workspaceId")
  @@map("repositories")
}

// =============================================
// PRODUCT MANAGEMENT HIERARCHY
// =============================================

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  vision      String?
  
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  deleted     Boolean   @default(false)
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  features    Feature[]
  roadmaps    Roadmap[]
  
  @@index([workspaceId])
  @@index([deleted])
  @@map("products")
}

// Goal / Objective
model Feature {
  id          String        @id @default(cuid())
  title       String
  description String?
  
  productId   String
  product     Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  // Phase support - 0 for main feature, 1,2,3... for phases
  phase       Int           @default(0)
  parentId    String?
  parent      Feature?      @relation("FeaturePhases", fields: [parentId], references: [id])
  phases      Feature[]     @relation("FeaturePhases")
  
  status      FeatureStatus @default(IDEA)
  priority    Priority      @default(MEDIUM)
  
  // Audit fields
  createdById String
  createdBy   User          @relation("FeatureCreator", fields: [createdById], references: [id])
  updatedById String
  updatedBy   User          @relation("FeatureUpdater", fields: [updatedById], references: [id])
  
  deleted     Boolean       @default(false)
  deletedAt   DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  userStories  UserStory[]
  requirements Requirement[]
  roadmapItems RoadmapItem[]
  comments     Comment[]     @relation("FeatureComments")
  
  @@index([productId])
  @@index([parentId])
  @@index([status])
  @@index([priority])
  @@index([deleted])
  @@map("features")
}

model UserStory {
  id                  String      @id @default(cuid())
  title               String
  description         String?
  acceptanceCriteria  String?
  
  featureId           String
  feature             Feature     @relation(fields: [featureId], references: [id], onDelete: Cascade)
  
  priority            Priority    @default(MEDIUM)
  storyPoints         Int?
  status              StoryStatus @default(BACKLOG)
  
  // Audit fields
  createdById         String
  createdBy           User        @relation("UserStoryCreator", fields: [createdById], references: [id])
  updatedById         String
  updatedBy           User        @relation("UserStoryUpdater", fields: [updatedById], references: [id])
  
  deleted             Boolean     @default(false)
  deletedAt           DateTime?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  
  comments            Comment[]   @relation("UserStoryComments")
  
  @@index([featureId])
  @@index([status])
  @@index([priority])
  @@index([deleted])
  @@map("user_stories")
}

model Requirement {
  id          String             @id @default(cuid())
  title       String
  description String?
  type        RequirementType    @default(FUNCTIONAL)
  
  featureId   String
  feature     Feature            @relation(fields: [featureId], references: [id], onDelete: Cascade)
  
  priority    MoSCoWPriority     @default(SHOULD_HAVE)
  status      RequirementStatus  @default(DRAFT)
  
  deleted     Boolean            @default(false)
  deletedAt   DateTime?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  
  comments    Comment[]          @relation("RequirementComments")
  
  @@index([featureId])
  @@index([type])
  @@index([status])
  @@index([deleted])
  @@map("requirements")
}

// Chat
model Task {
  id            String      @id @default(cuid())
  title         String
  description   String?
  
  // Direct workspace relationship
  workspaceId   String
  workspace     Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  // Assignment and repository linking
  assigneeId    String?
  assignee      User?       @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  repositoryId  String?
  repository    Repository? @relation(fields: [repositoryId], references: [id], onDelete: SetNull)
  
  status        TaskStatus  @default(TODO)
  priority      Priority    @default(MEDIUM)
  estimatedHours Int?
  actualHours   Int?
  
  // Audit fields
  createdById   String
  createdBy     User        @relation("TaskCreator", fields: [createdById], references: [id])
  updatedById   String
  updatedBy     User        @relation("TaskUpdater", fields: [updatedById], references: [id])
  
  deleted       Boolean     @default(false)
  deletedAt     DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  comments      Comment[]   @relation("TaskComments")
  chatMessages  ChatMessage[] 

  @@index([workspaceId])
  @@index([assigneeId])
  @@index([status])
  @@index([deleted])
  @@map("tasks")
}

// =============================================
// CHAT & ARTIFACTS
// =============================================

model ChatMessage {
  id                  String      @id @default(cuid())
  taskId              String?
  task                Task?       @relation(fields: [taskId], references: [id], onDelete: Cascade)
  message             String
  role                ChatRole
  timestamp           DateTime    @default(now())
  contextTags         Json        @default("[]") // stores ContextTag[]
  status              ChatStatus  @default(SENDING)
  sourceWebsocketID   String?     @map("source_websocket_id")
  replyId             String?     @map("reply_id")
  
  artifacts           Artifact[]
  
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  
  @@index([taskId])
  @@index([timestamp])
  @@map("chat_messages")
}

model Artifact {
  id            String        @id @default(cuid())
  messageId     String
  message       ChatMessage   @relation(fields: [messageId], references: [id], onDelete: Cascade)
  type          ArtifactType
  content       Json?         // stores FormContent | CodeContent | BrowserContent
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  @@index([messageId])
  @@index([type])
  @@map("artifacts")
}

// Add these enums to your existing enums section:
enum ChatRole {
  USER
  ASSISTANT
}

enum ChatStatus {
  SENDING
  SENT
  ERROR
}

enum ContextTagType {
  PRODUCT_BRIEF
  FEATURE_BRIEF
  SCHEMATIC
}

enum ArtifactType {
  FORM
  CODE
  BROWSER
  IDE
  MEDIA
  STREAM
}

// =============================================
// ROADMAP MANAGEMENT
// =============================================

model Roadmap {
  id          String         @id @default(cuid())
  name        String
  description String?
  
  productId   String
  product     Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  timeHorizon TimeHorizon    @default(QUARTER)
  startDate   DateTime
  endDate     DateTime
  
  deleted     Boolean        @default(false)
  deletedAt   DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  
  items       RoadmapItem[]
  
  @@index([productId])
  @@index([deleted])
  @@map("roadmaps")
}

model RoadmapItem {
  id                String    @id @default(cuid())
  roadmapId         String
  roadmap           Roadmap   @relation(fields: [roadmapId], references: [id], onDelete: Cascade)
  featureId         String
  feature           Feature   @relation(fields: [featureId], references: [id], onDelete: Cascade)
  
  plannedStartDate  DateTime
  plannedEndDate    DateTime
  actualStartDate   DateTime?
  actualEndDate     DateTime?
  
  // Dependencies stored as array of roadmap item IDs
  dependencies      String[]  @default([])
  milestone         Boolean   @default(false)
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  @@unique([roadmapId, featureId])
  @@index([roadmapId])
  @@index([featureId])
  @@map("roadmap_items")
}

// =============================================
// COMMUNICATION & COLLABORATION
// =============================================

model Comment {
  id          String        @id @default(cuid())
  content     String
  
  // Polymorphic relationship - can comment on different entity types
  entityType  CommentEntity
  featureId   String?
  feature     Feature?      @relation("FeatureComments", fields: [featureId], references: [id], onDelete: Cascade)
  userStoryId String?
  userStory   UserStory?    @relation("UserStoryComments", fields: [userStoryId], references: [id], onDelete: Cascade)
  taskId      String?
  task        Task?         @relation("TaskComments", fields: [taskId], references: [id], onDelete: Cascade)
  requirementId String?
  requirement Requirement? @relation("RequirementComments", fields: [requirementId], references: [id], onDelete: Cascade)
  
  // Threading support
  parentId    String?
  parent      Comment?      @relation("CommentThread", fields: [parentId], references: [id])
  replies     Comment[]     @relation("CommentThread")
  
  authorId    String
  author      User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  deleted     Boolean       @default(false)
  deletedAt   DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  @@index([featureId])
  @@index([userStoryId])
  @@index([taskId])
  @@index([requirementId])
  @@index([authorId])
  @@index([deleted])
  @@map("comments")
}

// =============================================
// ENUMS
// =============================================

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum WorkspaceRole {
  OWNER
  ADMIN
  PM
  DEVELOPER
  STAKEHOLDER
  VIEWER
}

enum SwarmStatus {
  PENDING
  ACTIVE
  FAILED
  DELETED
}

enum RepositoryStatus {
  PENDING
  SYNCED
  FAILED
}

enum FeatureStatus {
  IDEA
  PLANNED
  IN_PROGRESS
  DONE
  CANCELLED
}

enum StoryStatus {
  BACKLOG
  IN_PROGRESS
  DONE
  CANCELLED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum RequirementType {
  FUNCTIONAL
  NON_FUNCTIONAL
  TECHNICAL
  BUSINESS
}

enum MoSCoWPriority {
  MUST_HAVE
  SHOULD_HAVE
  COULD_HAVE
  WONT_HAVE
}

enum RequirementStatus {
  DRAFT
  APPROVED
  IMPLEMENTED
  REJECTED
}

enum TimeHorizon {
  QUARTER
  HALF_YEAR
  YEAR
  CUSTOM
}

enum CommentEntity {
  FEATURE
  USER_STORY
  TASK
  REQUIREMENT
}

enum SwarmWizardStep {
  WELCOME
  REPOSITORY_SELECT
  PROJECT_NAME
  GRAPH_INFRASTRUCTURE
  INGEST_CODE
  ADD_SERVICES
  ENVIRONMENT_SETUP
  REVIEW_POOL_ENVIRONMENT
  STAKWORK_SETUP
}

enum StepStatus {
  PENDING
  STARTED
  PROCESSING
  COMPLETED
  FAILED
}
